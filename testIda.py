# Initialize HeadlessIda
from headless_ida import HeadlessIda
headlessIda = HeadlessIda("/home/logan/idaedu-8.4/ida64","/bin/ls")
import idautils
import ida_name
import ida_hexrays
import ida_funcs
        
# Check if Hex-Rays decompiler is available
if not ida_hexrays.init_hexrays_plugin():
    print("Hex-Rays decompiler is not available.")
else:
    # Iterate over all functions
    for func in idautils.Functions():
        func = ida_funcs.get_func(func)
        mbr = ida_hexrays.mba_ranges_t(func)
        hf = ida_hexrays.hexrays_failure_t()
        ml = ida_hexrays.mlist_t()
        ida_hexrays.mark_cfunc_dirty(func.start_ea)
        mba = ida_hexrays.gen_microcode(mbr, hf, ml, ida_hexrays.DECOMP_NO_WAIT, ida_hexrays.MMAT_ZERO)
        if not mba:
            print("0x%08X: %s" % (hf.errea, hf.desc()))
            #return None
        #return mba
        if mba:
            # String to hold microcode output
            microcode_str = ""

            # Iterate over the basic blocks in the microcode
            for blk_idx in range(mba.qty):
                blk = mba.get_mblock(blk_idx)
                #microcode_str += f"Block {blk_idx}:\n"
                
                # Iterate over the instructions in the basic block
                minsn = blk.head
                while minsn:
                    insn_str = minsn.dstr()
                    microcode_str += f"  {insn_str}\n"
                    minsn = minsn.next  # Move to the next instruction

            # Print or store the string representation of the microcode
            print(f"Microcode for function at {hex(func.start_ea)}:")
            print(microcode_str)
        else:
            print(f"Failed to generate microcode for function at {hex(func.start_ea)}: {hf.code}")