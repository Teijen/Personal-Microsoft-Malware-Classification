import struct
import pefile

class PEHeaderGenerator:
    def __init__(self, ida_disassembly_file, raw_bytes_file):
        self.ida_disassembly = self.parse_ida_disassembly(ida_disassembly_file)
        self.raw_bytes = self.read_raw_bytes(raw_bytes_file)

    def parse_ida_disassembly(self, file_path):
        with open(file_path, 'r') as file:
            lines = file.readlines()

        # Parse the disassembly to extract relevant information
        entry_point = None
        sections = []
        for line in lines:
            if line.startswith('seg_'):
                sections.append(self.parse_section(line))
            elif 'start' in line and 'end' in line:
                entry_point = int(line.split()[1], 16)

        return {
            'entry_point': entry_point,
            'sections': sections
        }

    def parse_section(self, line):
        parts = line.strip().split()
        name = parts[0][4:-1]
        start = int(parts[1], 16)
        end = int(parts[3], 16)
        size = end - start
        return {
            'name': name,
            'start': start,
            'end': end,
            'size': size
        }

    def read_raw_bytes(self, file_path):
        with open(file_path, 'rb') as file:
            return file.read()

    def generate_pe_header(self):
    # Create a new PE file object
        pe = pefile.PE(data=self.raw_bytes)

        # Set the entry point
        pe.OPTIONAL_HEADER.AddressOfEntryPoint = self.ida_disassembly['entry_point']

        # Add the sections
        for section in self.ida_disassembly['sections']:
            new_section = pefile.SectionStructure(pe.__IMAGE_SECTION_HEADER_format__)
            new_section.Name = section['name'].encode()
            new_section.Misc_VirtualSize = section['size']
            new_section.VirtualAddress = section['start']
            new_section.SizeOfRawData = section['size']
            new_section.PointerToRawData = len(pe.header) + pe.get_data_directory_offset()
            pe.sections.append(new_section)

        # Update the header information
        pe.FILE_HEADER.NumberOfSections = len(pe.sections)
        pe.OPTIONAL_HEADER.SizeOfImage = max(section['end'] for section in self.ida_disassembly['sections'])

        # Write the header to bytes
        header_bytes = pe.header

        return header_bytes

# Usage example
ida_disassembly_file = 'data/samples/0AnoOZDNbPXIr2MRBSCh.asm'
raw_bytes_file = 'data/samples/0AnoOZDNbPXIr2MRBSCh.asm'

generator = PEHeaderGenerator(ida_disassembly_file, raw_bytes_file)
header_bytes = generator.generate_pe_header()

# Combine the header and raw bytes
full_binary = header_bytes + generator.raw_bytes

# Save the reconstructed PE file
with open('reconstructed_pe.exe', 'wb') as file:
    file.write(full_binary)