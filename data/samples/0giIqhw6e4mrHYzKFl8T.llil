int32_t sub_5e(int32_t arg1, int32_t arg2, void* arg3, void* arg4 @ r5, int32_t arg5)
r1 = r1 << 1
r3 = zx.d([r2 + 0x3a].w)
r0 = r1 << 1
r1 = zx.d([r5 + 4].w)
r0 = r0 << 1
r6 = [&data_7c].d
r0 = r0
r1 = r1 + 0xf9
r7 = r1 << 1
r1 = [sp + 0x74 {arg5}].d
jump(r0)

int32_t sub_d6(int32_t arg1, int32_t arg2 @ r4)
r0 = r0
r2 = r0 << 9
r5 = r0 << 1
r4 = r4 - 0x4a
r5 = [&data_304].d
r0 = zx.d([r6 + 0x1e].w)
r5 = r5 | 0x20c00000
r0 = zx.d([r4 + 0xe].w)
unimplemented  {mrrc p5, #8, r5, r5, c11}
r4 = r5 << 0xf
jump(0xfffff99c)

int32_t sub_f0(int32_t arg1, char* arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r6, void* arg6 @ r7)
[r1 + r6].b = r1.b
r4 = zx.d([r3 + 0x1e].w)
unimplemented  {mrrc p7, #0, r11, r5, c15}
r2 = r1 s>> 1
r5 = [&data_105+3].d
r4 = zx.d([r3 + 0xe].w)
unimplemented  {strex r5, r4, [sp, #0x22c]}
r4 = zx.d([r7 + 0x1e].w)
r5 = zx.d([r4 + r7].b)
r2 = r0 + r3
r8 = r0 + 0xaf000000
r0 = [&data_1ac].d
[r4 + 0x38].d = r0
r1 = [r4 + r3].d
r4 = &data_3a4
r4 = &data_3a8
<return> tailcall(sub_378)

int32_t sub_11c(int32_t arg1 @ r4, int32_t* arg2 @ r9, int32_t arg3, int32_t* arg4, int32_t arg5, void* arg6)
r1 = pop
r2 = pop
r5 = pop
r6 = pop
r8 = r4 - 0xaf000000
r0 = [&data_1b8].d
r4 = &data_1b8
r4 = &data_3b8
goto 9 @ 0x3f2

temp0.d = r2
[temp0.d].d = r2
[temp0.d + 4].d = r5
[temp0.d + 8].d = r6
unimplemented  {cdp p2, #2, c12, c15, c0, #5}
push(r11)
push(r10)
push(r9)
push(r8)
push(r5)
push(r1)
[r6 + 0x4c].d = r1
r7 - 0xc2
r1 = pop
r2 = pop
r3 = pop
r5 = pop
r6 = pop
r7 = pop
r5 - 0xc2
r1 = zx.d([r5 + 0x1b].b)
undefined

int32_t sub_138(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, void* arg5 @ r6, int32_t arg6, int32_t arg7, void* arg8, int32_t arg9, int32_t arg10)
r5 = &data_16c
r4 = &data_3cc
[r4 + 0x38 {&data_404}].d = r4
r4 = [&data_4c4].d
r4 = &data_4d4
r4 = &data_3d4
goto 7 @ 0x40e

r7 - 4
[r6 + 0x4c].d = r1
unimplemented  {mcr p13, #1, r2, c15, c4, #7}
r1 = r5 + r3
flag:z = r5 == neg.d(r3)
flag:c = r5 + r3 u< r5
if (flag:z || flag:c) then 14 @ 0x466 else 15 @ 0x41a

if (flag:z) then 16 @ 0x3b2 else 17 @ &data_468

undefined

if (flag:z || flag:c) then 25 @ 0x400 else 34 @ 0x3b4

r7 - 0x8f
r1 = [r5 + r3].d
r5 - r4
r4 = &data_700
r4 = 0xa4
cond:0 = r4 == 0
r7 = zx.d([r4 + r4 {0x148}].b)
if (cond:0) then 35 @ 0x3c0 else 37 @ 0x476

r1 = pop
r2 = pop
r3 = pop
r5 = pop
r6 = pop
r7 = pop
r5 - 0xc2
r1 = zx.d([r5 + 0x1b].b)
undefined

undefined

r0 = sp + 0x384 {arg_384}
jump(0xffffff14)

r7 - 0xb9
r1 = [r4 + r3].d
undefined

int32_t sub_1bc()
goto 1 @ sub_41e

r3 = sp + 0xdc {arg_dc}
undefined

int32_t sub_1d2(int32_t arg1, void* arg2 @ r4, int32_t arg3 @ r6, int32_t arg4 @ r9, int32_t arg5 @ r12)
[r4 + 0x34].d = r0
r9 = r9 + r12
r4 = &data_468
r4 = &data_46c
r5 = sp + 0x13c {arg_13c}
if (flag:n) then 6 else 7 @ 0x1e0

jump(0x70068)

r1 = r6 u>> 0x13
undefined

int32_t sub_276(int32_t arg1, int32_t arg2, int32_t arg3, void* arg4, int32_t arg5 @ r5, int32_t arg6 @ r6, void* arg7 @ r7)
r7 - 8
r1 = r6 u>> 3
r6 = sp + 0xbc {arg_bc}
r5 - r4
r4 = &data_510
r3 = zx.d([r3 + r5].w)
goto 7 @ 0x4e4

r5 = not.d(r6)
r7 = r7 + 0x54
r0 = 0xab
r2 = [r3 + r5].d
r3 = zx.d([r3 + r5].w)
goto 13 @ sub_750

sp = r5 | 0x1020000
r4 - 0xfc
r1 = [sp + 0x1f4].d
[r7 + 0x11].b = r7.b
r0 = zx.d([r0 + 8 {&data_b3}].w)
[r2 + 0x18].w = r1.w
r5 = r7 s>> 0x11
[r0 + 0x10 {&data_aa50}].b = r0.b
r0 = zx.d([r1 + 0x18].w)
r5 = r1 s>> 0x11
[r1 + r6].b = r3.b
r0 = zx.d([r4 + 0xe {&data_51e}].w)
r1 = zx.d([r2 + 0x18].w)
undefined

int32_t sub_288(int32_t arg1, int32_t arg2, int32_t, int32_t arg4, int32_t arg5 @ r6)
r1 = r6 u>> 3
flag:z = (r6 & 0xfffffff8) == 0
flag:c = test_bit(r6, 3 - 1)
r6 = sp + 0xbc {arg_bc}
r5 = [r4 + 0x50].d
r5 = &data_54c
r4 = &data_524
if (flag:z || flag:c) then 8 @ 0x2e0 else 15 @ 0x294

r0 = 0xab
r1 = zx.d([r1 + r7].w)
r3 = zx.d([r3 + r5].w)
r5 = 0xc2
r1 = zx.d([r5 + r3].b)
r3 = &data_394
undefined

undefined

int32_t sub_2d8(int32_t arg1, int32_t arg2, int32_t, void* arg4, int32_t arg5 @ r6)
r5 = 0x5b
r0 = r0 + 0xd9
r5 = not.d(r6)
r7 = r7 + 0x54
r0 = 0xab
r1 = zx.d([r1 + r7].w)
r3 = zx.d([r3 + r5].w)
r5 = 0xc2
r1 = zx.d([r5 + r3].b)
r3 = &data_394
undefined

int32_t sub_318(int16_t arg1, int32_t, void* arg3)
r5 = 0x58
r4 = &data_434
r4 = &data_5b0
r7 = 0xe4
r4 = &data_49c
[r2 + 0x36].w = r0.w
undefined

int32_t sub_378(int32_t arg1, int32_t arg2, void* arg3 @ r6)
r7 - 0x28
[r6 + 0x4c].d = r1
r6 - 0x2f
r4 = &data_420
r4 = &data_614
push(r11)
push(r10)
push(r9)
push(r8)
push(r5)
push(r3)
push(r2)
r0 = sp + 0x3c4 {arg_3a8}
undefined

int32_t sub_422(int32_t, int32_t, int32_t* arg3, void* arg4, int32_t arg5 @ r4, int32_t arg6 @ r5)
r3 = zx.d([r3 + r5].w)
r5 = [&data_594].d
r6 = [r2 + r4].d
r3 = zx.d([r3 + r5].w)
goto 5 @ sub_6f4

r4 = zx.d([r3 + 0xe].w)
jump(0xffffff94)

int32_t j_sub_4b6()
r0 = [&data_7f8].d
<return> tailcall(sub_4b6)

int32_t sub_456(void* arg1 @ r5, int16_t arg2 @ r6)
[r5 + 4].w = r6.w
<return> tailcall(sub_6b6)

int32_t sub_48e(int32_t arg1, int32_t, void* arg3, void* arg4)
r5 = [&data_720].d
r6 = zx.d([r2 + r0].w)
r3 = zx.d([r3 + r5].w)
undefined

int32_t sub_4b6(int32_t arg1, int32_t arg2, void* arg3, void* arg4, char* arg5 @ r4, int32_t* arg6 @ r6, void* arg7 @ r7, void* arg8 @ r10, int32_t arg9, int16_t arg10)
[r4 + 0x24].w = r4.w
r5 = 0xc2
cond:0 = r5 == 0
r1 = zx.d([r5 + r3].b)
unimplemented  {ldcl p12, c5, [r2], #-0x9c}
if (cond:0) then 6 @ 0x40c else 17 @ 0x4c2

push(r11)
push(r10)
push(r9)
push(r8)
push(r2)
[r6 + 0x4c].d = r1
unimplemented  {mcr p13, #1, r2, c15, c4, #7}
r1 = r5 + r3
flag:z = r5 == neg.d(r3)
flag:c = r5 + r3 u< r5
if (flag:z || flag:c) then 22 @ 0x466 else 23 @ 0x41a

[r5 + 0x38 {&data_fa}].d = r0
[r4 + r3].b = r1.b
r4 = &data_6d8
r4 = &data_75c
if (flag:c) then 24 @ 0x568 else 44 @ 0x4cc  {"4&^G"}

if (flag:z) then 50 @ 0x3b2 else 51 @ &data_468

undefined

[sp + 0x198 {arg_198}].d = r0
r7 - 0xa4
unimplemented  {vst2.16 {d22, d23}, [r1:0x80], r7}
r5 = zx.d([r2 + 0x1a].w)
[r5 + 0x1e].w = r4.w
r4 = r5 u>> 3
&data_57a - r8
r0 = r7 << 7
r0 = r0
temp0.d = r7
r7 = r7
unimplemented  {mcrr2 p0, #0, r0, r5, c0}
r0 = r0
r5 = [&data_7b4].d
r0 = r1 u>> 0x1c
r6 = r6 s>> 6
r11 - r1
r4 = r1 u>> 0x1c
r6 = r6 u>> 2
if (r6 != 0) then 59 @ 0x5ea else 64 @ 0x592

r2 = zx.d([r3 + r5].w)
r7 - 0x5b
r1 = [r6 + r3].d
r5 = r4
r4 = &data_768
jump(0xfffffe22)

if (flag:z || flag:c) then 80 @ 0x400 else 89 @ 0x3b4

r7 - 0x8f
r1 = [r5 + r3].d
r5 - r4
r4 = &data_700
r4 = 0xa4
cond:1 = r4 == 0
r7 = zx.d([r4 + r4 {0x148}].b)
if (cond:1) then 90 @ 0x3c0 else 92 @ 0x476

r0 = sp + 0x3a4 {arg_3a4}
r3 = r5 s>> 0xe
r5 - 0xb5
r1 = zx.d([r6 + r3].b)
goto 95 @ 0x854

[r1 + r6].b = r1.b
[r7 + 0x1e].w = r4.w
r2 = r7 << 3
r5 = r6 - 5
[r1 + r6].b = r3.b
r4 = r1 u>> 0x1c
r6 = r7 << 0xa
[r3 + 0x400].b = r7.b
r4 = zx.d([r2 + 0x18].w)
r5 = r1 u>> 1
r5 = [&data_5b8].d
r0 = zx.d([r7 + 0xe].w)
r5 = r1 u>> 1
[r1 + r6].b = r3.b
r4 = r1 << 0xc
undefined

r1 = pop
r2 = pop
r3 = pop
r5 = pop
r6 = pop
r7 = pop
r5 - 0xc2
r1 = zx.d([r5 + 0x1b].b)
undefined

undefined

r0 = sp + 0x384 {arg_370}
jump(0xffffff14)

r7 - 0xb9
r1 = [r4 + r3].d
undefined

r1 = r3 << 4
r0 = r0 {arg_3a4}
&data_85c - r8
r4 = r7 << 3
r0 = r0 {arg_3a4}
cond:2 = r0 s< 0
r0 = zx.d([r0 + 0x18 {arg10}].w)
if (cond:2) then 103 @ 0x8fe else 112 @ 0x862

[r2 + 0xa].w = r0.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r5 = [temp0.d + 0xc].d
r6 = [temp0.d + 0x10].d
r4 = r4 + 0x14
undefined

[r1 + r6].b = r3.b
[r1 + 8 {0xffffc008}].w = r0.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r3
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r2 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r3 = r3 + 0x10
<return> tailcall(sub_f66)

int32_t sub_4d8(int32_t arg1, void* arg2 @ r4)
r7 = sx.d([r4 + r0].w)
r3 = sp + 0x290 {arg_290}
[sp + 0x80 {arg_80}].d = r1
r2 = zx.d([r3 + r5].w)
r5 = 0x5b
r0 = r0 + 0xd9
r5 = not.d(r6)
r7 = r7 + 0x54
r0 = 0xab
r2 = [r3 + r5].d
r3 = zx.d([r3 + r5].w)
<return> tailcall(sub_750)

int32_t sub_4fe(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r5, void* arg6 @ r6)
r7 - 0x64
r1 = r5 + r3
unimplemented  {mcr p15, #1, r2, c13, c4, #7}
[r6 + 0x4c].d = r1
<return> tailcall(sub_1d2)

int32_t j_sub_51a(int32_t arg1, int32_t arg2, void* arg3 @ r6)
r7 - 0xa4
<return> tailcall(sub_51a)

int32_t sub_51a(int32_t, int32_t arg2, void* arg3 @ r6)
[r6 + 0x4c].d = r1
undefined

int32_t sub_546(int32_t arg1, void* arg2, int32_t arg3 @ r6)
r4 = zx.d([r1 + r6].w)
r0 = r0 - 0xd1
goto 3 @ 0x7ac

r0 = r0
r0 = r0
r5 = [&data_9e0].d
[r1 + 8].w = r4.w
r1 = r4 << 3
undefined

int32_t sub_556(int32_t arg1, void* arg2, int32_t arg3 @ r4, int32_t arg4 @ r6, void* arg5 @ r7, int16_t arg6)
cond:0 = r7 u<= 0x9c
[sp + 0x344 {arg_344}].d = r4
if (cond:0) then 3 @ 0x5bc else 4 @ 0x55c

<return> tailcall(sub_d6)

r7 - 0x90
push(r7)
push(r6)
push(r5)
push(r4)
push(r0)
temp0.d = r1
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r2 = [temp0.d + 8].d
r3 = [temp0.d + 0xc].d
r5 = [temp0.d + 0x10].d
r0 = zx.d([r1 + r6].w)
r7 - 0x46
unimplemented  {vst4.16 {d25, d26, d27, d28}, [r1:0x80], r6}
r7 - 0xa4
unimplemented  {vst2.16 {d22, d23}, [r1:0x80], r7}
r5 = zx.d([r2 + 0x1a].w)
[r5 + 0x1e].w = r4.w
r4 = r5 u>> 3
&data_57a - r8
r0 = r7 << 7
r0 = r0
temp0.d = r7
r7 = r7
unimplemented  {mcrr2 p0, #0, r0, r5, c0}
r0 = r0
r5 = [&data_7b4].d
r0 = r1 u>> 0x1c
r6 = r6 s>> 6
r11 - r1
r4 = r1 u>> 0x1c
r6 = r6 u>> 2
if (r6 != 0) then 38 @ 0x5ea else 43 @ 0x592  {"O4&^G"}

r0 = sp + 0x3a4 {arg_390}
r3 = r5 s>> 0xe
r5 - 0xb5
r1 = zx.d([r6 + r3].b)
goto 59 @ 0x854

[r1 + r6].b = r1.b
[r7 + 0x1e].w = r4.w
r2 = r7 << 3
r5 = r6 - 5
[r1 + r6].b = r3.b
r4 = r1 u>> 0x1c
r6 = r7 << 0xa
[r3 + 0x400].b = r7.b
r4 = zx.d([r2 + 0x18].w)
r5 = r1 u>> 1
r5 = [&data_5b8].d
r0 = zx.d([r7 + 0xe].w)
r5 = r1 u>> 1
[r1 + r6].b = r3.b
r4 = r1 << 0xc
undefined

r1 = r3 << 4
r0 = r0 {arg_390}
&data_85c - r8
r4 = r7 << 3
r0 = r0 {arg_390}
cond:1 = r0 s< 0
r0 = zx.d([r0 + 0x18 {arg6}].w)
if (cond:1) then 67 @ 0x8fe else 76 @ 0x862

[r2 + 0xa].w = r0.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r5 = [temp0.d + 0xc].d
r6 = [temp0.d + 0x10].d
r4 = r4 + 0x14
undefined

[r1 + r6].b = r3.b
[r1 + 8 {0xffffc008}].w = r0.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r3
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r2 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r3 = r3 + 0x10
<return> tailcall(sub_f66)

int32_t sub_5c6(char arg1, char* arg2, void* arg3, int32_t arg4, int32_t* arg5 @ r6, int32_t* arg6 @ r7, int32_t arg7 @ r11, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11)
goto 1 @ sub_890

r3 & r0
r3 = r3 - 0xc
[r1 + 0x17].b = r0.b
temp0.d = r7
[temp0.d].d = r2
[temp0.d + 4].d = r3
r7 = r7 + 8
unimplemented  {mcrr2 p0, #0, r0, r5, c1}
r0 = r0
temp0.d = r6
r0 = [temp0.d].d
r3 = [temp0.d + 4].d
r5 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r7 = [temp0.d + 0x10].d
r0 = r0
cond:0 = r0 s< 0
r0 = zx.d([r0 + 0x18].w)
if (cond:0) then 20 @ 0x942 else 30 @ 0x8a6

r5 = [&data_b70].d
r0 = zx.d([r2 + 0xe].w)
temp0.d = r0
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r3
[temp0.d + 0xc].d = r6
r7 = 0xeb
[r7 + 0x17 {&data_102}].b = r7.b
undefined

[r1 + r6].b = r3.b
r0 = r1 << 0xc
r4 = 0x51
flag:v = add_overflow(r11, neg.d(r1))
r4 = r5 u>> 0x1f
r7 = r6 u>> 0x12
flag:n = r6 u>> 0x12 s< 0
flag:z = (r6 & 0xfffc0000) == 0
r2 = zx.d([r0 + 0xa].w)
if (not(flag:z) && flag:n == flag:v) then 40 @ 0x952 else 41 @ 0x8b6

undefined

r5 = [&data_ae4].d
r4 = zx.d([r2 + 0x1e].w)
r5 = r2 u>> 1
flag:n = r2 u>> 1 s< 0
flag:z = (r2 & 0xfffffffe) == 0
[r0 + r4].d = r3
r4 = zx.d([r3 + 0x18].w)
if (not(flag:z) && flag:n == flag:v) then 49 @ 0x94e else 56 @ 0x8c2

r0 = pop
r2 = pop
r4 = pop
r5 = pop
r6 = pop
r0 = r5 + 7
undefined

r3 = r1 u>> 0x12
flag:n = r1 u>> 0x12 s< 0
flag:z = (r1 & 0xfffc0000) == 0
r2 = zx.d([r0 + 0xc].w)
if (flag:z) then 61 @ 0x964 else 62 @ 0x8c8  {"EZE6F"}  {"ZE6F"}

<return> tailcall(sub_51a)

r5 = [&data_af8].d
r4 = zx.d([r2 + 0x1e].w)
if (not(flag:z) && flag:n == flag:v) then 65 @ 0x97a else 70 @ 0x8ce

[r5 + 0xe {0x904d8d64}].w = r4.w
r4 = zx.d([r5 + 6 {0x904d8d5c}].w)
r0 = r0
flag:n = r0 s< 0
goto 73 @ 0x980

[r0 + r4].d = r3
r0 = zx.d([r2 + 8].w)
if (not(flag:z) && flag:n == flag:v) then 73 @ 0x980 else 76 @ 0x8d4

temp0.d = r7
r7 = r7
if (not(flag:n)) then 111 @ 0xa10 else 117 @ 0x984

r3 = zx.d([r0 + 0x16].b)
r0 = r7 << 3
r5 = zx.d([r6 + r1].w)
r3 = zx.d([r0 + 0x16].b)
r4 = r0 << 3
[r6 + r1].b = r4.b
r5 = [&data_b10].d
[r2 + 0xe].w = r4.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r5 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r4 = r4 + 0x10
[r2 + 0x40].d = r3
[r0 + 0x26].w = r1.w
[r1 + r6].b = r3.b
r3 = r3 - 0xec
r1 = r2 + r1
r3 = 0 - r6
r5 = [&data_b20].d
r4 = zx.d([r0 + 0x1e].w)
r5 = r2 u>> 1
r3 = r0 s>> 4
r2 = zx.d([r2 + 0x1a].w)
r5 = r0 u>> 0x11
[r2 + 0xa].w = r0.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r5 = [temp0.d + 0xc].d
r6 = [temp0.d + 0x10].d
r4 = r4 + 0x14
undefined

unimplemented  {ldcl p13, c7, [sp], #-0xb0}
r1 = zx.d([r3 + 0x1e].b)
r7 = r7 + 0x74
r9 - r1
[r4 + 0x1e].w = r4.w
goto 160 @ 0x31a

r0 = r0
r0 = r0
&data_98c - r8
r5 = r1 u>> 0x1b
r0 = r0
temp0.d = r7
r7 = r7
r6 = sp + 0x114 {arg_114}
r3 = r1
r0 = r0
&data_99a - r8
r1 = r2 u>> 3
r0 = r0
temp0.d = r7
r7 = r7
unimplemented  {mcrr p13, #2, r7, r5, c12}
r1 = zx.d([r3 + 0x1e].b)
&data_9a8 - r8
r0 = r7 u>> 0xb
r0 = r0
temp0.d = r7
r7 = r7
temp0.d = r1
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r1 = r1 + 0xc
r4 = r1
r0 = r0
&data_9b6 - r8
r4 = zx.d([r0 + 0x3c].w)  {"\x1bEZE6F"}
r0 = r0
temp0.d = r6
r6 = r6
unimplemented  {setend le}
temp0.d = r6
[temp0.d].d = r0
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r6 = r6 + 0x14
undefined

r4 = &data_434
r4 = &data_5b0
r7 = 0xe4
r4 = &data_49c
[r2 + 0x36].w = r0.w
undefined

int32_t sub_5e4(int32_t arg1, int32_t arg2, void* arg3, int32_t arg4 @ r5, void* arg5 @ r6, int32_t arg6 @ r7, int16_t arg7)
r4 = &data_738
r4 = &data_878
r7 - 0xa4
r0 = sp + 0x3a4 {arg_3a4}
r3 = r5 s>> 0xe
r5 - 0xb5
r1 = zx.d([r6 + r3].b)
goto 8 @ 0x854

r1 = r3 << 4
r0 = r0 {arg_3a4}
&data_85c - r8
r4 = r7 << 3
r0 = r0 {arg_3a4}
cond:0 = r0 s< 0
r0 = zx.d([r0 + 0x18 {arg7}].w)
if (cond:0) then 16 @ 0x8fe else 25 @ 0x862

[r2 + 0xa].w = r0.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r5 = [temp0.d + 0xc].d
r6 = [temp0.d + 0x10].d
r4 = r4 + 0x14
undefined

[r1 + r6].b = r3.b
[r1 + 8].w = r0.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r3
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r2 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r3 = r3 + 0x10
<return> tailcall(sub_f66)

int32_t sub_5f4(int32_t arg1, void* arg2, int32_t* arg3, void* arg4, int32_t arg5 @ r4, int32_t arg6 @ r5, int32_t arg7 @ r6, int32_t arg8 @ r7, int32_t arg9 @ r8, int32_t arg10 @ r10, int32_t arg11 @ r11)
cond:0 = r7 u<= 0x5c
r0 = sp + 0x3a4 {arg_3a4}
if (cond:0) then 3 @ 0x646 else 5 @ 0x5fa

r5 = sp + 0x36c {arg_36c}
undefined

r0 = zx.d([r3 + 2].w)
temp1.d = r5
r5 = r5 - 0xd9
if (temp1.d == 0xd9) then 9 @ &data_5b8 else 21 @ 0x600

r3 = zx.d([r1 + 0x1e].w)
unimplemented  {mcrr2 p5, #8, lr, r5, c11}
temp0.d = r3
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r3
[temp0.d + 0xc].d = r4
[temp0.d + 0x10].d = r6
r3 = r3 + 0x14
r7 - 0xf1
r7 = 0x48
undefined

temp0.d = r2
[temp0.d].d = r1
[temp0.d + 4].d = r5
[temp0.d + 8].d = r7
r2 = r2 + 0xc
temp0.d = r5 - 0x18
[temp0.d].d = r3
[temp0.d + 4].d = r6
[temp0.d + 8].d = r8
[temp0.d + 0xc].d = r10
[temp0.d + 0x10].d = r11
[temp0.d + 0x14].d = lr
r5 = temp0.d
r7 = &data_624
r4 = [&data_9b0].d
push(r10)
push(r9)
push(r8)
push(r7)
push(r5)
push(r3)
goto 43 @ &data_c9+1  {"O4&^G"}

r0 = r0
r3 = r3 u>> r3
r0 = r0
r0 - 0x45
r0 = r0 << 1
[r0 + r0].d = r6
<return> tailcall(sub_d6)

int32_t sub_630(int32_t, char arg2, int32_t, int32_t arg4, char* arg5 @ r4)
r7 - 0x54
[r4 + r3].b = r1.b
undefined

int32_t sub_640(void* arg1, void* arg2, void* arg3, int32_t arg4 @ r6, int32_t arg5 @ r7)
r3 = sp + 0x360 {arg_360}
if (flag:z || flag:c) then 2 @ 0x694 else 12 @ 0x644

r4 = r6 << 7
r0 = r0
r0 = zx.d([r0 + 0x18].w)
r5 = r1 u>> 1
r5 = [&data_8c4].d
[r2 + 0x1e].w = r4.w
r5 = r7 u>> 1
[r0 + 0x14].b = r0.b
r0 = zx.d([r1 + 0x18].w)
undefined

unimplemented  {mrc2 p13, #2, R10, c4, c11, #6}
undefined

int32_t sub_668(int32_t arg1, int32_t arg2, void* arg3, void* arg4, char* arg5 @ r4, int32_t* arg6 @ r5, void* arg7 @ r6, int32_t* arg8 @ r7)
[r4 + r5].b = r7.b
unimplemented  {stc p12, c14, [r11], {0x83}}
temp0.d = r7
[temp0.d].d = r2
[temp0.d + 4].d = r3
[temp0.d + 8].d = r5
r7 = r7 + 0xc
if (not(flag:z) && not(flag:c)) then 8 @ 0x6fe else 11 @ 0x672

r5 = [&data_924].d
r0 = zx.d([r6 + 0x1e].w)
jump(0x44e524)

r0 = r4 << 3
r0 = r0
&data_67a - r8
r4 = r5 s>> 0x13
r0 = r0
temp0.d = r7
r7 = r7
[r5 + r0].d = r0
r0 = r0
&data_688 - r8
r4 = r3 << 0x13
r0 = r0
temp0.d = r7
r7 = r7
unimplemented  {mcrr2 p13, #2, r7, r5, c12}
r1 = zx.d([r3 + 0x1e].b)
&data_696 - r8
r4 = r6 << 7
r0 = r0
r0 = zx.d([r0 + 0x18].w)
r5 = r1 u>> 1
r5 = [&data_8c4].d
[r2 + 0x1e].w = r4.w
r5 = r7 u>> 1
[r0 + 0x14].b = r0.b
r0 = zx.d([r1 + 0x18].w)
undefined

int32_t sub_6b6(void* arg1, int32_t arg2, int32_t arg3, uint32_t arg4, int32_t* arg5 @ r5, int32_t arg6 @ r6, uint32_t* arg7 @ r7, int32_t arg8 @ r8, int32_t arg9 @ r9, int32_t arg10 @ r12, int32_t arg11, int32_t arg12, void* arg13)
r2 = r3 << 1
[r0 + 0x10].b = r0.b
[r3 + 8].w = r0.w
unimplemented  {ldc2l p13, c7, [sp], #-0xb0}
r1 = zx.d([r3 + 0x1e].b)
r4 = r6 << 0x1d
r1 = [r0 + 0x58].d
[r5 + 6].w = r0.w
r1 = r1 s>> r4
r6 = zx.d([r2 + 0x1c].w)
[r5].d = r9
r5 = r5 + 0xe9
r0 = r0
cond:0 = r0 s< 0
r0 = zx.d([r0 + 0x18].w)
if (cond:0) then 16 @ 0x772 else 27 @ 0x6d6

r5 = zx.d([r2 + 0x1a].w)
[r5 + 0x1e].w = r4.w
r12 = sp + r12
flag:v = add_overflow(0x77c, neg.d(r8))
r4 = r6 << 7
flag:c = test_bit(r6, 0x20 - 7)
r0 = r0
flag:z = r0 == 0
temp0.d = r7
r7 = r7
if (not(flag:z) && not(flag:c)) then 33 @ 0x80e else 42 @ 0x782

[r1 + r6].b = r3.b
r0 = r1 << 0xc
r4 = r4 - 0x51
[r1 + r6].b = r1.b
r4 = zx.d([r4 + 0x1e].w)
jump(0xffffff7e)

r0 = r0
r5 = [&data_a40].d
r0 = zx.d([r5 + 0x1e {0x7d81e873}].w)
r5 = r2 u>> 1
flag:n = r2 u>> 1 s< 0
flag:z = (r2 & 0xfffffffe) == 0
[r0 + r4].d = r3
r0 = zx.d([r4 + 0xa].w)
if (flag:n) then 83 @ 0x8c8 else 86 @ 0x81c

r0 = r0
r0 = r0
&data_78a - r8
r4 - 0xe0
r1 = [sp + 0x1f4 {arg13}].d
temp0.d = r7
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r2
[temp0.d + 0xc].d = r3
[temp0.d + 0x10].d = r4
[temp0.d + 0x14].d = r5
[temp0.d + 0x18].d = r6
r7 = r7 + 0x1c
r0 = pop
r2 = pop
r6 = pop
r0 = r0
r0 = r0
&data_798 - r8
r0 = r1 << 0x13
r0 = r0
temp0.d = r7
r7 = r7
unimplemented  {mcrr p0, #0, r0, r5, c0}
r0 = r0
&data_7a6 - r8
r0 = r2 << 3
r0 = r0
temp0.d = r7
r7 = r7
temp0.d = r0
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r6
r0 = r0
r0 = r0
r5 = [&data_9e0].d
[r1 + 8].w = r4.w
r1 = r4 << 3
undefined

r5 = [&data_af8].d
r4 = zx.d([r2 + 0x1e].w)
if (not(flag:z) && flag:n == flag:v) then 121 @ 0x97a else 126 @ 0x8ce  {"eCo=M"}

r5 = [&data_a4c].d
r4 = zx.d([r2 + 0x1e].w)
r5 = r2 u>> 1
[r0 + r4].d = r3
r0 = zx.d([r4 + 8].w)
temp0.d = r4
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r6
r4 = r4 + 0x10
&data_82c - r8
r4 = r5 << 3
r0 = r0
r11 = r0 + (r8 u>> 0x20)
unimplemented  {mcrr p13, #0, r4, sp, c3}
r4 = zx.d([r6 + 0xe].w)
unimplemented  {mcrr p5, #8, r5, sp, c11}
r4 = r0 << 0xf
cond:2 = r4 s< 0
temp0.d = r0
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
[r4 + 0xa].w = r6.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r4 = r4 + 0xc
r1 = [&data_b90].d
[r1 + r6].b = r1.b
r4 = zx.d([r0 + 0x1e].w)
if (cond:2) then 129 @ 0x8e8 else 141 @ 0x84c

[r5 + 0xe {0x904d8d64}].w = r4.w
r4 = zx.d([r5 + 6 {0x904d8d5c}].w)
r0 = r0
flag:n = r0 s< 0
goto 153 @ 0x980

[r0 + r4].d = r3
r0 = zx.d([r2 + 8].w)
if (not(flag:z) && flag:n == flag:v) then 153 @ 0x980 else 156 @ 0x8d4

[r0 + 0x26].w = r1.w
[r1 + r6].b = r3.b
r3 = r3 - 0xec
r1 = r2 + r1
r3 = 0 - r6
r5 = [&data_b20].d
r4 = zx.d([r0 + 0x1e].w)
r5 = r2 u>> 1
r3 = r0 s>> 4
r2 = zx.d([r2 + 0x1a].w)
r5 = r0 u>> 0x11
goto 172 @ 0x8fe

[r1 + r6].b = r3.b
r3 = r3 - 0xec
r1 = r2 s>> 0x11
[r1 + 0x18].w = r7.w
r1 = r3 << 4
r0 = r0
&data_85c - r8
r4 = r7 << 3
r0 = r0
cond:3 = r0 s< 0
r0 = zx.d([r0 + 0x18].w)
if (cond:3) then 172 @ 0x8fe else 181 @ 0x862

temp0.d = r7
r7 = r7
if (not(flag:n)) then 196 @ 0xa10 else 202 @ 0x984

r3 = zx.d([r0 + 0x16].b)
r0 = r7 << 3
r5 = zx.d([r6 + r1].w)
r3 = zx.d([r0 + 0x16].b)
r4 = r0 << 3
[r6 + r1].b = r4.b
r5 = [&data_b10].d
[r2 + 0xe].w = r4.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r5 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r4 = r4 + 0x10
[r2 + 0x40].d = r3
goto 129 @ 0x8e8

[r2 + 0xa].w = r0.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r5 = [temp0.d + 0xc].d
r6 = [temp0.d + 0x10].d
r4 = r4 + 0x14
undefined

[r1 + r6].b = r3.b
[r1 + 8].w = r0.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r3
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r2 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r3 = r3 + 0x10
<return> tailcall(sub_f66)

unimplemented  {ldcl p13, c7, [sp], #-0xb0}
r1 = zx.d([r3 + 0x1e].b)
r7 = r7 + 0x74
r9 - r1
[r4 + 0x1e].w = r4.w
goto 245 @ 0x31a

r0 = r0
r0 = r0
&data_98c - r8
r5 = r1 u>> 0x1b
r0 = r0
temp0.d = r7
r7 = r7
r6 = sp + 0x114 {arg_114}
r3 = r1
r0 = r0
&data_99a - r8
r1 = r2 u>> 3
r0 = r0
temp0.d = r7
r7 = r7
unimplemented  {mcrr p13, #2, r7, r5, c12}
r1 = zx.d([r3 + 0x1e].b)
&data_9a8 - r8
r0 = r7 u>> 0xb
r0 = r0
temp0.d = r7
r7 = r7
temp0.d = r1
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r1 = r1 + 0xc
r4 = r1
r0 = r0
&data_9b6 - r8
r4 = zx.d([r0 + 0x3c].w)  {"\x1bEZE6F"}
r0 = r0
temp0.d = r6
r6 = r6
unimplemented  {setend le}
temp0.d = r6
[temp0.d].d = r0
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r6 = r6 + 0x14
undefined

r4 = &data_434
r4 = &data_5b0
r7 = 0xe4
r4 = &data_49c
[r2 + 0x36].w = r0.w
undefined

int32_t sub_72e(int32_t arg1, int32_t arg2, int32_t arg3, void* arg4, void* arg5 @ r7)
r7 = zx.d([r7 + 0x18].w)
sp = sp | 0x83000000
r0 = zx.d([r3 + 0xe].w)
goto 4 @ 0x7d4

[r0 + 0x16].b = r1.b
r4 = r1 s>> 7
r3 - r0
[r7 + r7].d = r4
[r7 + 0x17].b = r7.b
r4 = zx.d([r7 + 0x1c].w)
r5 = r2 u>> 1
unimplemented  {ldrex pc, [r2, #0x204]}
undefined

int32_t j_sub_288(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r6)
<return> tailcall(sub_288)

int32_t sub_770(int32_t arg1, char* arg2, void* arg3, int32_t* arg4, int32_t arg5 @ r4, char* arg6 @ r6, int32_t* arg7 @ r7, int32_t arg8 @ r8, int32_t arg9 @ r12, int32_t arg10, int32_t arg11, void* arg12)
temp0.d = r3
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r3
[temp0.d + 0xc].d = r4
[temp0.d + 0x10].d = r6
r3 = r3 + 0x14
r5 = zx.d([r2 + 0x1a].w)
[r5 + 0x1e].w = r4.w
r12 = sp + r12
flag:v = add_overflow(0x77c, neg.d(r8))
r4 = r6 << 7
flag:c = test_bit(r6, 0x20 - 7)
r0 = r0
flag:z = r0 == 0
temp0.d = r7
r7 = r7
if (not(flag:z) && not(flag:c)) then 18 @ 0x80e else 27 @ 0x782

r0 = r0
r5 = [&data_a40].d
r0 = zx.d([r5 + 0x1e {0x7d81e873}].w)
r5 = r2 u>> 1
flag:n = r2 u>> 1 s< 0
flag:z = (r2 & 0xfffffffe) == 0
[r0 + r4].d = r3
r0 = zx.d([r4 + 0xa].w)
if (flag:n) then 68 @ 0x8c8 else 71 @ 0x81c

r0 = r0
r0 = r0
&data_78a - r8
r4 - 0xe0
r1 = [sp + 0x1f4 {arg12}].d
temp0.d = r7
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r2
[temp0.d + 0xc].d = r3
[temp0.d + 0x10].d = r4
[temp0.d + 0x14].d = r5
[temp0.d + 0x18].d = r6
r7 = r7 + 0x1c
r0 = pop
r2 = pop
r6 = pop
r0 = r0
r0 = r0
&data_798 - r8
r0 = r1 << 0x13
r0 = r0
temp0.d = r7
r7 = r7
unimplemented  {mcrr p0, #0, r0, r5, c0}
r0 = r0
&data_7a6 - r8
r0 = r2 << 3
r0 = r0
temp0.d = r7
r7 = r7
temp0.d = r0
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r6
r0 = r0
r0 = r0
r5 = [&data_9e0].d
[r1 + 8].w = r4.w
r1 = r4 << 3
undefined

r5 = [&data_af8].d
r4 = zx.d([r2 + 0x1e].w)
if (not(flag:z) && flag:n == flag:v) then 106 @ 0x97a else 111 @ 0x8ce

r5 = [&data_a4c].d
r4 = zx.d([r2 + 0x1e].w)
r5 = r2 u>> 1
[r0 + r4].d = r3
r0 = zx.d([r4 + 8].w)
temp0.d = r4
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r6
r4 = r4 + 0x10
&data_82c - r8
r4 = r5 << 3
r0 = r0
r11 = r0 + (r8 u>> 0x20)
unimplemented  {mcrr p13, #0, r4, sp, c3}
r4 = zx.d([r6 + 0xe].w)
unimplemented  {mcrr p5, #8, r5, sp, c11}
r4 = r0 << 0xf
cond:1 = r4 s< 0
temp0.d = r0
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
[r4 + 0xa].w = r6.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r4 = r4 + 0xc
r1 = [&data_b90].d
[r1 + r6].b = r1.b
r4 = zx.d([r0 + 0x1e].w)
if (cond:1) then 114 @ 0x8e8 else 126 @ 0x84c  {"eCo=M"}

[r5 + 0xe {0x904d8d64}].w = r4.w
r4 = zx.d([r5 + 6 {0x904d8d5c}].w)
r0 = r0
flag:n = r0 s< 0
goto 138 @ 0x980

[r0 + r4].d = r3
r0 = zx.d([r2 + 8].w)
if (not(flag:z) && flag:n == flag:v) then 138 @ 0x980 else 141 @ 0x8d4

[r0 + 0x26].w = r1.w
[r1 + r6].b = r3.b
r3 = r3 - 0xec
r1 = r2 + r1
r3 = 0 - r6
r5 = [&data_b20].d
r4 = zx.d([r0 + 0x1e].w)
r5 = r2 u>> 1
r3 = r0 s>> 4
r2 = zx.d([r2 + 0x1a].w)
r5 = r0 u>> 0x11
goto 157 @ 0x8fe

[r1 + r6].b = r3.b
r3 = r3 - 0xec
r1 = r2 s>> 0x11
[r1 + 0x18].w = r7.w
r1 = r3 << 4
r0 = r0
&data_85c - r8
r4 = r7 << 3
r0 = r0
cond:2 = r0 s< 0
r0 = zx.d([r0 + 0x18].w)
if (cond:2) then 157 @ 0x8fe else 166 @ 0x862

temp0.d = r7
r7 = r7
if (not(flag:n)) then 181 @ 0xa10 else 187 @ 0x984

r3 = zx.d([r0 + 0x16].b)
r0 = r7 << 3
r5 = zx.d([r6 + r1].w)
r3 = zx.d([r0 + 0x16].b)
r4 = r0 << 3
[r6 + r1].b = r4.b
r5 = [&data_b10].d
[r2 + 0xe].w = r4.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r5 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r4 = r4 + 0x10
[r2 + 0x40].d = r3
goto 114 @ 0x8e8

[r2 + 0xa].w = r0.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r5 = [temp0.d + 0xc].d
r6 = [temp0.d + 0x10].d
r4 = r4 + 0x14
undefined

[r1 + r6].b = r3.b
[r1 + 8].w = r0.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r3
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r2 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r3 = r3 + 0x10
<return> tailcall(sub_f66)

unimplemented  {ldcl p13, c7, [sp], #-0xb0}
r1 = zx.d([r3 + 0x1e].b)
r7 = r7 + 0x74
r9 - r1
[r4 + 0x1e].w = r4.w
goto 230 @ 0x31a

r0 = r0
r0 = r0
&data_98c - r8
r5 = r1 u>> 0x1b
r0 = r0
temp0.d = r7
r7 = r7
r6 = sp + 0x114 {arg_114}
r3 = r1
r0 = r0
&data_99a - r8
r1 = r2 u>> 3
r0 = r0
temp0.d = r7
r7 = r7
unimplemented  {mcrr p13, #2, r7, r5, c12}
r1 = zx.d([r3 + 0x1e].b)
&data_9a8 - r8
r0 = r7 u>> 0xb
r0 = r0
temp0.d = r7
r7 = r7
temp0.d = r1
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r1 = r1 + 0xc
r4 = r1
r0 = r0
&data_9b6 - r8
r4 = zx.d([r0 + 0x3c].w)  {"\x1bEZE6F"}
r0 = r0
temp0.d = r6
r6 = r6
unimplemented  {setend le}
temp0.d = r6
[temp0.d].d = r0
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r6 = r6 + 0x14
undefined

r4 = &data_434
r4 = &data_5b0
r7 = 0xe4
r4 = &data_49c
[r2 + 0x36].w = r0.w
undefined

int32_t sub_7e8(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, void* arg5 @ r6)
r9 - r1
[r6 + 0x1e].w = r0.w
r4 = r0 s>> 3
r9 - r1
[r4 + 0x1e].w = r4.w
<return> tailcall(sub_f0)

int32_t sub_86c(int32_t* arg1, int32_t, int32_t, int32_t arg4, void* arg5 @ r4)
[r0 + r4].d = r3
[r4 + 8].w = r4.w
goto 3 @ sub_96e

undefined

int32_t sub_954(void* arg1, void* arg2 @ r7, int32_t arg3)
[r7 + 0x1e].w = r7.w
r4 = r0 u>> 3
r1 = zx.d([r0 + 0x16].b)
r4 - 0xe0
r1 = [sp + 0x1f4 {arg3}].d
[r7 + 0x11].b = r7.b
[r0 + 8].w = r0.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r5 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r4 = r4 + 0x10
<return> tailcall(sub_51a)

int32_t sub_970(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r6, void* arg6 @ r7)
r7 = zx.d([r7 + 0x1e].w)
temp0.d = r0
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r6
<return> tailcall(sub_48e)

int32_t sub_9c4(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r4, int32_t arg6 @ r5, int32_t* arg7 @ r6, int32_t arg8 @ r7, int32_t arg9, int32_t* arg10, int32_t arg11, int32_t arg12, int32_t arg13)
temp0.d = r6
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r3
[temp0.d + 0xc].d = r4
[temp0.d + 0x10].d = r5
[temp0.d + 0x14].d = r6
[temp0.d + 0x18].d = r7
r6 = r6 + 0x1c
if (r5 != 0) then 10 @ 0x9da else 12 @ 0x9c8

breakpoint

temp0.d = r6
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r3
[temp0.d + 0xc].d = r4
[temp0.d + 0x10].d = r5
[temp0.d + 0x14].d = r6
[temp0.d + 0x18].d = r7
r6 = r6 + 0x1c
temp0.w = ror.w(r0.w, 0x10)
temp1.w = ror.w(r0 u>> 0x10, 0x10)
r5 = temp1.w << 0x10 | temp0.w
temp0.d = r6
[temp0.d].d = r1
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r6
[temp0.d + 0x14].d = r7
r6 = r6 + 0x18
if (r5 != 0) then 33 @ 0xa22 else 38 @ 0x9d0

r7 = r3 << 8
r0 = r0
r5 = [&data_c54].d
r2 = zx.d([r6 + 0x1c].w)
<return> tailcall(sub_2d8)

temp0.d = r6
[temp0.d].d = r1
[temp0.d + 4].d = r2
[temp0.d + 8].d = r3
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r6
[temp0.d + 0x14].d = r7
r6 = r6 + 0x18
r0 = pop
r2 = pop
r6 = pop
temp0.d = r6
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r5
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r6 = r6 + 0x14
r0 = pop
r2 = pop
r6 = pop
<return> jump(pop)

int32_t sub_a1e(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r4, void* arg6 @ r5, void* arg7 @ r6, int32_t arg8 @ r9)
[r0 + 0x14].b = r0.b
temp0.d = r5 - 0x18
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r2
[temp0.d + 0xc].d = r3
[temp0.d + 0x10].d = r4
[temp0.d + 0x14].d = r9
r0 = r0
r5 = [&data_c54].d
r2 = zx.d([r6 + 0x1c].w)
<return> tailcall(sub_2d8)

void sub_a50(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r4, int32_t arg6 @ r5, int32_t* arg7 @ r6, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11, int32_t arg12, int32_t arg13, int32_t arg14, void* arg15)
r7 = &data_b68
temp0.d = r6
[temp0.d].d = r1
[temp0.d + 4].d = r2
[temp0.d + 8].d = r5
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r6 = r6 + 0x14
r0 = sp + 0x114 {arg_114}
temp0.d = r6
[temp0.d].d = r0 {arg_114}
[temp0.d + 4].d = r1
[temp0.d + 8].d = r5
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r6 = r6 + 0x14
r1 = sp + 0x114 {arg_114}
temp0.d = r6
[temp0.d].d = r1 {arg_114}
[temp0.d + 4].d = r3
[temp0.d + 8].d = r5
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r6 = r6 + 0x14
r2 = sp + 0x114 {arg_114}
temp0.d = r6
[temp0.d].d = r1 {arg_114}
[temp0.d + 4].d = r3
[temp0.d + 8].d = r6
[temp0.d + 0xc].d = r7
r6 = r6 + 0x10
r3 = sp + 0x114 {arg_114}
temp0.d = r6
[temp0.d].d = r0 {arg_114}
[temp0.d + 4].d = r1 {arg_114}
[temp0.d + 8].d = r2 {arg_114}
[temp0.d + 0xc].d = r4
[temp0.d + 0x10].d = r5
[temp0.d + 0x14].d = r6
[temp0.d + 0x18].d = r7
r6 = r6 + 0x1c
r4 = sp + 0x114 {arg_114}
temp0.d = r6
[temp0.d].d = r1 {arg_114}
[temp0.d + 4].d = r2 {arg_114}
[temp0.d + 8].d = r3 {arg_114}
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r6 = r6 + 0x14
r5 = sp + 0x114 {arg_114}
temp0.d = r6
r6 = r6
if (flag:z || flag:c) then 53 @ &data_af8+2 else 56 @ 0xa6e

[sp + 0x134 {arg_134}].d = r0 {arg_114}
unimplemented  {ldrex r0, [r1, #0x1cc]}
goto 60 @ 0xb00  {"\x1bEZE6F"}

temp0.d = r6
[temp0.d].d = r6
[temp0.d + 4].d = r7
if (flag:n == flag:v) then 62 @ 0xafe else 64 @ 0xa72  {"ZE6F"}

r0 = r0 {arg_114}
goto 75 @ 0xb02

r3 = r6 << 5
goto 60 @ 0xb00  {"\x1bEZE6F"}

temp0.d = r6
[temp0.d].d = r0 {arg_114}
[temp0.d + 4].d = r1 {arg_114}
[temp0.d + 8].d = r2 {arg_114}
[temp0.d + 0xc].d = r3 {arg_114}
[temp0.d + 0x10].d = r4 {arg_114}
[temp0.d + 0x14].d = r5 {arg_114}
[temp0.d + 0x18].d = r6
[temp0.d + 0x1c].d = r7
r6 = r6 + 0x20
if (flag:n != flag:v) then 75 @ 0xb02 else 78 @ 0xa76

[r7 + 0x17 {&data_b7f}].b = r7.b
unimplemented  {vmvn.I32 q6, #0xc5ffff}
goto 86 @ 0xb08

temp0.d = r6
[temp0.d].d = r1 {arg_114}
[temp0.d + 4].d = r3 {arg_114}
[temp0.d + 8].d = r5 {arg_114}
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r6 = r6 + 0x14
if (not(flag:z) && flag:n == flag:v) then 88 @ 0xb06 else 95 @ 0xa7a

r5 = [&data_d40].d
goto 102 @ 0xb0a

temp0.d = r5 {arg_114}
r0 = [temp0.d {arg_114}].d
r2 = [temp0.d + 4 {arg12}].d
r4 = [temp0.d + 8 {arg13}].d
r5 = [temp0.d + 0xc {arg14}].d
r6 = [temp0.d + 0x10 {arg15}].d
goto 86 @ 0xb08

temp0.d = r6
[temp0.d].d = r0 {arg_114}
[temp0.d + 4].d = r5 {arg_114}
[temp0.d + 8].d = r6
[temp0.d + 0xc].d = r7
r6 = r6 + 0x10
if (flag:z || flag:n != flag:v) then 102 @ 0xb0a else 108 @ 0xa7e

[r6 + r6].d = r6
r3 = pop
r5 = pop
r6 = pop
r7 = pop
<return> jump(pop)

temp0.d = r6
[temp0.d].d = r1 {arg_114}
[temp0.d + 4].d = r3 {arg_114}
[temp0.d + 8].d = r6
[temp0.d + 0xc].d = r7
r6 = r6 + 0x10
trap(0x45)
{ Does not return }

int32_t sub_a82(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r4, int32_t arg6 @ r5, int32_t* arg7 @ r6, void* arg8 @ r7)
temp0.d = r6
[temp0.d].d = r0
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r6
[temp0.d + 0x14].d = r7
r6 = r6 + 0x18
syscall_info = 0x45
syscall
temp0.d = r6
[temp0.d].d = r1
[temp0.d + 4].d = r3
[temp0.d + 8].d = r5
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r6 = r6 + 0x14
goto 18 @ sub_b16

r4 = zx.d([r7 + 0x1e].w)
r1 = r2 u>> 0x11
[r0 + r4].b = r3.b
[r1 + 0xe].w = r1.w
unimplemented  {ldcl p13, c7, [sp], #-0xb0}
r1 = zx.d([r3 + 0x1e].b)
[r1 + 0x20].w = r7.w
undefined

int32_t sub_a8a(void* arg1, void* arg2, int32_t arg3 @ r5, int32_t* arg4 @ r6, void* arg5 @ r7)
temp0.d = r6
[temp0.d].d = r0
[temp0.d + 4].d = r5
[temp0.d + 8].d = r6
[temp0.d + 0xc].d = r7
r6 = r6 + 0x10
goto 7 @ sub_d1a

r0 = r0
[r0 + 0x60].d = r0
&data_d22 - r8
r2 = r7 << 3
[r0 + 0x60].d = r0
&data_d28 - r8
r0 = r6 << 3
r0 = zx.d([r0 + 0x18].w)
r5 = 0xd58b
[r1 + 0x60].d = r0
r3 = r1 << 0x12
[r1 + 0x64].d = r2
r9 - r1
r2 = r7 u>> 0x1f
r5 = [&data_1018].d
[r7 + 0x1e].w = r2.w
r1 = r1 u>> r7
r6 = r7 u>> 0x1d
undefined

int32_t sub_a8e(int32_t arg1, int32_t arg2, int32_t, int32_t arg4, int32_t arg5 @ r4, int32_t arg6 @ r5, int32_t* arg7 @ r6, int32_t arg8 @ r7)
temp0.d = r6
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r3
[temp0.d + 0xc].d = r4
[temp0.d + 0x10].d = r5
[temp0.d + 0x14].d = r6
[temp0.d + 0x18].d = r7
r6 = r6 + 0x1c
goto 10 @ sub_f1e

r7 - 0x36
[sp + 0x3d4 {arg_3d4}].d = r4
undefined

int32_t sub_a92(uint32_t arg1, int32_t arg2, int32_t arg3, void* arg4, int32_t arg5 @ r4, int32_t arg6 @ r5, int32_t* arg7 @ r6, void* arg8 @ r7, int32_t arg9 @ r9, int32_t arg10 @ r11)
temp0.d = r6
[temp0.d].d = r1
[temp0.d + 4].d = r2
[temp0.d + 8].d = r3
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r6 = r6 + 0x14
goto 8 @ sub_1122

goto 9 @ sub_1380

r3 = zx.d([r3 + r5].w)
r2 = [&data_14f0].d
r1 = 0x62
flag:n = r1 s< 0
r1 = zx.d([r3 + r7].w)
r3 = zx.d([r3 + r5].w)
[r3 + 0x24].d = r3
if (flag:n == flag:v) then 17 @ &data_13d0+2 else 52 @ 0x138e

r1 = 0x62
r5 = zx.d([r2 + r0].w)
r3 = zx.d([r3 + r5].w)
[r3 + 0x24].d = r6
r1 = r4 s>> 0x18
r2 = zx.d([r3 + r5].w)
r3 = [r3 + r1].d
r1 = 0x62
r7 = zx.d([r2 + r0].w)
r3 = zx.d([r3 + r5].w)
[r1 + 0x24 {&data_86}].d = r6
r1 = r4 s>> 0x20
r2 = zx.d([r3 + r5].w)
r3 = [r3 + r5].d
r1 = 0x62
r1 = zx.d([r2 + r0].w)
r3 = zx.d([r3 + r5].w)
[r3 + 0x20].d = r0
r1 = r4 s>> 8
r2 = zx.d([r3 + r5].w)
r3 = r3 + r5
r1 = 0x62
r3 = zx.d([r2 + r0].w)
r3 = zx.d([r3 + r5].w)
[r0 + 0x20].d = r5
r1 = r4
r2 = zx.d([r3 + r5].w)
r7 = [&data_1578].d
r1 = 0x62
r5 = zx.d([r3 + r0].w)
r3 = zx.d([r3 + r5].w)
[r0 + 0x24].d = r7
r1 = r4
r2 = zx.d([r3 + r5].w)
jump(r11)

r3 = zx.d([r3 + r5].w)
r3 = [r3 + 0x54].d
r1 = 0x62
r3 = zx.d([r3 + r7].w)
r3 = zx.d([r3 + r5].w)
[r3 + 0x24].d = r1
r4 = 0xe1
[r1 + 0x24 {&data_86}].d = r6
r5 = 0xe1
[r1 + 0x24 {&data_86}].d = r6
r6 = 0xe1
[r4 + 0x28 {&data_109}].d = r4
r1 = [r4 + 0x7c {0x15d}].d
[r5 + 0x24 {&data_105}].d = r4
r1 = [r4 + 0xc {&data_ec+1}].d
[r1 + 0x24 {0x89e45527}].d = r6
r1 = [r4 + 0x1c {&data_fa+3}].d
[r3 + 0x24].d = r7
r1 = [r4 + 0x2c {sub_f0+0x1d}].d  {"4&^G"}
goto 72 @ &data_13b4

[r7 + 0x24].d = r3
r1 = [r4 + 0x3c {sub_11c}].d  {"\x1bEZE6F"}
temp0.d = r2
[temp0.d].d = r0
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r6
r2 = r2 + 0x10
r5 = r4 << 4
flag:n = r4 << 4 s< 0
flag:z = (r4 & 0xfffffff) == 0
flag:c = test_bit(r4, 0x20 - 4)
r5 = zx.d([r6 + r6 {0x1c2}].w)
r3 = zx.d([r3 + r5].w)
if (flag:z || flag:c) then 87 @ &data_12e8 else 99 @ 0x13c2

r1 = r1 + 0x2f
r0 = zx.d([r5 + r1 {0x2ff2089b}].w)
r3 = zx.d([r3 + r5].w)
flag:v = add_overflow(r7, -0xf6)
[r4 {&data_e0+1}].b = r1.b
r2 = zx.d([r3 + r5].w)
r5 = 0x5b
push(lr)
push(r4)
push(r0)
r3 = zx.d([r3 + r5].w)
goto 72 @ &data_13b4

goto 100 @ 0x168a

if (flag:z || flag:c) then 101 @ 0x159e else 106 @ 0x168c

r1 = 0x62
r0 = zx.d([r6 + r7].w)
r3 = zx.d([r3 + r5].w)
[r0 + 0x24].d = r7
undefined

if (flag:n != flag:v) then 107 @ 0x170a else 140 @ 0x168e

r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + r5].w)
[r2 + 0x10].b = r1.b
r2 = zx.d([r3 + r5].w)
flag:c = r1 u< 0x5b
r11 = r9 & not.d(r11 u>> 0x15)
r11 = adc.d(r11, 0xcc0000, flag:c)
r4 = &data_1adc
r7 = 0xa4
r0 = sp + 0x180
r3 = r3 s>> 5
r5 = zx.d([r4 + r6 {&data_1bbd}].w)
r3 = zx.d([r3 + r5].w)
r3 = r3 s>> 5
r2 = zx.d([r7 + r7 {0x148}].w)
r3 = zx.d([r3 + r5].w)
r1 - 0x29
r5 = zx.d([r2 + r1 {0x2ff248e0}].w)
r3 = zx.d([r3 + r5].w)
r4 = [&data_1b0c].d
unimplemented  {vshl.S64 d10, d20, d16}
r4 = r4 << 4
r5 = zx.d([r6 + r6 {0x1c2}].w)
r3 = zx.d([r3 + r5].w)
r7 = 0x20
r0 = sp + 0x180
r3 = r3 s>> 5
r5 = zx.d([r4 + r6 {0x25f6def1}].w)
r3 = zx.d([r3 + r5].w)
r3 = r3 s>> 5
r5 = zx.d([r0 + r6].w)
r3 = zx.d([r3 + r5].w)
undefined

r0 = 0xab
r5 = [r2 + r2].d
r3 = zx.d([r3 + r5].w)
r1 - 0x2f
r1 = zx.d([r0 + r6 {&data_18c}].w)
r3 = zx.d([r3 + r5].w)
r4 = [&data_1a70].d
[r0 + r6 {&data_18c}].w = r5.w
r3 = zx.d([r3 + r5].w)
r1 = 0x2d
r1 = zx.d([r4 + r6 {0xe163c33c}].w)
r3 = zx.d([r3 + r5].w)
[r4 {0xe163c25b}].d = r7
r7 = 0xb4
r4 = &data_181c
r1 = &data_19f0
r5 = [r1 + r5].d
r4 = &data_1934
r4 = zx.d([r4 + r6 {&data_1a15}].w)
r5 = &data_16fc
r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + r5].w)
r6 = r6 + 0xd1
undefined

int32_t sub_b4e(int32_t arg1, char* arg2, void* arg3, void** arg4, uint32_t* arg5 @ r4, uint32_t* arg6 @ r5, void** arg7 @ r6, void* arg8 @ r7, int32_t arg9 @ r12)
[r6 + 0x22].w = r5.w
[r7 + 0x17].b = r7.b
r0 = zx.d([r7 + 0x2e].w)
if (flag:z || flag:c) then 4 @ 0xbf2 else 34 @ 0xb56

temp0.d = r5
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r3
[temp0.d + 0xc].d = r4
[temp0.d + 0x10].d = r5
[temp0.d + 0x14].d = r6
r5 = r5 + 0x18
[r0 + 0x14].b = r0.b
r11 = r2 + (r12 << 1)
r5 = sx.d(r1.b)
[r1 + r6].b = r3.b
r5 = r0 << 0xf
r1 = r2 + r1
[r1 + r6].b = r1.b
[r0 + 0xe].w = r5.w
r5 = sp | not.d(0x12a000)
temp0.d = r6
[temp0.d].d = r2
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r7
r6 = r6 + 0x10
r5 = [&data_e44].d
[r3 + r7].d = r1
[r1 + r6].b = r3.b
r2 = zx.d([r6 + 0x1c].w)
r2 = r0 + r1
unimplemented  {ldrex pc, [r0, #0x158]}
undefined

unimplemented  {ldrex r5, [r1, #0x1c8]}
r0 = r0
temp0.d = r4
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r7
r4 = r4 + 0xc
r4 = zx.d([r1 + 0x18].w)
r5 = zx.d([r1 + 0x22].w)
r5 = [&data_d88].d
r2 = zx.d([r6 + 0x1c].w)
r5 = sx.d(r1.b)
[r1 + r6].d = r3
r0 = zx.d([r6 + 8].w)
r5 = zx.d([r2 + 2].w)
r5 = [&data_d9c].d
[r1 + r6].d = r0
[r1 + r6].b = r5.b
[r2 + r2].w = r0.w
r0 = zx.d([r5 + 7 {0x3bf055be}].b)
r1 = r0
r0 = zx.d([r0 + 8].w)
undefined

int32_t sub_c5c(int32_t arg1, int32_t arg2, void* arg3, int32_t arg4 @ r6)
r1 = r1 s>> 6
r5 = [&data_e8c].d
r4 = zx.d([r1 + 0x18].w)
temp0.d = r5
[temp0.d {0x68e163c2}].d = r0
[temp0.d + 4 {0x68e163c6}].d = r2
[temp0.d + 8 {0x68e163ca}].d = r4
[temp0.d + 0xc {0x68e163ce}].d = r6
r5 = r5 + 0x10
r1 = r1 s>> 6
r5 = [&data_e94].d
r0 = zx.d([r2 + 0x18].w)
<return> tailcall(j_sub_51a)

int32_t sub_cb4(int32_t arg1, int32_t arg2, void* arg3, void* arg4, void* arg5 @ r6, void* arg6 @ r7, int32_t arg7 @ r8, int32_t arg8 @ r11)
r1 = r2 u>> 0x1c
lr - r6
r3 = r3 + 0x10
[r2 + 0xe].w = r0.w
sp = sp | not.d(0x2b0)
r1 = zx.d([r3 + 0x1e].b)
r4 = r6 << 1
r5 = [&data_ef4].d
[r6 + 0x6c].d = r0
r1 = r1 s>> 6
r5 = [&data_ef8].d
r0 = zx.d([r7 + 0x1e].w)
r5 = r2 u>> 1
r11 - r1
[r6 + 0x6c].d = r0
r3 = r1 << 2
r6 = zx.d([r4 + 0xa].w)
r2 = [&data_cec].d
r5 = [&data_f08].d
r0 = r7 << 0xf
unimplemented  {mcrr2 p13, #8, r4, sp, c9}
[r7 + 0xe].w = r0.w
sp = sp | not.d(0x2b0)
r1 = zx.d([r3 + 0x1e].b)
r4 = r6 << 1
r5 = sp + 0x3ac
goto 27 @ 0x808

flag:v = add_overflow(r11, neg.d(r1))
r0 = [r8 + 0x190].d
r1 = [r8 + 0x190 + 4].d
r0 = r0
r5 = [&data_a40].d
r0 = zx.d([r5 + 0x1e {0x7d81e873}].w)
r5 = r2 u>> 1
flag:n = r2 u>> 1 s< 0
flag:z = (r2 & 0xfffffffe) == 0
[r0 + r4].d = r3
r0 = zx.d([r4 + 0xa].w)
if (flag:n) then 39 @ 0x8c8 else 42 @ 0x81c

r5 = [&data_af8].d
r4 = zx.d([r2 + 0x1e {0xe58bae09}].w)
if (not(flag:z) && flag:n == flag:v) then 77 @ 0x97a else 82 @ 0x8ce

r5 = [&data_a4c].d
r4 = zx.d([r2 + 0x1e {0xe58bae09}].w)
r5 = r2 u>> 1
[r0 + r4].d = r3
r0 = zx.d([r4 + 8].w)
temp0.d = r4
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r6
r4 = r4 + 0x10
&data_82c - r8
r4 = r5 << 3
r0 = r0
r11 = r0 + (r8 u>> 0x20)
unimplemented  {mcrr p13, #0, r4, sp, c3}
r4 = zx.d([r6 + 0xe].w)
unimplemented  {mcrr p5, #8, r5, sp, c11}
r4 = r0 << 0xf
cond:1 = r4 s< 0
temp0.d = r0
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
[r4 + 0xa].w = r6.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r4 = r4 + 0xc
r1 = [&data_b90].d
[r1 + r6].b = r1.b
r4 = zx.d([r0 + 0x1e].w)
if (cond:1) then 85 @ 0x8e8 else 97 @ 0x84c

[r5 + 0xe {0x904d8d64}].w = r4.w
r4 = zx.d([r5 + 6 {0x904d8d5c}].w)
r0 = r0
flag:n = r0 s< 0
goto 109 @ 0x980

[r0 + r4].d = r3
r0 = zx.d([r2 + 8 {0xe58badf3}].w)
if (not(flag:z) && flag:n == flag:v) then 109 @ 0x980 else 112 @ 0x8d4

[r0 + 0x26].w = r1.w
[r1 + r6].b = r3.b
r3 = r3 - 0xec
r1 = r2 + r1
r3 = 0 - r6
r5 = [&data_b20].d
r4 = zx.d([r0 + 0x1e].w)
r5 = r2 u>> 1
r3 = r0 s>> 4
r2 = zx.d([r2 + 0x1a].w)
r5 = r0 u>> 0x11
goto 128 @ 0x8fe

[r1 + r6].b = r3.b
r3 = r3 - 0xec
r1 = r2 s>> 0x11
[r1 + 0x18].w = r7.w
r1 = r3 << 4
r0 = r0
&data_85c - r8
r4 = r7 << 3
r0 = r0
cond:2 = r0 s< 0
r0 = zx.d([r0 + 0x18].w)
if (cond:2) then 128 @ 0x8fe else 137 @ 0x862

temp0.d = r7
r7 = r7
if (not(flag:n)) then 152 @ 0xa10 else 158 @ 0x984

r3 = zx.d([r0 + 0x16].b)
r0 = r7 << 3
r5 = zx.d([r6 + r1].w)
r3 = zx.d([r0 + 0x16].b)
r4 = r0 << 3
[r6 + r1].b = r4.b
r5 = [&data_b10].d
[r2 + 0xe {0xe58badf9}].w = r4.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r5 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r4 = r4 + 0x10
[r2 + 0x40].d = r3
goto 85 @ 0x8e8

[r2 + 0xa].w = r0.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r5 = [temp0.d + 0xc].d
r6 = [temp0.d + 0x10].d
r4 = r4 + 0x14
undefined

[r1 + r6].b = r3.b
[r1 + 8].w = r0.w
temp0.d = r4
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r3
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r2 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r3 = r3 + 0x10
<return> tailcall(sub_f66)

unimplemented  {ldcl p13, c7, [sp], #-0xb0}
r1 = zx.d([r3 + 0x1e].b)
r7 = r7 + 0x74
r9 - r1
[r4 + 0x1e].w = r4.w
goto 201 @ 0x31a

r0 = r0
r0 = r0
&data_98c - r8
r5 = r1 u>> 0x1b
r0 = r0
temp0.d = r7
r7 = r7
r6 = sp + 0x114
r3 = r1
r0 = r0
&data_99a - r8
r1 = r2 u>> 3
r0 = r0
temp0.d = r7
r7 = r7
unimplemented  {mcrr p13, #2, r7, r5, c12}
r1 = zx.d([r3 + 0x1e].b)
&data_9a8 - r8
r0 = r7 u>> 0xb
r0 = r0
temp0.d = r7
r7 = r7
temp0.d = r1
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r1 = r1 + 0xc
r4 = r1
r0 = r0
&data_9b6 - r8
r4 = zx.d([r0 + 0x3c].w)  {"\x1bEZE6F"}
r0 = r0
temp0.d = r6
r6 = r6
unimplemented  {setend le}
temp0.d = r6
[temp0.d].d = r0
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r6 = r6 + 0x14
undefined

r4 = &data_434
r4 = &data_5b0
r7 = 0xe4
r4 = &data_49c
[r2 + 0x36 {0xe58bae21}].w = r0.w
undefined

int32_t sub_dbc(int32_t arg1, int32_t arg2, void* arg3, int32_t arg4, int32_t arg5 @ r4, char* arg6 @ r6, void* arg7 @ r7, int32_t arg8 @ r9, int32_t arg9 @ r11, int32_t arg10 @ r12, uint32_t arg11, void* arg12, char* arg13, void* const arg14, int16_t arg15)
r7 = zx.d([r7 + 0x1e].w)
r5 = zx.d([r4 + r7].b)
r8 = 0xaf000000 - r3
r0 = [&data_e64].d
[r2 + 0x3c].d = r0  {"\x1bEZE6F"}
temp1.d = r2
r2 = r2 - 0xe1
cond:0 = temp1.d == 0xe1
r4 = &data_e78
r4 = &data_1060
goto 11 @ sub_1098

if (cond:0) then 12 @ 0xfe4 else 21 @ 0x109a

r5 - 0x16
r7 - 0xb5
r1 = zx.d([r4 + r3].b)
r7 = r7 s>> r5
[r7 + 0x7c].d = r1
r7 - 0xf1
r7 = 0x48
[sp + 0x120 {arg_120}].d = r0
goto 34 @ sub_12be

r7 = [&data_1334].d
r1 - 0xd5
r1 = zx.d([r5 + 0x13].b)
r4 = 0xf5
[r4 + 3 {&data_f8}].b = r1.b
r1 - 0xb9
[r6 + r3].b = r1.b
r7 - 0xf6
r1 = zx.d([r4 + 3 {&data_f8}].b)
flag:n = r7 - 0xf4 s< 0
flag:z = r7 == 0xf4
flag:v = add_overflow(r7, -0xf4)
goto 36 @ 0x10ae

r3 = sp + 0x36c {arg_36c}
if (r0 == 0) then 39 @ 0x130c else 52 @ 0x12c2

r0 = [&data_1454].d
r4 = [&data_1488].d
if (flag:z || flag:n != flag:v) then 75 else 76 @ 0x10b6

r5 = 0x5b
temp0.d = r2
r0 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r2 = r2 + 0xc
r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + 2].w)
temp2.d = r5
r5 = r5 - 0xd9
cond:2 = temp2.d - 0xd9 s>= 0
r3 = sp + 0x36c {arg_36c}
if (cond:2) then 93 @ 0x135c else 101 @ 0x131a  {"[[[b!_Z[[Mb!XZ[[mb!YZ[[Bb!ZZ[[Gb…"}

r4 = &data_1550  {"jb!DZ[[Gb!EZ[[Gb!FZ[[Db!GZ[[Hb!@…"}
temp0.d = r2
[temp0.d].d = r2
[temp0.d + 4].d = r5
[temp0.d + 8].d = r7
r5 = r4 << 4
r5 = zx.d([r6 + r6].w)
r3 = zx.d([r3 + r5].w)
[r3 + 0x19].b = r7.b
[r4 {&data_1550}].d = r7  {"jb!DZ[[Gb!EZ[[Gb!FZ[[Db!GZ[[Hb!@…"}
r5 - 0xb8
[r4 + 0x40 {&data_1590}].d = r1
r2 = zx.d([r3 + r5].w)
r7 - 0x5b
r1 = r5 u>> 4
flag:c = test_bit(r5, 4 - 1)
r2 = zx.d([r3 + r5].w)
r1 = adc.d(r11, 0xa5000, flag:c)
r5 = zx.d([r6 + r6].w)
r3 = zx.d([r3 + r5].w)
r4 = 0x9d
[r6 + r7].d = r7
goto 135 @ &data_12e8

jump(0xfff4f9fe)

[r4 {0x4620abdb}].d = r7
r7 - 0xb4
r0 = pop
r3 = pop
r5 = pop
r6 = pop
r7 = pop
flag:n = r7 - 0xf5 s< 0
flag:z = r7 == 0xf5
flag:c = r7 u< 0xf5
flag:v = add_overflow(r7, -0xf5)
push(r7)
push(r6)
push(r5)
push(r4)
push(r0)
if (flag:z || flag:c) then 139 @ 0x110e else 140 @ 0x10c2

r1 = r4 s>> 0x1f
[r0 + 0x24].d = r7
r1 = r4 s>> 3
[r0 + 0x24].d = r7
r1 = r4 s>> 7
[r0 + 0x24].d = r4
r1 = r4 s>> 0xb
goto 144 @ 0x136a

r3 = zx.d([r3 + r5 {arg15}].w)
[r3 + 0x24].d = r3
r1 = sx.d([r4 + r4].w)
r2 = zx.d([r3 + r5].w)
r5 = [&data_1490].d
r1 = 0x62
r0 = zx.d([r3 + r1].w)
r3 = zx.d([r3 + r5].w)
[r5 + 0x24 {0xe929a884}].d = r5
r1 = [r4 + r4].d
r2 = zx.d([r3 + r5].w)
r3 = 0 - r3
r1 = 0x62
r2 = zx.d([r3 + r1].w)
r3 = zx.d([r3 + r5].w)
[r0 + 0x24].d = r7
r1 = zx.d([r4 + r4].w)
r2 = zx.d([r3 + r5].w)
r6 = [&data_14ac].d
r1 = 0x62
r4 = zx.d([r4 + r6].w)
r3 = zx.d([r3 + r5].w)
[r4 + 0x28].d = r4
r1 = r4 u>> 0xb
[r4 + 0x24].d = r3
r1 = r4 u>> 0xf
[r1 + 0x24].d = r6
r1 = r4 s>> 0x13
[r1 + 0x24].d = r2
r1 = r4 s>> 0x17
[r3 + 0x24].d = r3
r1 = r4 s>> 0x1b
[r5 + 0x24 {0xe929a884}].d = r2
goto 93 @ 0x135c

r1 = r1 + 0x2f
r0 = zx.d([r5 + r1].w)
r3 = zx.d([r3 + r5].w)
goto 148 @ 0x12ee

if (flag:z || flag:c) then 157 @ 0x1160 else 159 @ 0x1110

r0 = zx.d([r3 + 2].w)
temp3.d = r5
r5 = r5 - 0xd9
if (temp3.d == 0xd9) then 161 @ 0x1080 else 168 @ 0x10c8

[r1 + 0x24].d = r0
r1 = r4 s>> 0xf
[r4 + 0x28].d = r4
trap(0x21)
{ Does not return }

flag:v = add_overflow(r7, -0xf6)
[r4].b = r1.b
r2 = zx.d([r3 + r5].w)
r5 = 0x5b
push(lr)
push(r4)
push(r0)
r3 = zx.d([r3 + r5].w)
goto 169 @ &data_13b4

r3 = sp + 0x36c {arg_36c}
if (flag:n) then 184 @ 0x11a6 else 207 @ 0x1164

r4 = &data_1234
if (r0 == 0) then 214 @ 0x118a else 224 @ 0x1114

r0 = [&data_1448].d
r7 - 0xf6
r9 = r9 + r12
flag:v = add_overflow(r7, -0xf4)
r4 = [&data_1430].d
r4 = [&data_1460].d
if (not(flag:v)) then 225 else 226 @ 0x1090

undefined

[r7 + 0x24].d = r3
r1 = [r4 + 0x3c].d  {"\x1bEZE6F"}
temp0.d = r2
[temp0.d].d = r0
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r6
r2 = r2 + 0x10
r5 = r4 << 4
flag:n = r4 << 4 s< 0
flag:z = (r4 & 0xfffffff) == 0
flag:c = test_bit(r4, 0x20 - 4)
r5 = zx.d([r6 + r6].w)
r3 = zx.d([r3 + r5].w)
if (flag:z || flag:c) then 135 @ &data_12e8 else 227 @ 0x13c2

r4 = &data_1438
r1 = 0x63
r5 = zx.d([r0 + r6].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_1460
r4 = &data_1444
r1 = 0x63
r6 = zx.d([r5 + r7].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_1440
r4 = &data_144c
r1 = 0x63
r1 = zx.d([r1 + r1 {0xc6}].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_1478
r4 = &data_1458
r1 = 0x63
r0 = zx.d([r3 + r0].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_1460
r4 = &data_1460
r1 = 0x63
goto 228 @ 0x11d2

r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + r5].w)
[r2 + r3].d = r1
sp = adc.d(r11, 0xbc00bc00, flag:c)
cond:5 = sp != 0
[r4 + 0x13 {0x4620abee}].b = r1.b
if (cond:5) then 253 @ 0x122a else 275 @ 0x1172

r8 = sbb.d(r7, 0xaf000000, not.b(flag:c))
r0 = [&data_1224].d
r5 = &data_14d4
r4 = &data_1424
r1 = 0x63
flag:n = r1 s< 0
flag:z = r1 == 0
r2 = zx.d([r1 + r7].w)
r3 = zx.d([r3 + r5].w)
if (flag:z || flag:c) then 36 @ 0x10ae else 283 @ 0x119c

undefined

jump(0x559d8)

goto 148 @ 0x12ee

goto 284 @ 0x168a

r1 = zx.d([r1 + r6].w)
r3 = zx.d([r3 + r5].w)
r6 = [sp + 0xf0].d
r4 = &data_146c
r1 = 0x63
r2 = zx.d([r4 + r7].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_14b4
r4 = &data_1474
r1 = 0x63
r4 = zx.d([r6 + r1].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_14a8
r4 = &data_1480
r1 = 0x63
r1 = zx.d([r0 + r1].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_1498
r4 = &data_1488
r1 = 0x63
r5 = zx.d([r1 + r1 {0xc6}].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_1490
r4 = &data_1594
goto 285 @ 0x14cc

r4 = &data_15bc
r4 = &data_14c0
r1 = 0x63
r1 = zx.d([r6 + r6].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_14c8
r4 = &data_14c8
r1 = 0x62
r1 = zx.d([r2 + r6].w)
r3 = zx.d([r3 + r5].w)
[r5 + 0x24].d = r4
[sp + 0x84].d = r2
r3 = zx.d([r3 + r5].w)
r6 = [&data_13b4].d
r1 = 0x62
r3 = zx.d([r2 + r6].w)
r3 = zx.d([r3 + r5].w)
[r3 + 0x24].d = r7
r4 = [sp + 0x84].d
r3 = zx.d([r3 + r5].w)
[r3 + 0x64].d = r3
goto 287 @ 0x1254

r4 = zx.d([r6 + r5].w)
[r6 + 0x26].w = r1.w
temp0.d = r1
[temp0.d].d = r2
[temp0.d + 4].d = r5
r1 = r1 + 8
r2 = &data_133c
goto 301 @ 0x13dc

if (flag:n != flag:v) then 331 @ 0x121a else 334 @ 0x119e

if (flag:z || flag:c) then 341 @ 0x159e else 346 @ 0x168c

r7 = [r4 + 0x40 {&data_15d4}].d
goto 347 @ 0x1796

r1 = 0x62
r5 = zx.d([r3 + r6].w)
r3 = zx.d([r3 + r5].w)
[r0 + 0x24].d = r4
r6 = [sp + 0x84].d
r3 = zx.d([r3 + r5].w)
r7 = [&data_13d0].d
r1 = 0x62
r7 = zx.d([r3 + r6].w)
r3 = zx.d([r3 + r5].w)
[r3 + 0x24].d = r6
r0 = [sp + 0x84].d
r3 = zx.d([r3 + r5].w)
jump(r11)

r2 = zx.d([r3 + r5].w)
r3 = [r3 + r1].d
r1 = 0x62
r7 = zx.d([r2 + r0].w)
r3 = zx.d([r3 + r5].w)
[r1 + 0x24 {&data_86}].d = r6
r1 = r4 s>> 0x20
r2 = zx.d([r3 + r5].w)
r3 = [r3 + r5].d
r1 = 0x62
r1 = zx.d([r2 + r0].w)
r3 = zx.d([r3 + r5].w)
[r3 + 0x20].d = r0
r1 = r4 s>> 8
r2 = zx.d([r3 + r5].w)
r3 = r3 + r5
r1 = 0x62
r3 = zx.d([r2 + r0].w)
r3 = zx.d([r3 + r5].w)
[r0 + 0x20].d = r5
r1 = r4
r2 = zx.d([r3 + r5].w)
r7 = [&data_1578].d
r1 = 0x62
r5 = zx.d([r3 + r0].w)
r3 = zx.d([r3 + r5].w)
[r0 + 0x24].d = r7
r1 = r4
r2 = zx.d([r3 + r5].w)
jump(r11)

r4 = &data_14ac
[r4 + 0x38 {&data_14e4}].d = r4
undefined

r1 = 0x63
r4 = zx.d([r5 + r1 {&data_1537}].w)  {"xZ[[^b!yZ[[Jb!zZ[[Gb!{Z[[jb!DZ[[…"}
r3 = zx.d([r3 + r5].w)
push(r7)
push(r5)
push(r2)
goto 184 @ 0x11a6

r1 = 0x62
r0 = zx.d([r6 + r7].w)
r3 = zx.d([r3 + r5].w)
[r0 + 0x24].d = r7
undefined

if (flag:n != flag:v) then 353 @ 0x170a else 386 @ 0x168e

r1 - 0x5b
r1 = [r5 + 0x7c {0xc3}].d
r7 - 0xf5
r1 = sp + 0xc4
r3 = zx.d([r3 + r5].w)
undefined

r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + r5].w)
[r2 + 0x10].b = r1.b
r2 = zx.d([r3 + r5].w)
flag:c = r1 u< 0x5b
r11 = r9 & not.d(r11 u>> 0x15)
r11 = adc.d(r11, 0xcc0000, flag:c)
r4 = &data_1adc
r7 = 0xa4
r0 = sp + 0x180
r3 = r3 s>> 5
r5 = zx.d([r4 + r6].w)
r3 = zx.d([r3 + r5].w)
r3 = r3 s>> 5
r2 = zx.d([r7 + r7 {0x148}].w)
r3 = zx.d([r3 + r5].w)
r1 - 0x29
r5 = zx.d([r2 + r1].w)
r3 = zx.d([r3 + r5].w)
r4 = [&data_1b0c].d
unimplemented  {vshl.S64 d10, d20, d16}
r4 = r4 << 4
r5 = zx.d([r6 + r6].w)
r3 = zx.d([r3 + r5].w)
r7 = 0x20
r0 = sp + 0x180
r3 = r3 s>> 5
r5 = zx.d([r4 + r6].w)
r3 = zx.d([r3 + r5].w)
r3 = r3 s>> 5
r5 = zx.d([r0 + r6].w)
r3 = zx.d([r3 + r5].w)
undefined

r0 = 0xab
r5 = [r2 + r2].d
r3 = zx.d([r3 + r5].w)
r1 - 0x2f
r1 = zx.d([r0 + r6].w)
r3 = zx.d([r3 + r5].w)
r4 = [&data_1a70].d
[r0 + r6].w = r5.w
r3 = zx.d([r3 + r5].w)
r1 = 0x2d
r1 = zx.d([r4 + r6].w)
r3 = zx.d([r3 + r5].w)
[r4 {0xe163c25b}].d = r7
r7 = 0xb4
r4 = &data_181c
r1 = &data_19f0
r5 = [r1 + r5].d
r4 = &data_1934
r4 = zx.d([r4 + r6].w)
r5 = &data_16fc
r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + r5].w)
r6 = r6 + 0xd1
undefined

int32_t sub_e5c(int32_t arg1, int32_t* arg2, int32_t arg3 @ r5)
r7 = [r1 + r5].d
<return> tailcall(sub_1126)

int32_t sub_e68(int32_t arg1, int32_t* arg2, int32_t arg3, int32_t* arg4, uint32_t arg5 @ r5, void* arg6 @ r6, void* arg7 @ r7, int32_t arg8 @ r9, int32_t arg9 @ r11, int32_t arg10 @ r12)
r2 = [r1 + r1].d
goto 2 @ 0x1132

r1 = [r3 + 0xc].d
if (flag:z) then 4 @ 0x1080 else 11 @ 0x1136

r0 = [&data_1448].d
r7 - 0xf6
r9 = r9 + r12
flag:v = add_overflow(r7, -0xf4)
r4 = [&data_1430].d
r4 = [&data_1460].d
if (not(flag:v)) then 19 else 20 @ 0x1090

flag:c = r7 u< 0xe7
flag:v = add_overflow(r7, -0xe7)
r1 = zx.d([r5 + r3].b)
r5 = 0xf5
flag:n = r5 s< 0
flag:z = r5 == 0
r1 = [r3 + r3].d
if (flag:z || flag:c) then 21 @ 0x1052 else 31 @ 0x1140

jump(0x559d8)

goto 32 @ 0x12ee

r5 = r1 s>> 0xd
r4 = &data_12e8
flag:c = r7 u< 0xa4
r1 = zx.d([r5 + 3].b)
r5 = zx.d([r6 + r7].w)
[r2 + r3].d = r1
sp = adc.d(r11, 0xbc00bc00, flag:c)
cond:0 = sp != 0
[r4 + 0x13 {&data_12fb}].b = r1.b
if (cond:0) then 41 @ 0x111e else 42 @ 0x1066

if (flag:n != flag:v) then 44 @ 0x11be else 79 @ 0x1142  {"4&^G"}

flag:v = add_overflow(r7, -0xf6)
[r4 {0xe163c2a4}].b = r1.b
r2 = zx.d([r3 + r5].w)
r5 = 0x5b
push(lr)
push(r4)
push(r0)
r3 = zx.d([r3 + r5].w)
goto 81 @ &data_13b4

goto 96 @ 0x136a

r4 = zx.d([r6 + r5].w)
undefined

r1 = zx.d([r1 + r1].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_1478
r4 = &data_1458
r1 = 0x63
r0 = zx.d([r3 + r0].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_1460
r4 = &data_1460
r1 = 0x63
r1 = zx.d([r1 + r6].w)
r3 = zx.d([r3 + r5].w)
r6 = [sp + 0xf0 {arg_f0}].d
r4 = &data_146c
r1 = 0x63
r2 = zx.d([r4 + r7].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_14b4
r4 = &data_1474
r1 = 0x63
r4 = zx.d([r6 + r1].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_14a8
r4 = &data_1480
r1 = 0x63
r1 = zx.d([r0 + r1].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_1498
r4 = &data_1488
r1 = 0x63
r5 = zx.d([r1 + r1 {0xc6}].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_1490
r4 = &data_1594
goto 100 @ 0x14cc

[r2 + 0x3e].w = r0.w  {"ZE6F"}
undefined

[r7 + 0x24].d = r3
r1 = [r4 + 0x3c {0xe163c2e0}].d  {"\x1bEZE6F"}
temp0.d = r2
[temp0.d].d = r0
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r6
r2 = r2 + 0x10
r5 = r4 << 4
flag:n = r4 << 4 s< 0
flag:z = (r4 & 0xfffffff) == 0
flag:c = test_bit(r4, 0x20 - 4)
r5 = zx.d([r6 + r6].w)
r3 = zx.d([r3 + r5].w)
if (flag:z || flag:c) then 102 @ &data_12e8 else 106 @ 0x13c2

[r1 + 0x24].d = r0
r1 = r4 s>> 0xf
[r4 + 0x28 {&data_1310}].d = r4
trap(0x21)
{ Does not return }

r7 = [r4 + 0x40 {&data_15d4}].d
goto 107 @ 0x1796

r1 = r1 + 0x2f
r0 = zx.d([r5 + r1].w)
r3 = zx.d([r3 + r5].w)
goto 32 @ 0x12ee

goto 113 @ 0x168a

r1 - 0x5b
r1 = [r5 + 0x7c {0xc3}].d
r7 - 0xf5
r1 = sp + 0xc4 {arg_c4}
r3 = zx.d([r3 + r5].w)
undefined

if (flag:z || flag:c) then 114 @ 0x159e else 119 @ 0x168c

r1 = 0x62
r0 = zx.d([r6 + r7].w)
r3 = zx.d([r3 + r5].w)
[r0 + 0x24].d = r7
undefined

if (flag:n != flag:v) then 120 @ 0x170a else 153 @ 0x168e

r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + r5].w)
[r2 + 0x10].b = r1.b
r2 = zx.d([r3 + r5].w)
flag:c = r1 u< 0x5b
r11 = r9 & not.d(r11 u>> 0x15)
r11 = adc.d(r11, 0xcc0000, flag:c)
r4 = &data_1adc
r7 = 0xa4
r0 = sp + 0x180
r3 = r3 s>> 5
r5 = zx.d([r4 + r6].w)
r3 = zx.d([r3 + r5].w)
r3 = r3 s>> 5
r2 = zx.d([r7 + r7 {0x148}].w)
r3 = zx.d([r3 + r5].w)
r1 - 0x29
r5 = zx.d([r2 + r1].w)
r3 = zx.d([r3 + r5].w)
r4 = [&data_1b0c].d
unimplemented  {vshl.S64 d10, d20, d16}
r4 = r4 << 4
r5 = zx.d([r6 + r6].w)
r3 = zx.d([r3 + r5].w)
r7 = 0x20
r0 = sp + 0x180
r3 = r3 s>> 5
r5 = zx.d([r4 + r6].w)
r3 = zx.d([r3 + r5].w)
r3 = r3 s>> 5
r5 = zx.d([r0 + r6].w)
r3 = zx.d([r3 + r5].w)
undefined

r0 = 0xab
r5 = [r2 + r2].d
r3 = zx.d([r3 + r5].w)
r1 - 0x2f
r1 = zx.d([r0 + r6].w)
r3 = zx.d([r3 + r5].w)
r4 = [&data_1a70].d
[r0 + r6].w = r5.w
r3 = zx.d([r3 + r5].w)
r1 = 0x2d
r1 = zx.d([r4 + r6].w)
r3 = zx.d([r3 + r5].w)
[r4 {0xe163c25b}].d = r7
r7 = 0xb4
r4 = &data_181c
r1 = &data_19f0
r5 = [r1 + r5].d
r4 = &data_1934
r4 = zx.d([r4 + r6].w)
r5 = &data_16fc
r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + r5].w)
r6 = r6 + 0xd1
undefined

int32_t sub_f66(int32_t arg1 @ r4)
r1 = r4 s>> 0x1b
flag:z = r4 s>> 0x1b == 0
flag:c = unimplemented
if (flag:z || flag:c) then 4 @ 0xfba else 5 @ 0xf6a

undefined

r4 = &data_fc4
r6 = &data_12b4
undefined

int32_t sub_1126(int32_t arg1, char arg2, int32_t* arg3, int32_t* arg4, uint32_t arg5 @ r5, void* arg6 @ r6, int32_t arg7 @ r9, int32_t arg8 @ r11, int32_t arg9 @ r12)
[r2 + 0x13].b = r1.b
r7 = adc.d(r11, 0x84008400, flag:c)
cond:0 = r7 == 0
r1 = zx.d([r3 + r3].b)
if (cond:0) then 5 @ 0x107a else 9 @ 0x1130

r1 - 0xa4
r1 = zx.d([r5 + 3].b)
r7 - 0xf5
goto 13 @ 0x1080

r7 = 0xed
cond:1 = r7 == 0
r1 = [r3 + 0xc].d
if (cond:1) then 13 @ 0x1080 else 20 @ 0x1136

r0 = [&data_1448].d
r7 - 0xf6
r9 = r9 + r12
flag:v = add_overflow(r7, -0xf4)
r4 = [&data_1430].d
r4 = [&data_1460].d
if (not(flag:v)) then 28 else 29 @ 0x1090

flag:c = r7 u< 0xe7
flag:v = add_overflow(r7, -0xe7)
r1 = zx.d([r5 + r3].b)
r5 = 0xf5
flag:n = r5 s< 0
flag:z = r5 == 0
r1 = [r3 + r3].d
if (flag:z || flag:c) then 30 @ 0x1052 else 40 @ 0x1140

jump(0x559d8)

goto 41 @ 0x12ee

r5 = r1 s>> 0xd
r4 = &data_12e8
flag:c = r7 u< 0xa4
r1 = zx.d([r5 + 3].b)
r5 = zx.d([r6 + r7].w)
[r2 + r3].d = r1
sp = adc.d(r11, 0xbc00bc00, flag:c)
cond:2 = sp != 0
[r4 + 0x13 {&data_12fb}].b = r1.b
if (cond:2) then 50 @ 0x111e else 51 @ 0x1066

if (flag:n != flag:v) then 53 @ 0x11be else 88 @ 0x1142

flag:v = add_overflow(r7, -0xf6)
[r4 {0xe163c2a4}].b = r1.b
r2 = zx.d([r3 + r5].w)
r5 = 0x5b
push(lr)
push(r4)
push(r0)
r3 = zx.d([r3 + r5].w)
goto 90 @ &data_13b4

goto 105 @ 0x136a

r4 = zx.d([r6 + r5].w)
undefined

r1 = zx.d([r1 + r1].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_1478
r4 = &data_1458
r1 = 0x63
r0 = zx.d([r3 + r0].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_1460
r4 = &data_1460
r1 = 0x63
r1 = zx.d([r1 + r6].w)
r3 = zx.d([r3 + r5].w)
r6 = [sp + 0xf0 {arg_f0}].d
r4 = &data_146c
r1 = 0x63
r2 = zx.d([r4 + r7 {&data_1559}].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_14b4
r4 = &data_1474
r1 = 0x63
r4 = zx.d([r6 + r1].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_14a8
r4 = &data_1480
r1 = 0x63
r1 = zx.d([r0 + r1].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_1498
r4 = &data_1488
r1 = 0x63
r5 = zx.d([r1 + r1 {0xc6}].w)
r3 = zx.d([r3 + r5].w)
r4 = &data_1490
r4 = &data_1594
goto 109 @ 0x14cc

[r2 + 0x3e].w = r0.w  {"ZE6F"}
undefined

[r7 + 0x24].d = r3
r1 = [r4 + 0x3c {0xe163c2e0}].d  {"\x1bEZE6F"}
temp0.d = r2
[temp0.d].d = r0
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r6
r2 = r2 + 0x10
r5 = r4 << 4
flag:n = r4 << 4 s< 0
flag:z = (r4 & 0xfffffff) == 0
flag:c = test_bit(r4, 0x20 - 4)
r5 = zx.d([r6 + r6].w)
r3 = zx.d([r3 + r5].w)
if (flag:z || flag:c) then 111 @ &data_12e8 else 115 @ 0x13c2

[r1 + 0x24].d = r0
r1 = r4 s>> 0xf
[r4 + 0x28 {&data_1310}].d = r4
trap(0x21)
{ Does not return }

r7 = [r4 + 0x40 {&data_15d4}].d
goto 116 @ 0x1796

r1 = r1 + 0x2f
r0 = zx.d([r5 + r1].w)
r3 = zx.d([r3 + r5].w)
goto 41 @ 0x12ee

goto 122 @ 0x168a

r1 - 0x5b
r1 = [r5 + 0x7c {0xc3}].d
r7 - 0xf5
r1 = sp + 0xc4 {arg_c4}
r3 = zx.d([r3 + r5].w)
undefined

if (flag:z || flag:c) then 123 @ 0x159e else 128 @ 0x168c

r1 = 0x62
r0 = zx.d([r6 + r7].w)
r3 = zx.d([r3 + r5].w)
[r0 + 0x24].d = r7
undefined

if (flag:n != flag:v) then 129 @ 0x170a else 162 @ 0x168e

r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + r5].w)
[r2 + 0x10].b = r1.b
r2 = zx.d([r3 + r5].w)
flag:c = r1 u< 0x5b
r11 = r9 & not.d(r11 u>> 0x15)
r11 = adc.d(r11, 0xcc0000, flag:c)
r4 = &data_1adc
r7 = 0xa4
r0 = sp + 0x180
r3 = r3 s>> 5
r5 = zx.d([r4 + r6].w)
r3 = zx.d([r3 + r5].w)
r3 = r3 s>> 5
r2 = zx.d([r7 + r7 {0x148}].w)
r3 = zx.d([r3 + r5].w)
r1 - 0x29
r5 = zx.d([r2 + r1].w)
r3 = zx.d([r3 + r5].w)
r4 = [&data_1b0c].d
unimplemented  {vshl.S64 d10, d20, d16}
r4 = r4 << 4
r5 = zx.d([r6 + r6].w)
r3 = zx.d([r3 + r5].w)
r7 = 0x20
r0 = sp + 0x180
r3 = r3 s>> 5
r5 = zx.d([r4 + r6].w)
r3 = zx.d([r3 + r5].w)
r3 = r3 s>> 5
r5 = zx.d([r0 + r6].w)
r3 = zx.d([r3 + r5].w)
undefined

r0 = 0xab
r5 = [r2 + r2].d
r3 = zx.d([r3 + r5].w)
r1 - 0x2f
r1 = zx.d([r0 + r6].w)
r3 = zx.d([r3 + r5].w)
r4 = [&data_1a70].d
[r0 + r6].w = r5.w
r3 = zx.d([r3 + r5].w)
r1 = 0x2d
r1 = zx.d([r4 + r6].w)
r3 = zx.d([r3 + r5].w)
[r4 {0xe163c25b}].d = r7
r7 = 0xb4
r4 = &data_181c
r1 = &data_19f0
r5 = [r1 + r5].d
r4 = &data_1934
r4 = zx.d([r4 + r6].w)
r5 = &data_16fc
r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + r5].w)
r6 = r6 + 0xd1
undefined

int32_t sub_1464(int32_t arg1 @ r9)
jump(r9)

int32_t sub_15d6(void* arg1, int32_t arg2, int32_t* arg3, void* arg4, int32_t arg5 @ r4, void* arg6 @ r6, int32_t arg7 @ r7, int32_t arg8 @ r11, void* arg9)
[r0 + 0x24].d = r2
r1 = r4 - r3
[r3 + 0x24].d = r1
r1 = r4 - r7
r5 = 0x5f
temp0.d = r2
r0 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r2 = r2 + 0xc
r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + 2].w)
r5 = r5 - 0xd9
r3 = sp + 0x36c {arg_36c}
r0 = r0 & r4
r4 = &data_1870
[r4 + 0x28 {&data_1898}].d = r4
r3 = [sp + 0x84 {arg9}].d
r3 = zx.d([r3 + r5].w)
r2 = [&data_1764].d
r1 = 0x62
r4 = zx.d([r4 + r7].w)
r3 = zx.d([r3 + r5].w)
temp0.d = r2
[temp0.d {0x5b5b5bfe}].d = r0
[temp0.d + 4 {0x5b5b5c02}].d = r2
[temp0.d + 8 {0x5b5b5c06}].d = r6
r2 = r2 + 0xc
r1 = 0x25
r5 = zx.d([r6 + r6].w)
r3 = zx.d([r3 + r5].w)
r6 = r6 - 0xca
r1 = 0x62
r5 = zx.d([r4 + r7].w)
r3 = zx.d([r3 + r5].w)
[r1 + 0x24 {&data_86}].d = r7
goto 37 @ 0x1254

r1 = 0x62
r5 = zx.d([r3 + r6].w)
r3 = zx.d([r3 + r5].w)
[r0 + 0x24].d = r4
r6 = [sp + 0x84 {arg9}].d
r3 = zx.d([r3 + r5].w)
r7 = [&data_13d0].d
r1 = 0x62
r7 = zx.d([r3 + r6].w)
r3 = zx.d([r3 + r5].w)
[r3 + 0x24].d = r6
r0 = [sp + 0x84 {arg9}].d
r3 = zx.d([r3 + r5].w)
jump(r11)

int32_t sub_1610(int32_t, int32_t, int32_t, void* arg4, int32_t arg5 @ r5, int32_t arg6 @ r11)
r3 = zx.d([r3 + r5].w)
jump(r11)

int32_t sub_189e(void* arg1, int32_t arg2, int32_t arg3, void* arg4, int16_t* arg5 @ r4, int32_t arg6 @ r5, void* arg7 @ r6, void* arg8 @ r7, void* arg9 @ r11, void* arg10)
goto 1 @ 0x1b00

r3 = zx.d([r3 + r5].w)
[r3 + 0xa].w = r3.w
r3 = r6 + 3
[r7 + 0x28].d = r5
r1 = [r4 + 0x4c].d
[r1 + 0x24].d = r0
r1 = [r4 + 0x5c].d
[r3 + 0x24].d = r7
r1 = [r4 + 0x6c].d
[r4 + 0x28].d = r4
[r4 + r4].b = r1.b
r2 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + 0x19].b)
r1 = 0x62
r6 = zx.d([r2 + r1].w)
r3 = zx.d([r3 + r5].w)
[r0 + 0x24].d = r5
r1 = sx.d([r4 + r4].b)
r2 = zx.d([r3 + r5].w)
r3 = r11
r1 = 0x62
r0 = zx.d([r2 + r1].w)
r3 = zx.d([r3 + r5].w)
[r1 + 0x24 {&data_86}].d = r2
[r4 + r4].d = r1
r2 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + r5].w)
r1 = 0x62
r2 = zx.d([r2 + r1].w)
r3 = zx.d([r3 + r5].w)
[r7 + 0x24].d = r5
[r4 + r4].w = r1.w
r2 = zx.d([r3 + r5].w)
r3 = 0 - r3
r1 = 0x62
r4 = zx.d([r3 + r1].w)
r3 = zx.d([r3 + r5].w)
[r1 + 0x24 {&data_86}].d = r6
r1 = zx.d([r4 + r4].b)
r2 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + r1].b)
r1 = 0x62
r6 = zx.d([r3 + r1].w)
r3 = zx.d([r3 + r5].w)
r5 = 0x64
temp0.d = r2
r0 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r2 = r2 + 0xc
r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + 2].w)
r5 = r5 - 0xd9
r3 = sp + 0x36c {arg_36c}
r0 = r4 s>> 0x20
r3 = zx.d([r2 + r5].w)
r7 - 0x5b
r2 = r2 - 0xe1
r4 = zx.d([r6 + r7].w)
r1 = r2 + r0
r2 = zx.d([r3 + r5].w)
flag:c = r7 u< 0x5b
flag:v = add_overflow(r7, -0x5b)
if (flag:v) then 65 @ 0x1bca else 128 @ 0x1b76

r6 = adc.d(r6, r3, flag:c)
r0 = r0
[r1 + 0x20].w = r7.w
r0 = r1 << 2
r0 = r0
r7 = r0 << 0x17
[r0 + 0x10].d = r0
r1 = r0 << 1
r0 = r0
r0 = r0
r3 = r5 u>> 0x1f
r3 = r1 u>> 0x16
[r0 + 0x10].d = r0
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r7
r1 = r1 + 0xc
r1 = zx.d([r0 + 8].w)
r5 = r1
r1 = adc.d(r1, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
temp1.d = r5
r5 = r5 & r2
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
r1 = &data_1bf8
[r0 + 0x14].d = r0
r1 = r0 << 1
r3 = r1 u>> 0x12
r5 = r2 + 2
flag:c = r2 u>= 0xfffffffe
r6 = adc.d(r6, r3, flag:c)
r3
[r1 + 0x28].w = r4.w
r4 = sx.d([r2 + r0].w)
r1 = r0 << 1
r1 = r7 u>> 0x14
[r0 + 0x10].d = r0
r1 = r0 << 1
r0 = r0 - 0x73
r3 = r1 s>> 0x16
[r0 + 0x14].d = r0
r1 = r0 << 1
r3 = r1 << 0x12
r5 = r2 s>> 0x12
flag:c = unimplemented
temp2.d = r6
cond:0 = flag:c
r6 = adc.d(temp2.d, r3, cond:0)
flag:c = adc.d(temp2.d, r3, cond:0) u< temp2.d || (cond:0 && adc.d(temp2.d, r3, cond:0) == temp2.d)
r0 = zx.d([r0 + 0x18].w)
r5 = r1
r1 = adc.d(r1, r4, flag:c)
r0 = r0 u>> 0x1c
r6 = r6 s>> 0x12
r1 = r0 u>> 0x1c
r6 = r6 << 0x16
r6 = sx.d([r1 + r0].w)
r1 = r0 << 1
if (r1 == 0) then 156 @ 0x1c98 else 188 @ 0x1c30

r3 = zx.d([r3 + r5].w)
r9 = adc.d(r11, 0xa50000, flag:c)
r5 = zx.d([r6 + r6].w)
r3 = zx.d([r3 + r5].w)
r3 = r3 u>> 0x15
[r4 - 0xbc].d = r3
[r4 - 0xbc + 4].d = r1
r5 = zx.d([r2 + r6].w)
r3 = zx.d([r3 + r5].w)
r7 - 0xf6
r2 = r2 + 0xe1
r7 - 0xf4
r1 = r5 u>> 0x14
r2 = zx.d([r3 + r5].w)
r5 = 0x5b
push(lr)
push(r3)
push(r0)
r3 = zx.d([r3 + r5].w)
temp0.d = r3
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r3
[temp0.d + 0xc].d = r4
[temp0.d + 0x10].d = r6
r3 = r3 + 0x14
r2 = r2 - 0x29
undefined

r5 = [&data_1ec0].d
[r6 + 0xe].w = r0.w
sp = sp | not.d(0x2b0)
r1 = zx.d([r3 + 0x1e].b)
r4 = r6 << 1
[r4 + 0xa].w = r6.w
unimplemented  {ldc2l p15, c12, [r5], #-0x164}
r11 - r1
r0 = zx.d([r1 + 0x18].w)
r5 = zx.d([r4 + r7].b)
[r0 + r7].b = r3.b
unimplemented  {stc p12, c14, [r11], {0x83}}
temp0.d = r7
[temp0.d].d = r2
[temp0.d + 4].d = r3
r7 = r7 + 8
unimplemented  {mcrr2 p0, #0, r0, r5, c0}
r0 = r0
&data_1cc2 - r8
r4 = r6 << 0x17
0
temp0.d = r7
r7 = r7
[r5 + r5].d = r0
r0 = r0
r3 = r1 u>> 0x16
[r0 + 0x14].d = r0
r1 = r0 << 1
r5 = [&data_1ef8].d
r0 = zx.d([r1 + 0x18].w)
r5 = r1 u>> 1
undefined

r3 = r1 u>> 0x16
[r0 + 0x14].d = r0
r1 = r0 << 1
r3 = r1 << 0x12
r5 = r1 s>> 0x12
flag:c = unimplemented
temp3.d = r6
cond:1 = flag:c
r6 = adc.d(temp3.d, r3, cond:1)
flag:c = adc.d(temp3.d, r3, cond:1) u< temp3.d || (cond:1 && adc.d(temp3.d, r3, cond:1) == temp3.d)
r0 = zx.d([r0 + 0x18].w)
r5 = r1
r1 = adc.d(r1, r4, flag:c)
r0 = zx.d([r0].w)
r4 = r2 << 4
r0 = [sp + 0x3ac {arg10}].d
r3 = r1 s>> 0x16
[r0 + 0x14].d = r0
r1 = r0 << 1
temp0.d = r2
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r7
r2 = r2 + 0xc
r4 = zx.d([r0 + 8].w)
temp4.d = r5
r5 = r5 & r2
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
undefined

int32_t sub_18be(int32_t arg1, int32_t arg2, int32_t arg3) __pure
r1 = 0x2f
r5 = zx.d([r1 + r6].w)
r3 = zx.d([r3 + r5].w)
r7 - 0xf4
r0 = pop
r3 = pop
r5 = pop
<return> jump(pop)

int32_t sub_1a58(int32_t* arg1 @ r5)
push(lr)
push(r0)
r3 = zx.d([r3 + r5].w)
temp0.d = r5
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r4 = [temp0.d + 0xc].d
r6 = [temp0.d + 0x10].d
r5 = r5 + 0x14
goto 11 @ 0x1cbc

r0 = r0
&data_1cc2 - r8
r4 = r6 << 0x17
0
temp0.d = r7
r7 = r7
[r5 + r5].d = r0
r0 = r0
r3 = r1 u>> 0x16
[r0 + 0x14].d = r0
r1 = r0 << 1
r5 = [&data_1ef8].d
r0 = zx.d([r1 + 0x18].w)
r5 = r1 u>> 1
undefined

int32_t sub_1a74(int32_t arg1, int32_t arg2, int32_t* arg3, int32_t arg4 @ r5, int32_t arg5 @ r7)
r4 = zx.d([r3 + r5].b)
temp0.d = r2
[temp0.d].d = r2
[temp0.d + 4].d = r5
[temp0.d + 8].d = r7
goto 6 @ 0x1d42

r4 - 0xd0
r0 = r0
temp0.d = r7
r7 = r7
<return> tailcall(sub_15d6)

int32_t sub_1a80(void* arg1, int32_t arg2, int32_t* arg3, void* arg4, int32_t*** arg5 @ r5, int32_t arg6 @ r7)
[r3 + 0x19].b = r0.b
temp0.d = r2
[temp0.d].d = r2
[temp0.d + 4].d = r5
[temp0.d + 8].d = r7
goto 6 @ 0x1d4e

&data_1d52 - r8
[r3 + 0x3e].w = r0.w  {"ZE6F"}
r7 = r7 << 3
temp0.d = r7
r7 = r7
unimplemented  {mcrr p0, #0, r7, r5, c0}
r0 = r0
&data_1d60 - r8
temp0.d = r5
r6 = [temp0.d].d
r7 = [temp0.d + 4].d
r5 = r5 + 8
r4 = r1 << 3
temp0.d = r7
r7 = r7
goto 22 @ 0x1df2

r1 = r0 << 1
r0 = r0
r0 = r0
r3 = r5 + r3
r3 = r1 u>> 0x16
[r0 + 0x10].d = r0
r1 = r0 << 1
r5 = [&data_1e10].d
[r6 + 0xe].w = r4.w
unimplemented  {ldc2l p13, c7, [sp], #-0xb0}
r1 = zx.d([r3 + 0x1e].b)
r4 = r6 << 1
r1 = r1 u>> 0x16
[r0 + 0x10].d = r0
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r0
r1 = r0 << 1
[r3 + 0xd].b = r6.b
temp0.d = r6
[temp0.d].d = r2
[temp0.d + 4].d = r4
r6 = r6 + 8
temp1.d = r0
r0 = r0 + 5
flag:c = temp1.d u>= 0xfffffffb
r1 = adc.d(r1, r4, flag:c)
r0 = r0
[r7 + 0x17].b = r7.b
undefined

int32_t sub_1abc(int32_t arg1, int32_t arg2, int32_t* arg3, void* arg4 @ r6, void* arg5 @ r11, int16_t arg6, int16_t arg7)
r1 = 0x29
r0 = zx.d([r6 + r1].w)
r3 = zx.d([r3 + r5].w)
r5 = 0xf4
temp0.d = r2
r0 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r2 = r2 + 0xc
r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + 2].w)
r5 = r5 - 0xd9
r3 = sp + 0x36c {arg_36c}
[r4 + 0x50].d = r0
r7 = zx.d([r3 + r5 {arg6}].w)
[r3 + 0x24 {arg_390}].d = r3 {arg_36c}
[r4 + 0x4c].d = r1
[r3 + 0x24 {arg_390}].d = r6
[r4 + 0x5c].d = r1
[r1 + 0x24 {&data_4d}].d = r2
[r4 + 0x6c].d = r1
[r0 + 0x24].d = r7
[r4 + 0x7c].d = r1
r5 = 0x7b
cond:0 = r5 != 0
push(lr)
push(r0)
r3 = zx.d([r3 + r5 {arg7}].w)
if (cond:0) then 29 @ 0x1ba2 else 59 @ 0x1aea

r5 = zx.d([r1 + r1 {&data_52}].w)
r3 = zx.d([r3 + r5].w)
r1 = r1 + 0x2f
r1 = zx.d([r0 + r0].w)
r3 = zx.d([r3 + r5].w)
r6 = zx.d([r6 + r7].w)
r2 = r2 - 0xf1
r7 = r7 s>> r5
[r7 + 0x7c].d = r1
r5 = zx.d([r2 + 0x1a].w)
temp0.d = r7
[temp0.d].d = r2
[temp0.d + 4].d = r3
[temp0.d + 8].d = r5
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r7 = r7 + 0x14
temp1.d = r5
r5 = r5 & r0
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
r0 = r0
r0 = r0
r1 = &data_1bc4
[r0 + 0x14].d = r0
r1 = r0 << 1
r4 = r4 - 0x83
r5 = r0 s>> 0x12
flag:c = unimplemented
goto 135 @ 0x1bca

unimplemented  {vrshr.S64 d6, d24, #0xc}
[r4 + 0xc].d = r1
[r3 + 0x24].d = r1
[r4 + 0x1c].d = r1
[r0 + 0x24].d = r4
[r4 + 0x2c].d = r1  {"4&^G"}
[r3 + 0x24].d = r7
[r4 + 0x3c].d = r1  {"\x1bEZE6F"}
r5 = 0x4e
push(lr)
push(r3)
push(r0)
r3 = zx.d([r3 + r5].w)
[r3 + 0xa].w = r3.w
r3 = r6 + 3
[r7 + 0x28].d = r5
r1 = [r4 + 0x4c].d
[r1 + 0x24].d = r0
r1 = [r4 + 0x5c].d
[r3 + 0x24].d = r7
r1 = [r4 + 0x6c].d
[r4 + 0x28].d = r4
[r4 + r4].b = r1.b
r2 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + 0x19].b)
r1 = 0x62
r6 = zx.d([r2 + r1].w)
r3 = zx.d([r3 + r5].w)
[r0 + 0x24].d = r5
r1 = sx.d([r4 + r4].b)
r2 = zx.d([r3 + r5].w)
r3 = r11
r1 = 0x62
r0 = zx.d([r2 + r1].w)
r3 = zx.d([r3 + r5].w)
[r1 + 0x24 {&data_86}].d = r2
[r4 + r4].d = r1
r2 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + r5].w)
r1 = 0x62
r2 = zx.d([r2 + r1].w)
r3 = zx.d([r3 + r5].w)
[r7 + 0x24].d = r5
[r4 + r4].w = r1.w
r2 = zx.d([r3 + r5].w)
r3 = 0 - r3
r1 = 0x62
r4 = zx.d([r3 + r1].w)
r3 = zx.d([r3 + r5].w)
[r1 + 0x24 {&data_86}].d = r6
r1 = zx.d([r4 + r4].b)
r2 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + r1].b)
r1 = 0x62
r6 = zx.d([r3 + r1].w)
r3 = zx.d([r3 + r5].w)
r5 = 0x64
temp0.d = r2
r0 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r2 = r2 + 0xc
r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + 2].w)
r5 = r5 - 0xd9
r3 = sp + 0x36c {arg_358}
r0 = r4 s>> 0x20
r3 = zx.d([r2 + r5].w)
r7 - 0x5b
r2 = r2 - 0xe1
r4 = zx.d([r6 + r7].w)
r1 = r2 + r0
r2 = zx.d([r3 + r5].w)
flag:c = r7 u< 0x5b
flag:v = add_overflow(r7, -0x5b)
if (flag:v) then 135 @ 0x1bca else 198 @ 0x1b76

r6 = adc.d(r6, r3, flag:c)
r0 = r0
[r1 + 0x20].w = r7.w
r0 = r1 << 2
r0 = r0
r7 = r0 << 0x17
[r0 + 0x10].d = r0
r1 = r0 << 1
r0 = r0
r0 = r0
r3 = r5 u>> 0x1f
r3 = r1 u>> 0x16
[r0 + 0x10].d = r0
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r7
r1 = r1 + 0xc
r1 = zx.d([r0 + 8].w)
r5 = r1
r1 = adc.d(r1, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
temp2.d = r5
r5 = r5 & r2
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
r1 = &data_1bf8
[r0 + 0x14].d = r0
r1 = r0 << 1
r3 = r1 u>> 0x12
r5 = r2 + 2
flag:c = r2 u>= 0xfffffffe
r6 = adc.d(r6, r3, flag:c)
r3
[r1 + 0x28].w = r4.w
r4 = sx.d([r2 + r0].w)
r1 = r0 << 1
r1 = r7 u>> 0x14
[r0 + 0x10].d = r0
r1 = r0 << 1
r0 = r0 - 0x73
r3 = r1 s>> 0x16
[r0 + 0x14].d = r0
r1 = r0 << 1
r3 = r1 << 0x12
r5 = r2 s>> 0x12
flag:c = unimplemented
temp3.d = r6
cond:1 = flag:c
r6 = adc.d(temp3.d, r3, cond:1)
flag:c = adc.d(temp3.d, r3, cond:1) u< temp3.d || (cond:1 && adc.d(temp3.d, r3, cond:1) == temp3.d)
r0 = zx.d([r0 + 0x18].w)
r5 = r1
r1 = adc.d(r1, r4, flag:c)
r0 = r0 u>> 0x1c
r6 = r6 s>> 0x12
r1 = r0 u>> 0x1c
r6 = r6 << 0x16
r6 = sx.d([r1 + r0].w)
r1 = r0 << 1
if (r1 == 0) then 226 @ 0x1c98 else 258 @ 0x1c30

r3 = zx.d([r3 + r5].w)
r9 = adc.d(r11, 0xa50000, flag:c)
r5 = zx.d([r6 + r6].w)
r3 = zx.d([r3 + r5].w)
r3 = r3 u>> 0x15
[r4 - 0xbc].d = r3
[r4 - 0xbc + 4].d = r1
r5 = zx.d([r2 + r6].w)
r3 = zx.d([r3 + r5].w)
r7 - 0xf6
r2 = r2 + 0xe1
r7 - 0xf4
r1 = r5 u>> 0x14
r2 = zx.d([r3 + r5].w)
r5 = 0x5b
push(lr)
push(r3)
push(r0)
r3 = zx.d([r3 + r5].w)
temp0.d = r3
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r3
[temp0.d + 0xc].d = r4
[temp0.d + 0x10].d = r6
r3 = r3 + 0x14
r2 = r2 - 0x29
undefined

r5 = [&data_1ec0].d
[r6 + 0xe].w = r0.w
sp = sp | not.d(0x2b0)
r1 = zx.d([r3 + 0x1e].b)
r4 = r6 << 1
[r4 + 0xa].w = r6.w
unimplemented  {ldc2l p15, c12, [r5], #-0x164}
r11 - r1
r0 = zx.d([r1 + 0x18].w)
r5 = zx.d([r4 + r7].b)
[r0 + r7].b = r3.b
unimplemented  {stc p12, c14, [r11], {0x83}}
temp0.d = r7
[temp0.d].d = r2
[temp0.d + 4].d = r3
r7 = r7 + 8
unimplemented  {mcrr2 p0, #0, r0, r5, c0}
r0 = r0
&data_1cc2 - r8
r4 = r6 << 0x17
0
temp0.d = r7
r7 = r7
[r5 + r5].d = r0
r0 = r0
r3 = r1 u>> 0x16
[r0 + 0x14].d = r0
r1 = r0 << 1
r5 = [&data_1ef8].d
r0 = zx.d([r1 + 0x18].w)
r5 = r1 u>> 1
undefined

r3 = r1 u>> 0x16
[r0 + 0x14].d = r0
r1 = r0 << 1
r3 = r1 << 0x12
r5 = r1 s>> 0x12
flag:c = unimplemented
temp4.d = r6
cond:2 = flag:c
r6 = adc.d(temp4.d, r3, cond:2)
flag:c = adc.d(temp4.d, r3, cond:2) u< temp4.d || (cond:2 && adc.d(temp4.d, r3, cond:2) == temp4.d)
r0 = zx.d([r0 + 0x18].w)
r5 = r1
r1 = adc.d(r1, r4, flag:c)
r0 = zx.d([r0].w)
r4 = r2 << 4
r0 = [sp + 0x3ac].d
r3 = r1 s>> 0x16
[r0 + 0x14].d = r0
r1 = r0 << 1
temp0.d = r2
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r7
r2 = r2 + 0xc
r4 = zx.d([r0 + 8].w)
temp5.d = r5
r5 = r5 & r2
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
undefined

int32_t sub_1cec(int32_t arg1, int32_t arg2, void* arg3, int32_t* arg4, int32_t arg5 @ r4, int32_t arg6 @ r6, int32_t arg7 @ r7)
r1 = zx.d([r2 + 0x1e].w)
unimplemented  {mcrr2 p5, #8, lr, r5, c11}
temp0.d = r3
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r3
[temp0.d + 0xc].d = r4
[temp0.d + 0x10].d = r6
r3 = r3 + 0x14
r5 = zx.d([r2 + 0x1a].w)
[r5 + 0x1e].w = r4.w
[r5 + r3].b = r4.b
&data_1cfe - r8
r0 = r6 << 2
r0 = r0 & r2
temp0.d = r7
r7 = r7
unimplemented  {mcrr2 p13, #2, r7, r5, c12}
r1 = zx.d([r3 + 0x1e].b)
&data_1d0c - r8
r4 = r1 << 3
r0 = r0
temp0.d = r7
r7 = r7
push(r6)
push(r2)
push(r0)
r0 = r0 << 1
r0 = r0
&data_1d1a - r8
r0 = r7 << 0x1e
r0 = r0
temp0.d = r7
r7 = r7
unimplemented  {strex r0, r0, [r5, #0xa4]}
r0 = r0
&data_1d28 - r8
r4 = r6 << 7
r0 = r0
temp0.d = r7
r7 = r7
r0 = pop
r2 = pop
r6 = pop
r7 = r7 << 3
r0 = r0
&data_1d36 - r8
r0 = r1 << 3
r0 = r0
cond:0 = r0 s< 0
temp0.d = r7
r7 = r7
if (cond:0) then 53 @ 0x1dc8 else 54 @ 0x1d3c

undefined

r1 = r0
r0 = r0
&data_1d44 - r8
r4 - 0xd0
r0 = r0
temp0.d = r7
r7 = r7
<return> tailcall(sub_15d6)

int32_t sub_1d4a(void* arg1, int32_t arg2, int32_t arg3, int32_t* arg4 @ r5)
r3 = r0
r0 = r0
&data_1d52 - r8
[r3 + 0x3e].w = r0.w  {"ZE6F"}
r7 = r7 << 3
temp0.d = r7
r7 = r7
unimplemented  {mcrr p0, #0, r7, r5, c0}
r0 = r0
&data_1d60 - r8
temp0.d = r5
r6 = [temp0.d].d
r7 = [temp0.d + 4].d
r5 = r5 + 8
r4 = r1 << 3
temp0.d = r7
r7 = r7
goto 18 @ 0x1df2

r1 = r0 << 1
r0 = r0
r0 = r0
r3 = r5 + r3
r3 = r1 u>> 0x16
[r0 + 0x10].d = r0
r1 = r0 << 1
r5 = [&data_1e10].d
[r6 + 0xe].w = r4.w
unimplemented  {ldc2l p13, c7, [sp], #-0xb0}
r1 = zx.d([r3 + 0x1e].b)
r4 = r6 << 1
r1 = r1 u>> 0x16
[r0 + 0x10].d = r0
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r0
r1 = r0 << 1
[r3 + 0xd].b = r6.b
temp0.d = r6
[temp0.d].d = r2
[temp0.d + 4].d = r4
r6 = r6 + 8
temp1.d = r0
r0 = r0 + 5
flag:c = temp1.d u>= 0xfffffffb
r1 = adc.d(r1, r4, flag:c)
r0 = r0
[r7 + 0x17].b = r7.b
undefined

int32_t sub_1d80(int32_t arg1, int32_t arg2, uint32_t* arg3, void* arg4 @ r6, void* arg5 @ r7)
[r7 + 0x1e].w = r7.w
r4 = r0 << 0x13
r3 = r1 u>> 0x16
[r7 + r3].d = r0
r1 = r0 << 1
r1 = r1 u>> 0x16
[r4 + 0x10].d = r0
r1 = r0 << 1
r3 = r1 u>> 6
flag:c = test_bit(r1, 6 - 1)
goto 11 @ 0x2098

r0 = adc.d(r0, r4, flag:c)
flag:c = r3 u< 0
r5 = r0
r0 = adc.d(r0, r4, flag:c)
r3 = &data_20a4
[r1].d = r4
r1 = r0 << 1
r3 = r1 u>> 0x16
[r0].d = r4
r1 = r0 << 1
unimplemented  {srsia sp, #0xf}
r0 = r0
r1 = r1 u>> 0x16
[r0].d = r4
r1 = r0 << 1
[r1 + r6].b = r3.b
r0 = zx.d([r6 + 0xe].w)
r5 = r2 u>> 0x20
flag:c = test_bit(r2, 0x20 - 1)
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
unimplemented  {strex r3, r9, [r5, #0x14]}
r2 = r2
r0 = zx.d([r0 + 8].w)
unimplemented  {strex sp, r0, [r5, #0x22c]}
[r3].d = r4
r1 = r0 << 1
unimplemented  {srsia sp, #1}
r5 = r1
flag:c = r1 u>= 0
r0 = adc.d(r0, r4, flag:c)
temp0.d = r7
r7 = r7
unimplemented  {strex lr, r10, [r5, #0x94]}
r0 = r0
r3 = r1 s>> 0x16
[r1].d = r0
r1 = r0 << 1
r6 = r1 ^ ror.d(sp, 2)
r0 = r0
r1 = r1 s>> 0x16
[r1].d = r0
r1 = r0 << 1
r11 - r1
r0 = r6 << 0x17
r3 = [r7 + 0x4c].d
r0 = r0
r9 - r1
r0 = zx.d([r6 + 0x1e].w)
r5 = r1 + r0
flag:c = r1 + r0 u< r1
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
r5 = sp | 0xc7
[r3 + 0x10].d = r4
r1 = r0 << 1
r0 = r0
r0 = r0
r3 = r5 u>> 0x1f
r3 = r1 s>> 0x16
[r3 + 0x10].d = r4
r1 = r0 << 1
temp0.d = r2
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r7
r2 = r2 + 0xc
r1 = zx.d([r0 + 8].w)
r5 = r2
flag:c = r2 u>= 0
r1 = adc.d(r1, r4, flag:c)
[r0 + 0x18].w = r0.w
r5 = r7
flag:c = r7 u>= 0
r1 = adc.d(r1, r4, flag:c)
r0 = r0 << 8
[r1 + 0x18].w = r7.w
r5 = r3 << 7
r0 = r0
r1 = r4 << 0x12
flag:c = test_bit(r4, 0x20 - 0x12)
r0 = adc.d(r0, r4, flag:c)
r0 = r0 << 0xc
r5 = r0
flag:c = r0 u>= 0
r0 = adc.d(r0, r4, flag:c)
r3 = &data_213c
[r0].d = r4
r1 = r0 << 1
r5 = [&data_2370].d
r3 - 0xf4
unimplemented  {strex sp, r4, [sp, #0x224]}
r4 = zx.d([r6 + 0x1e].w)
r5 = r2 s>> 0x20
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
[r0 + 0x18].w = r0.w
r2 = r5 << 7
r1 = r1 s>> 0x16
[r2].d = r0
r1 = r0 << 1
r1 = r4 s>> 2
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
[r0 + r0].d = r0
r3 = r1 u>> 0x16
[r4 + 0x10].d = r4
r1 = r0 << 1
r1 = zx.d([r2 + 0x1a].w)
undefined

uint32_t sub_1e88(void* arg1, int32_t arg2, void* arg3, int32_t arg4 @ r6, void* arg5 @ r7)
[r7 + 0x1e].w = r7.w
r4 = r0 << 0x13
r3 = r1 u>> 0x16
[r3 + 0x10].d = r0
r1 = r0 << 1
r5 = [&data_1ea0].d
r0 = zx.d([r0 + 0xe].w)
r5 = r1 + r0
flag:c = r1 + r0 u< r1
r1 = adc.d(r1, r4, flag:c)
r0 = zx.d([r0 + 0x28].w)
sp = sp - 0x51
[sp {var_51}].d = r8
temp0.d = r4
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r6
r4 = r4 + 0x10
[r2 + 0x64].d = r2
[r0 + 0x16].b = r1.b
[r3 + 3].b = r4.b
r7 = zx.d([r0 + 0x2a].w)
sp = r5 | 0x1020000
r4 - 0xfc
r1 = [sp + 0x1f4].d
[r7 + 0x11].b = r7.b
[r0 + r0].d = r0
r3 = pop
r5 = pop
r6 = pop
r7 = pop
<return> jump(pop)

int32_t sub_1efc(void* arg1, int32_t arg2 @ r4, void* arg3 @ r7)
[r7 + 0x10].d = r4
r1 = r0 << 1
r0 = [r0 + 0x58].d
<return> tailcall(sub_18be)

int32_t j_sub_2018(int32_t arg1, int32_t arg2, int32_t arg3, uint32_t* arg4, void* arg5 @ r5, int32_t arg6 @ r6)
<return> tailcall(sub_2018)

int32_t sub_1f3a(int32_t arg1, int32_t, int32_t, int32_t arg4, void* arg5 @ r7)
[r7 + 0x1e].w = r7.w
r4 = r0 + r3
<return> tailcall(sub_1a58)

int32_t sub_2018(int32_t arg1, int32_t arg2, int32_t, uint32_t* arg4, void* arg5 @ r5, int32_t arg6 @ r6)
r7 = r0 + r6
r0 = r0
r9 - r1
r0 = zx.d([r5 + 0x1e].w)
sp = sp - 3
[sp {var_3}].d = r0
[r3].d = r0
r1 = r0 << 1
r5 = [&data_2250].d
undefined

int32_t sub_2246(void* arg1, int32_t arg2, int32_t arg3, uint32_t* arg4, uint32_t* arg5 @ r4)
goto 1 @ 0x23f0

r2 = r1 << 2
r0 = zx.d([r0 + 0x18].w)
r5 = r5 | 0x890089
[r4].d = r0
r1 = r0 << 1
r7 = r0 << 0x17
[r3].d = r0
r1 = r0 << 1
unimplemented  {setend be}
r0 = r0
&data_240a - r8
r4 = zx.d([r6 + r7].w)
r7 = r2 << 1
r0 = zx.d([r0 + 0x18].w)
unimplemented  {mcrr2 p5, #2, r0, r5, c11}
[r1].d = r0
r1 = r0 << 1
r9 - r1
r4 = zx.d([r7 + 0x1e].w)
r5 = r1 u>> 0x10
flag:c = test_bit(r1, 0x10 - 1)
r0 = adc.d(r0, r4, flag:c)
[r0 + 8].w = r0.w
r1 = sx.d([r5 + r3].w)
r0 = r0 << 3
r0 = zx.d([r0 + 8].w)
r5 = r1 u>> 0x10
flag:c = test_bit(r1, 0x10 - 1)
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
undefined

int32_t sub_2254(int32_t* arg1, int32_t arg2, int32_t* arg3, int32_t arg4 @ r4, void* arg5 @ r6, void* arg6 @ r7, int32_t arg7)
r1 = r5 << 7
r1 = r1 u>> 0x16
[r0].d = r4
r1 = r0 << 1
r3 = r1 s>> 0x16
[r3].d = r4
r1 = r0 << 1
[r1 + r6].b = r1.b
[r6 + 0xe].w = r0.w
unimplemented  {ldc2l p0, c0, [sp], #-0x25c}
r0 = r0
r4 = r7 + 1
r11 - r1
r0 = r7 << 0x17
r6 = r3 u>> 0xb
r0 = r0
r9 - r1
r0 = zx.d([r7 + 0x1e].w)
r5 = r1 u>> 0x10
flag:c = test_bit(r1, 0x10 - 1)
r0 = adc.d(r0, r4, flag:c)
[r0 + 0x18].w = r0.w
r1 = r0 << 7
r1 = r1 u>> 0x16
[r1].d = r4
r1 = r0 << 1
r3 = zx.d([r5 + 0x1b].b)
r3 = r1 s>> 0x16
[r3].d = r0
r1 = r0 << 1
r9 = r3 ^ r1
r5 = r2 + r0
flag:c = r2 + r0 u< r2
r0 = adc.d(r0, r4, flag:c)
r1 = &data_229c
[r4 + 0x10].d = r4
r1 = r0 << 1
r0 = zx.d([r2 + 0x1a].w)
r5 = r1 s>> 0x10
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
[r0 + r4].d = r0
r3 = r1 s>> 0x16
[r7 + 0xc].d = r4
r1 = r0 << 1
r1 = &data_23f8
[r7 + 0xc].d = r0
r1 = r0 << 1
unimplemented  {ldrex r4, [r0, #0x238]}
r0 = r0
r3 = r4 << 0x12
flag:c = test_bit(r4, 0x20 - 0x12)
r1 = adc.d(r1, r4, flag:c)
[r0 + 0x18].w = r0.w
r5 = r7 << 0x10
flag:c = test_bit(r7, 0x20 - 0x10)
r1 = adc.d(r1, r4, flag:c)
r0 = r0 << 8
r5 - 0x75
r3 = r1 u>> 0x16
[r3].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
goto 64 @ 0x2652

temp1.d = r0
cond:1 = flag:c
r0 = adc.d(temp1.d, r4, cond:1)
flag:c = adc.d(temp1.d, r4, cond:1) u< temp1.d || (cond:1 && adc.d(temp1.d, r4, cond:1) == temp1.d)
r0 = zx.d([r0 + 8].w)
r0 = 0x15
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
r5 = r5 | 0x2b  {"O4&^G"}
[r4].d = r0
r1 = r0 << 1
r9 - r1
r0 = zx.d([r6 + 0x1e].w)
r5 = r1 u>> 0x20
flag:c = test_bit(r1, 0x20 - 1)
r0 = adc.d(r0, r4, flag:c)
[r0 + 0x18].w = r0.w
r1 = r5 << 7
r1 = r1 u>> 0x16
[r1].d = r0
r1 = r0 << 1
r3 = r1 s>> 0x16
[r0].d = r0
r1 = r0 << 1
r3 = r0 s>> 0x14
[r0].d = r0
r1 = r0 << 1
r1 = r1 s>> 0x16
[r0].d = r0
r1 = r0 << 1
r11 - r1
r3 - 0xfc
r5 = r0 s>> 0x10
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
unimplemented  {mcrr2 p13, #8, r0, r5, c11}
[r3].d = r4
r1 = r0 << 1
r5 = [&data_26a8].d
r4 = zx.d([r7 + 0xe].w)
r5 = r1
flag:c = r1 u>= 0
r0 = adc.d(r0, r4, flag:c)
cond:0 = r0 != 0
temp0.d = r7
r7 = r7
if (cond:0) then 112 @ 0x80da else 114 @ &data_26a8

breakpoint

r0 = r0
r3 = r1 s>> 0x16
[r0].d = r0
r1 = r0 << 1
temp0.d = r2
[temp0.d].d = r0
[temp0.d + 4].d = r7
r2 = r2 + 8
[sp + 0x260 {arg_260}].d = r1
r0 = r0
r1 = r1 s>> 0x16
[r0].d = r0
r1 = r0 << 1
r11 - r1
r3 = &data_2a90
[r3 {&data_2a90}].d = r0
r1 = r0 << 1
r5 = [&data_28f4].d
r4 = zx.d([r7 + 0xe].w)
r5 = r1 + r0
flag:c = r1 + r0 u< r1
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
r5 = r2 s>> 0x10
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
[r0 + r0].w = r0.w
r7 = r7 s>> 0x17
[r2 + r1].d = r4
r1 = r0 << 1
r3 = r4 << 0x12
flag:c = test_bit(r4, 0x20 - 0x12)
r1 = adc.d(r1, r4, flag:c)
[r0 + 0x18].w = r0.w
r5 = r7 << 0x10
flag:c = test_bit(r7, 0x20 - 0x10)
r1 = adc.d(r1, r4, flag:c)
r0 = r0
r5 = r6 s>> 1
flag:c = unimplemented
r0 = 0xa1
r0 = adc.d(r0, r4, flag:c)
r0 = r0 << 0xc
r5 = r0
flag:c = r0 u>= 0
r0 = adc.d(r0, r4, flag:c)
r3 = &data_26f4
[r4].d = r0
r1 = r0 << 1
r7 = r0 << 0x17
[r4].d = r0
r1 = r0 << 1
r4 = zx.d([r3 + 0x1c {&data_2710}].w)
r0 = r0
r1 = zx.d([r0 + 0x16].b)
if (r0 == 0) then 170 @ 0x2786 else 201 @ 0x2706

[r1 + r6].b = r1.b
r1 = &data_2b5c
[r0].d = r4
r1 = r0 << 1
r3 - r0
r3 = &data_2b84
[r0].d = r4
r1 = r0 << 1
r3 = r1 u>> 0x16
[r4 + 0x10 {&data_f065}].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
r1 = zx.d([r2 + 0x1a].w)
r4 = 0x15
r1 = adc.d(r1, r4, flag:c)
[r0 + r0].w = r0.w
unimplemented  {stc2 p1, c4, [r1], #0x180}
[r0 + r0].d = r0
r3 = r1 u>> 0x16
[r7 + 0xc].d = r0
r1 = r0 << 1
unimplemented  {ldrex r4, [r1, #0x240]}
r0 = r0
r3 = r4 << 0x12
flag:c = test_bit(r4, 0x20 - 0x12)
r1 = adc.d(r1, r4, flag:c)
[r0 + 0x18].w = r0.w
r5 = r7 << 0x10
flag:c = test_bit(r7, 0x20 - 0x10)
r1 = adc.d(r1, r4, flag:c)
undefined

r0 = r0
r0 = r0 u>> 0x1c
r6 = [sp + 0x234 {arg7}].d
r2 = r0
r0 = zx.d([r0 + 0x18].w)
sp = r5 | 0x8b
[r2].d = r4
r1 = r0 << 1
goto 210 @ 0x2cc2

r4 = zx.d([r7 + 0x1a].w)
unimplemented  {mcrr2 p9, #8, lr, sp, c3}
r1 = zx.d([r0 + 8].w)
unimplemented  {mcrr2 p5, #8, r1, sp, c11}
[r1 + 0x10].d = r4
r1 = r0 << 1
r1 = &data_2e1c
[r2 + 0x10].d = r4
r1 = r0 << 1
r0 = zx.d([r2 + 0x1a].w)
r5 = r1 u>> 0x10
flag:c = test_bit(r1, 0x10 - 1)
r1 = adc.d(r1, r4, flag:c)
[r0 + r4].d = r0
r3 = r1 s>> 0x16
[r1 + 0x10].d = r4
r1 = r0 << 1
r1 = &data_2e30
[r1 + 0x10 {&data_2e40}].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
unimplemented  {vqshl.U16 d18, d5, d0}
r0 = adc.d(r0, r2, flag:c)
r3 = &data_2cf4
[r0 + 0x10].d = r4
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r4
r1 = r0 << 1
[r7 + 0x17].b = r7.b
r5 = zx.d([r5 + 0x18].w)
r5 = r1 u>> 0x10
flag:c = test_bit(r1, 0x10 - 1)
r0 = adc.d(r0, r4, flag:c)
r0 = r0 << 0xc
sp = sp - 0x89
[sp].d = r0
[r1].d = r4
r1 = r0 << 1
[r1 + r6].b = r3.b
r4 = zx.d([r7 + 0xe].w)
r5 = r2 u>> 0x10
flag:c = test_bit(r2, 0x10 - 1)
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
unimplemented  {mcrr2 p5, #2, r0, r5, c11}
[r3 {&data_2cf4}].d = r4
r1 = r0 << 1
r9 - r1
r4 = zx.d([r7 + 0x1e].w)
undefined

int32_t sub_2604(int32_t arg1, char* arg2, int32_t* arg3, void* arg4 @ r6, int32_t arg5 @ r7, int32_t arg6 @ r8, int32_t arg7)
temp0.d = r2
[temp0.d].d = r0
[temp0.d + 4].d = r7
r2 = r2 + 8
r2 = r2 + 0xc
r0 = r0
[r1 + r6].b = r1.b
r1 = &data_29e0
[r2 + 0x10].d = r0
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
r0 = zx.d([r2 + 0x1a].w)
r4 = 0xd
r1 = adc.d(r1, r4, flag:c)
[r0 + r4].d = r0
r3 = r1 s>> 0x16
[r2 + 0x10].d = r0
r1 = r0 << 1
r1 = &data_276c
[r4 + 0x10 {&data_1d}].d = r4
r1 = r0 << 1
r0 = zx.d([r2 + 0x1a].w)
goto 23 @ 0x2628

r5 = r1 s>> 0x20
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
[r0 + r4].d = r0
r7 = r7 s>> 0x17
[r4 + r0].d = r4
r1 = r0 << 1
r3 = r4 << 0x12
flag:c = test_bit(r4, 0x20 - 0x12)
r1 = adc.d(r1, r4, flag:c)
[r0 + 0x18].w = r0.w
r5 = r7 << 0x10
flag:c = test_bit(r7, 0x20 - 0x10)
r1 = adc.d(r1, r4, flag:c)
r0 = r0 << 4
r4 = lr
flag:n = &data_2646 - r8 s< 0
flag:z = &data_2646 == r8
flag:c = &data_2646 u< r8
flag:v = add_overflow(&data_2646, neg.d(r8))
if (not(flag:z) && flag:n == flag:v) then 23 @ 0x2628 else 44 @ &data_2646  {"4&^G"}

r2 = r5
r0 = zx.d([r0 + 0x18].w)
r0 = 0x15
r0 = adc.d(r0, r4, flag:c)
flag:c = r3 u< 0
r0 = 0x15
temp1.d = r0
cond:1 = flag:c
r0 = adc.d(temp1.d, r4, cond:1)
flag:c = adc.d(temp1.d, r4, cond:1) u< temp1.d || (cond:1 && adc.d(temp1.d, r4, cond:1) == temp1.d)
r0 = zx.d([r0 + 8].w)
r0 = 0x15
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
r5 = r5 | 0x2b  {"O4&^G"}
[r4].d = r0
r1 = r0 << 1
r9 - r1
r0 = zx.d([r6 + 0x1e].w)
r5 = r1 u>> 0x20
flag:c = test_bit(r1, 0x20 - 1)
r0 = adc.d(r0, r4, flag:c)
[r0 + 0x18].w = r0.w
r1 = r5 << 7
r1 = r1 u>> 0x16
[r1].d = r0
r1 = r0 << 1
r3 = r1 s>> 0x16
[r0].d = r0
r1 = r0 << 1
r3 = r0 s>> 0x14
[r0].d = r0
r1 = r0 << 1
r1 = r1 s>> 0x16
[r0].d = r0
r1 = r0 << 1
r11 - r1
r3 - 0xfc
r5 = r0 s>> 0x10
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
unimplemented  {mcrr2 p13, #8, r0, r5, c11}
[r3].d = r4
r1 = r0 << 1
r5 = [&data_26a8].d
r4 = zx.d([r7 + 0xe].w)
r5 = r1
flag:c = r1 u>= 0
r0 = adc.d(r0, r4, flag:c)
cond:0 = r0 != 0
temp0.d = r7
r7 = r7
if (cond:0) then 98 @ 0x80da else 100 @ &data_26a8

breakpoint

r0 = r0
r3 = r1 s>> 0x16
[r0].d = r0
r1 = r0 << 1
temp0.d = r2
[temp0.d].d = r0
[temp0.d + 4].d = r7
r2 = r2 + 8
[sp + 0x260 {arg_260}].d = r1
r0 = r0
r1 = r1 s>> 0x16
[r0].d = r0
r1 = r0 << 1
r11 - r1
r3 = &data_2a90
[r3 {&data_2a90}].d = r0
r1 = r0 << 1
r5 = [&data_28f4].d
r4 = zx.d([r7 + 0xe].w)
r5 = r1 + r0
flag:c = r1 + r0 u< r1
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
r5 = r2 s>> 0x10
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
[r0 + r0].w = r0.w
r7 = r7 s>> 0x17
[r2 + r1].d = r4
r1 = r0 << 1
r3 = r4 << 0x12
flag:c = test_bit(r4, 0x20 - 0x12)
r1 = adc.d(r1, r4, flag:c)
[r0 + 0x18].w = r0.w
r5 = r7 << 0x10
flag:c = test_bit(r7, 0x20 - 0x10)
r1 = adc.d(r1, r4, flag:c)
r0 = r0
r5 = r6 s>> 1
flag:c = unimplemented
r0 = 0xa1
r0 = adc.d(r0, r4, flag:c)
r0 = r0 << 0xc
r5 = r0
flag:c = r0 u>= 0
r0 = adc.d(r0, r4, flag:c)
r3 = &data_26f4
[r4].d = r0
r1 = r0 << 1
r7 = r0 << 0x17
[r4].d = r0
r1 = r0 << 1
r4 = zx.d([r3 + 0x1c {&data_2710}].w)
r0 = r0
r1 = zx.d([r0 + 0x16].b)
if (r0 == 0) then 156 @ 0x2786 else 187 @ 0x2706

[r1 + r6].b = r1.b
r1 = &data_2b5c
[r0].d = r4
r1 = r0 << 1
r3 - r0
r3 = &data_2b84
[r0].d = r4
r1 = r0 << 1
r3 = r1 u>> 0x16
[r4 + 0x10 {&data_f065}].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
r1 = zx.d([r2 + 0x1a].w)
r4 = 0x15
r1 = adc.d(r1, r4, flag:c)
[r0 + r0].w = r0.w
unimplemented  {stc2 p1, c4, [r1], #0x180}
[r0 + r0].d = r0
r3 = r1 u>> 0x16
[r7 + 0xc].d = r0
r1 = r0 << 1
unimplemented  {ldrex r4, [r1, #0x240]}
r0 = r0
r3 = r4 << 0x12
flag:c = test_bit(r4, 0x20 - 0x12)
r1 = adc.d(r1, r4, flag:c)
[r0 + 0x18].w = r0.w
r5 = r7 << 0x10
flag:c = test_bit(r7, 0x20 - 0x10)
r1 = adc.d(r1, r4, flag:c)
undefined

r0 = r0
r0 = r0 u>> 0x1c
r6 = [sp + 0x234 {arg7}].d
r2 = r0
r0 = zx.d([r0 + 0x18].w)
sp = r5 | 0x8b
[r2].d = r4
r1 = r0 << 1
goto 196 @ 0x2cc2

r4 = zx.d([r7 + 0x1a].w)
unimplemented  {mcrr2 p9, #8, lr, sp, c3}
r1 = zx.d([r0 + 8].w)
unimplemented  {mcrr2 p5, #8, r1, sp, c11}
[r1 + 0x10].d = r4
r1 = r0 << 1
r1 = &data_2e1c
[r2 + 0x10].d = r4
r1 = r0 << 1
r0 = zx.d([r2 + 0x1a].w)
r5 = r1 u>> 0x10
flag:c = test_bit(r1, 0x10 - 1)
r1 = adc.d(r1, r4, flag:c)
[r0 + r4].d = r0
r3 = r1 s>> 0x16
[r1 + 0x10].d = r4
r1 = r0 << 1
r1 = &data_2e30
[r1 + 0x10 {&data_2e40}].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
unimplemented  {vqshl.U16 d18, d5, d0}
r0 = adc.d(r0, r2, flag:c)
r3 = &data_2cf4
[r0 + 0x10].d = r4
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r4
r1 = r0 << 1
[r7 + 0x17].b = r7.b
r5 = zx.d([r5 + 0x18].w)
r5 = r1 u>> 0x10
flag:c = test_bit(r1, 0x10 - 1)
r0 = adc.d(r0, r4, flag:c)
r0 = r0 << 0xc
sp = sp - 0x89
[sp].d = r0
[r1].d = r4
r1 = r0 << 1
[r1 + r6].b = r3.b
r4 = zx.d([r7 + 0xe].w)
r5 = r2 u>> 0x10
flag:c = test_bit(r2, 0x10 - 1)
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
unimplemented  {mcrr2 p5, #2, r0, r5, c11}
[r3 {&data_2cf4}].d = r4
r1 = r0 << 1
r9 - r1
r4 = zx.d([r7 + 0x1e].w)
undefined

int32_t sub_271a(int32_t* arg1, char* arg2, int32_t arg3, int32_t arg4 @ r4, int32_t arg5 @ r6)
[r1 + r6].b = r1.b
r1 = &data_2ae0
[r0].d = r4
r1 = r0 << 1
<return> tailcall(sub_28a8)

int32_t sub_2780(int32_t arg1, int32_t, int32_t* arg3, int32_t arg4 @ r7) __noreturn
temp0.d = r2
[temp0.d].d = r0
[temp0.d + 4].d = r7
r2 = r2 + 8
trap(0x74)
{ Does not return }

int32_t sub_28a8(int32_t arg1, int32_t arg2, int32_t* arg3, int32_t arg4 @ r4, void* arg5 @ r6, int32_t* arg6 @ r7)
r3 - r0
r3 = &data_2c8c
[r2].d = r4
r1 = r0 << 1
r5 = [&data_2ae0].d
[r6 + 0x1e].w = r0.w
r1 = r5 << 7
r5 = [&data_2adc].d
temp0.d = r7
[temp0.d].d = r4
[temp0.d + 4].d = r5
[temp0.d + 8].d = r6
[temp0.d + 0xc].d = r7
r7 = r7 + 0x10
r5 = r0 s>> 0x10
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = r0 + 0x770000
r0 = zx.d([r0 + 0x18].w)
r5 = r2 + r0
flag:c = r2 + r0 u< r2
r0 = adc.d(r0, r4, flag:c)
[r0 + 0x18].w = r0.w
r2 = r0 << 7
r1 = r1 s>> 0x16
[r3 {&data_2c8c}].d = r0
r1 = r0 << 1
r2 = sp + 0x3a4 {arg_3a4}
r0 = r0
r0 = zx.d([r0 + 0x18].w)
unimplemented  {mcrr2 p8, #8, lr, r5, c3}
r1 = zx.d([r0 + 8].w)
unimplemented  {mcrr2 p13, #8, r4, r5, c11}
[r7 + 0x1e].w = r4.w
r1 = r5 << 7
r5 = [&data_2b0c].d
r4 = zx.d([r7 + 0x1e].w)
r5 = r2 << 0x10
flag:c = test_bit(r2, 0x20 - 0x10)
r0 = adc.d(r0, r4, flag:c)
r3
r5 = r5 | 0x112000
[r0].d = r4
r1 = r0 << 1
r1 = r4 u>> 0x12
flag:c = test_bit(r4, 0x12 - 1)
r1 = adc.d(r1, r4, flag:c)
[r0 + r0].d = r0
r3 = r1 u>> 0x16
[r4 + 0x10].d = r4
r1 = r0 << 1
r1 = zx.d([r2 + 0x1a {arg_3be}].w)
r5 = r2 s>> 0x10
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
[r0 + r0].w = r0.w
r1 = r4 s>> 0x12
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
[r0 + r0].d = r0
r3 = r1 u>> 0x16
[r1 + 0x10].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
unimplemented  {vqshl.U16 d18, d5, d1}
r0 = adc.d(r0, r2, flag:c)
r3 = &data_2920
[r0 + 0x10].d = r4
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r4
r1 = r0 << 1
[r7 + 0x13].b = r7.b
r3 = zx.d([r1 + 0x1a].w)
unimplemented  {mrrc2 p5, #2, r5, r5, c11}
r0 = zx.d([r6 + 0xe].w)
unimplemented  {mrrc2 p5, #0xc, r4, r5, c7}
[r7 + r3].d = r4
r5 = r0 << 3
r1 = &data_2940
[r3].d = r0
r1 = r0 << 1
r3 - r5
r3 = &data_2d38
[r3 {&data_2d38}].d = r0
r1 = r0 << 1
r3 = r1 u>> 0x16
[r0].d = r4
r1 = r0 << 1
unimplemented  {srsia sp, #1}
r5 = r1 << 0x10
flag:c = test_bit(r1, 0x20 - 0x10)
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
undefined

int32_t sub_2bc2(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4 @ r4, void* arg5 @ r5, void* arg6 @ r6)
r0 = adc.d(r0, r4, flag:c)
[r0 + r0].w = r0.w
r0 = zx.d([r5 + 0xf].b)
r3 = r0 << 1
r3 = &data_2bcc
[r0 + 0x10].d = r4
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r4
r1 = r0 << 1
[r0 + 0x10].b = r3.b
r1 = &data_2c3c
[r0].d = r0
goto 14 @ 0x2bdc

r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
r5 = [&data_2e0c].d
if (flag:c) then 14 @ 0x2bdc else 18 @ 0x2be2

r3 = &data_2f64
[r0].d = r0
r1 = r0 << 1
r3 = r1 u>> 0x16
[r3].d = r4
r1 = r0 << 1
r5 = [&data_2e14].d
r4 = zx.d([r6 + 0x1e].w)
r5 = r2
flag:c = r2 u>= 0
r0 = adc.d(r0, r4, flag:c)
r0 = r0 << 0xc
r5 = r5 | 0x890089
[r3].d = r4
r1 = r0 << 1
<return> tailcall(sub_271a)

int32_t sub_2f24(int32_t arg1, int32_t arg2, void** arg3, void** arg4 @ r4, int32_t arg5 @ r6)
r5 = r6 + 1
r1 = r4 + r2
flag:c = r4 + r2 u< r4
r0 = adc.d(r0, r4, flag:c)
[r0 + 0x18].w = r0.w
r0 = r0 << 7
r3 = r4 + r2
flag:c = r4 + r2 u< r4
temp0.d = r0
cond:0 = flag:c
r0 = adc.d(temp0.d, r4, cond:0)
flag:c = adc.d(temp0.d, r4, cond:0) u< temp0.d || (cond:0 && adc.d(temp0.d, r4, cond:0) == temp0.d)
r0 = zx.d([r0 + 0x18].w)
r0 = 0xd
r0 = adc.d(r0, r4, flag:c)
[r0 + 0x18].w = r0.w
r1 = r0 << 7
r1 = r1 u>> 0x16
[r4].d = r0
r1 = r0 << 1
r3 = r1 s>> 0x16
[r2].d = r0
r1 = r0 << 1
r3 = r0 s>> 0x14
[r0].d = r4
r1 = r0 << 1
r1 = r1 s>> 0x16
[r2].d = r0
r1 = r0 << 1
r1 = r4 << 0x12
flag:c = test_bit(r4, 0x20 - 0x12)
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
sp = r5 | 0x458000
[r1].d = r0
r1 = r0 << 1
goto 37 @ 0x32e8

[r0 + 0x10].d = r4
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r4
r1 = r0 << 1
[r0 + 0x14].b = r3.b
r3 = zx.d([r3 + 0x18].w)
unimplemented  {mcrr2 p0, #8, r12, r5, c3}
r1 = zx.d([r0 + 8].w)
unimplemented  {mcrr2 p13, #8, r0, r5, c11}
[r2].d = r4
r1 = r0 << 1
unimplemented  {srsia sp, #2}
r0 = r0
r1 = r1 u>> 0x16
[r2].d = r4
r1 = r0 << 1
r3 = r1 s>> 0x16
[r4].d = r0
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
r9 = r3 ^ r1
r0 = 0x15
r0 = adc.d(r0, r4, flag:c)
r1 = &data_3320
[r1 {&data_3320}].d = r4
r1 = r0 << 1
r9 - r1
undefined

int32_t sub_3336(int32_t arg1, int32_t arg2, uint32_t* arg3, int32_t arg4 @ r5, void* arg5 @ r7)
r7 = zx.d([r7 + 0x1e].w)
unimplemented  {mrrc2 p5, #2, r5, r5, c11}
r4 = zx.d([r7 + 0xe].w)
unimplemented  {mrrc2 p8, #0xa, r1, r5, c1}
r0 = adc.d(r0, r4, flag:c)
[r0 + 0x18].w = r0.w
r0 = r5 << 7
r3 = r4 + r2
flag:c = r4 + r2 u< r4
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
r5 = r1 + r0
flag:c = r1 + r0 u< r1
r0 = adc.d(r0, r4, flag:c)
r3
r5 = r1 s>> 0x10
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
r5 = r1 + r0
flag:c = r1 + r0 u< r1
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
r5 = r2 s>> 0x20
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
temp1.d = r0
r0 = r0 << 0xc
flag:c = test_bit(temp1.d, 0x20 - 0xc)
r0 = 0x15
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
r5 = r2 s>> 0x20
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r1 = &data_3374
[r0].d = r0
r1 = r0 << 1
r0 = sp & not.d(0xc2)
r3 = &data_337c
[r0].d = r0
r1 = r0 << 1
r3 = r1 u>> 0x16
[r1 + 0x10].d = r4
r1 = r0 << 1
r1 = zx.d([r2 + 0x1a].w)
r5 = r2 u>> 0x10
flag:c = test_bit(r2, 0x10 - 1)
r1 = adc.d(r1, r4, flag:c)
[r0 + r0].w = r0.w
if (r0 != 0) then 51 @ &data_33ca+2 else 124 @ 0x3390

[r1].d = r0
r1 = r0 << 1
r3 = r5 << 0x14
[r2].d = r4
r1 = r0 << 1
r3 = r4 u>> 2
flag:c = test_bit(r4, 2 - 1)
temp2.d = r0
cond:0 = flag:c
r0 = adc.d(temp2.d, r4, cond:0)
flag:c = adc.d(temp2.d, r4, cond:0) u< temp2.d || (cond:0 && adc.d(temp2.d, r4, cond:0) == temp2.d)
r0 = zx.d([r0 + 0x18].w)
r5 = r1
temp3.d = r0
cond:1 = flag:c
r0 = adc.d(temp3.d, r4, cond:1)
flag:c = adc.d(temp3.d, r4, cond:1) u< temp3.d || (cond:1 && adc.d(temp3.d, r4, cond:1) == temp3.d)
r0 = zx.d([r0 + 8].w)
r5 = r1
r0 = adc.d(r0, r4, flag:c)
temp0.d = r7
r7 = r7
r5 = r0 s>> 0x20
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x28].w)
r5 = r4
r0 = zx.d([r0 + 0x18].w)
r5 = r2
flag:c = r2 u>= 0
r0 = adc.d(r0, r4, flag:c)
temp0.d = r1
r1 = r1
r2 = r7 + r3
r1 = r1 s>> 0x16
[r3].d = r4
r1 = r0 << 1
r1 = r4 s>> 0x12
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
[r0 + r0].d = r0
r7 = r7 s>> 0x17
[r2 + r1].d = r4
r1 = r0 << 1
r3 = r4 << 0x12
flag:c = test_bit(r4, 0x20 - 0x12)
r1 = adc.d(r1, r4, flag:c)
[r0 + 0x18].w = r0.w
r5 = r7 << 0x10
flag:c = test_bit(r7, 0x20 - 0x10)
r1 = adc.d(r1, r4, flag:c)
r0 = r0 << 4
r5 = lr
r5 = [&data_3648].d
[r7 + 0x1e].w = r4.w
r1 = r5 << 7
r5 = [&data_3648].d
r4 = zx.d([r7 + 0x1e].w)
r5 = r2 s>> 0x10
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r3
r5 = r2 s>> 0x20
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
r5 = r2 s>> 0x10
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r1 = &data_3438
[r2].d = r0
r1 = r0 << 1
undefined

r3 = r7
r3 = &data_3394
[r0 + 0x10].d = r4
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r4
r1 = r0 << 1
[r7 + 0x13].b = r7.b
r1 = zx.d([r1 + 0x18].w)
unimplemented  {mcrr2 p0, #0xc, lr, r5, c1}
r5 = zx.d([r1 + 8].w)
unimplemented  {mcrr2 p13, #8, r0, r5, c11}
[r1].d = r0
r1 = r0 << 1
r5 = [&data_3460].d
r4 = zx.d([r7 + 0xe].w)
r5 = r1 u>> 0x20
flag:c = test_bit(r1, 0x20 - 1)
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
r5 = r2 s>> 0x10
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = r0 << 0xc
r5 = r2 u>> 0x10
flag:c = test_bit(r2, 0x10 - 1)
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
r5 = r2 s>> 0x10
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r1 = &data_33ca+2
goto 51 @ &data_33ca+2

int32_t sub_35a6(int32_t* arg1, char* arg2, int32_t* arg3, int32_t arg4 @ r4, int32_t arg5 @ r6)
r4 = r1 ^ r4 u>> 0x18
r0 = r0
[r1 + r6].b = r1.b
r1 = &data_39a0
[r2].d = r4
r1 = r0 << 1
r3 - r5
r3 = &data_39a8
[r2].d = r4
r1 = r0 << 1
r3 = r1 u>> 0x16
[r0].d = r4
r1 = r0 << 1
<return> tailcall(sub_3948)

int32_t sub_38f6(int32_t arg1, int32_t arg2 @ r4, int32_t arg3 @ r6, void* arg4 @ r7)
r0 = adc.d(r0, r4, flag:c)
[r0 + r4].d = r0
call(sp)
r6 = r6
r3 = &data_3900
[r0 + 0x10].d = r4
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r4
r1 = r0 << 1
[r0 + 0x14].b = r1.b
r3 = zx.d([r7 + 0x18].w)
r5 = r2 << 0x10
flag:c = test_bit(r2, 0x20 - 0x10)
r0 = adc.d(r0, r4, flag:c)
[r0 + 0x18].w = r0.w
r2 = r0 << 7
r1 = r1 s>> 0x16
[r0].d = r4
r1 = r0 << 1
r11 - r1
r4 = zx.d([r7 + 0x1e].w)
r5 = r1 s>> 0x20
flag:c = unimplemented
temp0.d = r0
cond:0 = flag:c
r0 = adc.d(temp0.d, r4, cond:0)
flag:c = adc.d(temp0.d, r4, cond:0) u< temp0.d || (cond:0 && adc.d(temp0.d, r4, cond:0) == temp0.d)
if (flag:c) then 29 @ 0x3928 else 49 @ 0x3926

unimplemented  {mcrr2 p13, #8, r0, r5, c11}
[r0].d = r4
r1 = r0 << 1
r5 = [&data_3940].d
r4 = zx.d([r7 + 0xe].w)
r5 = r1 << 0x10
flag:c = test_bit(r1, 0x20 - 0x10)
temp1.d = r0
cond:1 = flag:c
r0 = adc.d(temp1.d, r4, cond:1)
flag:c = adc.d(temp1.d, r4, cond:1) u< temp1.d || (cond:1 && adc.d(temp1.d, r4, cond:1) == temp1.d)
r0 = zx.d([r0 + 0x18].w)
r0 = 0x15
r0 = adc.d(r0, r4, flag:c)
[r0 + 0x18].w = r0.w
r2 = r0 << 7
r1 = r1 s>> 0x16
[r4].d = r0
r1 = r0 << 1
<return> tailcall(sub_3948)

r0 = zx.d([r7 + 0xe].w)
goto 29 @ 0x3928

int32_t sub_3948(void* arg1, int32_t arg2, int32_t arg3, uint32_t* arg4, int32_t arg5 @ r6, void* arg6 @ r7)
&data_394c - r8
push(r7)
push(r6)
push(r5)
push(r4)
push(r3)
push(r2)
r2 = r1 << 3
r0 = zx.d([r0 + 0x18].w)
unimplemented  {mcrr2 p5, #2, r4, r5, c11}
r4 = zx.d([r7 + 0xe].w)
unimplemented  {mcrr2 p13, #8, r4, r5, c11}
flag:c = r3 u< 0xfc
unimplemented  {mcrr2 p13, #8, r4, sp, c9}
r4 = zx.d([r7 + 0x1e].w)
r5 = r2
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
unimplemented  {mrrc2 p5, #8, r4, r5, c11}
r5 - 0xfc
[r4 + 0x64].d = r7
r0 = r0
r9 - r1
r4 = zx.d([r7 + 0x1e].w)
r5 = zx.d([r4 + r7].b)
[r0 + r7].b = r3.b
unimplemented  {stc p12, c14, [r11], {0x83}}
r1 = &data_39e0
[r3].d = r4
r1 = r0 << 1
if (r1 != 0) then 31 @ 0x3992 else 71 @ 0x3986

r1 = r0 << 1
r3 = r0 u>> 0x14
[r3].d = r4
r1 = r0 << 1
r1 = r1 u>> 0x16
[r3].d = r4
r1 = r0 << 1
[r1 + r6].b = r3.b
r4 = r6 << 0xf
r5 = r2 s>> 0x10
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
r5 = r5 | &data_4580
r0 = r6 << 0xf
r5 = r0 s>> 0x20
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
sp = r5 | 0x45800000
[r7 + 0xe].w = r4.w
r1 = [r0 + 0x5c].d
r1 = r6 << 2
r0 = zx.d([r0 + 8].w)
unimplemented  {mcrr2 p5, #8, r1, sp, c11}
[r4 + 0x10].d = r4
r1 = r0 << 1
r1 = &data_3b14
[r4 + 0x10].d = r4
r1 = r0 << 1
unimplemented  {ldrex r3, [r0, #0x1d8]}
r0 = r0
r3 = r4 << 0x12
flag:c = test_bit(r4, 0x20 - 0x12)
r1 = adc.d(r1, r4, flag:c)
[r0 + 0x18].w = r0.w
r5 = r7 << 0x10
flag:c = test_bit(r7, 0x20 - 0x10)
r1 = adc.d(r1, r4, flag:c)
undefined

r1 = r2 << 1
r3 = &data_398c
[r3 {&data_398c}].d = r4
r1 = r0 << 1
r3 = r1 u>> 0x16
[r3].d = r4
goto 31 @ 0x3992

int32_t sub_3c5e(void* arg1, void* arg2 @ r4, void* arg3 @ r6)
r2 = r6
r3 = &data_3c64
[r0 + 0x10].d = r4
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r4
r1 = r0 << 1
[r0 + 0x10].b = r1.b
r3 = zx.d([r4 + 0x18].w)
unimplemented  {mcrr2 p1, #8, r12, sp, c3}
r1 = zx.d([r0 + 8].w)
unimplemented  {mcrr2 p5, #8, r1, sp, c11}
[r1].d = r0
r1 = r0 << 1
goto 15 @ 0x4204

r1 = r0
r0 = zx.d([r0 + 0x18].w)
unimplemented  {mrrc p5, #2, r5, r5, c11}
r0 = zx.d([r5 + 0xe].w)
unimplemented  {mrrc p5, #8, r4, r5, c11}
r5 - 0xf8
r5 = [r4 + 0x3c].d  {"\x1bEZE6F"}
r0 = r0
r9 - r1
r0 = zx.d([r7 + 0x1e].w)
unimplemented  {mcrr2 p13, #0, r4, sp, c3}
r0 = zx.d([r6 + 0xe].w)
unimplemented  {mcrr2 p5, #8, r1, sp, c11}
[r0].d = r4
r1 = r0 << 1
[r1 + r6].b = r1.b
r4 = zx.d([r5 + 0x1e].w)
jump(0xc49c3c)

int32_t sub_42e0(int32_t arg1, int32_t arg2, uint32_t* arg3 @ r4, int32_t arg4 @ r5)
sp = r5 | 0x45800000
r3 - 0xe8
r5 = r1 << 0x10
flag:c = test_bit(r1, 0x20 - 0x10)
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
unimplemented  {strex r5, r1, [sp, #0x22c]}
[r4].d = r0
r1 = r0 << 1
r3 = r0 s>> 0x14
[r4].d = r0
r1 = r0 << 1
r1 = r1 s>> 0x16
[r4].d = r0
r1 = r0 << 1
r1 = r4 << 0x12
flag:c = test_bit(r4, 0x20 - 0x12)
r0 = adc.d(r0, r4, flag:c)
r5
undefined

int32_t sub_4466(int32_t arg1, int32_t* arg2, int32_t* arg3, int32_t arg4 @ r7)
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r7
r1 = r1 + 0xc
r1 = zx.d([r0 + 8].w)
r5 = sp | 0x11600000
r3 - 0xfc
unimplemented  {ldrex r5, [r5, #0x224]}
r1 = &data_4868
[r2].d = r0
r1 = r0 << 1
r3 - r5
r3 = &data_4860
[r2].d = r0
r1 = r0 << 1
&data_4486 - r8
<return> tailcall(sub_4c78)

int32_t sub_4530(int32_t arg1, char* arg2, int32_t* arg3, uint32_t* arg4, int32_t arg5 @ r6, int32_t arg6 @ r7)
temp0.d = r2
[temp0.d].d = r0
[temp0.d + 4].d = r7
r2 = r2 + 8
r4 = zx.d([r3 + 0x28].w)
r0 = r0
[r1 + r6].b = r1.b
r1 = &data_48fc
[r3].d = r4
r1 = r0 << 1
r3 = r0 << 0x14
[r1].d = r0
r1 = r0 << 1
r3 = r4 + 2
flag:c = r4 u>= 0xfffffffe
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
r5 = r1 s>> 0x20
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = r0 << 0xc
r5 = r1 s>> 0x10
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
r5 = r1 s>> 0x20
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
unimplemented  {mrrc2 p13, #8, r0, r5, c11}
[r3].d = r0
r1 = r0 << 1
<return> tailcall(sub_4b0e)

int32_t sub_46f8(int32_t* arg1, char* arg2, int32_t* arg3, int32_t arg4 @ r4, int32_t arg5 @ r6, void* arg6 @ r7, int32_t arg7)
r3 = r1 ^ lr << 0xa
r0 = r0
[r1 + r6].b = r1.b
r1 = &data_4ab4
[r0].d = r4
r1 = r0 << 1
temp0.d = r0
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r7
r3 = &data_4710
[r0].d = r4
r1 = r0 << 1
r3 = r1 u>> 0x16
[r2].d = r4
r1 = r0 << 1
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r7
r1 = r1 + 8
[r1 + 0x34].d = r3
r0 = r0
r1 = r1 u>> 0x16
[r2].d = r4
r1 = r0 << 1
r3 = r1 s>> 0x16
[r2].d = r4
r1 = r0 << 1
r5 = r1 ^ r6 << 0xc
r0 = r0
r1 = r1 s>> 0x16
[r2].d = r4
r1 = r0 << 1
r11 - r1
temp0.d = r1
[temp0.d].d = r3
[temp0.d + 4].d = r4
[temp0.d + 8].d = r5
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r1 = r1 + 0x14
r0 = r4 s>> 0x17
flag:c = r9 u< r1
r0 = zx.d([r7 + 0x1e].w)
r4 = 0xd
r1 = adc.d(r1, r4, flag:c)
[r0 + r4].d = r0
r3 = r1 s>> 0x16
[r2 + 0x10].d = r4
r1 = r0 << 1
r1 = &data_4894
[r2 + 0x10].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
r0 = zx.d([r2 + 0x1a].w)
r4 = 0xd
r1 = adc.d(r1, r4, flag:c)
[r0 + r4].d = r0
r3 = r1 s>> 0x16
[r4 + 0x10 {&data_1d}].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
unimplemented  {vqshl.U16 d18, d5, d2}
r0 = adc.d(r0, r2, flag:c)
r3 = &data_4764
[r0 + 0x10].d = r4
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r4
r1 = r0 << 1
[r0 + 0x14].b = r3.b
r5 = zx.d([r4 + 0x18 {sub_13414-0x133ef}].w)
unimplemented  {mcrr p5, #0, r4, r5, c3}
r0 = zx.d([r7 + 0xe].w)
unimplemented  {mcrr p13, #8, r0, r5, c11}
[r0].d = r4
r1 = r0 << 1
r3 = r5 u>> 0x14
[r3 {&data_0}].d = r0
r1 = r0 << 1
r1 = r1 u>> 0x16
[r0].d = r4
r1 = r0 << 1
r7 = r0 << 0x17
[r1].d = r4
r1 = r0 << 1
r6 = [sp + 0x9c {arg7}].d
r0 = r0
r7 = r0 << 0x17
[r1].d = r0
r1 = r0 << 1
r0 = r0 - 0xdb
r0 = r0
r3 = r1 s>> 0x16
[r3].d = r4
r1 = r0 << 1
r3 = r5 s>> 0x14
[r1].d = r0
r1 = r0 << 1
r1 = r1 s>> 0x16
[r3 {&data_0}].d = r4
r1 = r0 << 1
r11 - r1
r4 = r7 << 0x17
r2 = r2 + r5
r0 = r0
r9 - r1
r4 = zx.d([r7 + 0x1e].w)
unimplemented  {mcrr p13, #8, r0, sp, c9}
[r0].d = r4
r1 = r0 << 1
<return> tailcall(sub_42e0)

int32_t sub_48ec(int32_t arg1, int32_t arg2, uint32_t arg3, void* arg4, int32_t arg5 @ r4, void* arg6 @ r6, int32_t* arg7 @ r7)
r11 - r1
r3 - 0xf4
r5 = r0 << 0x10
flag:c = test_bit(r0, 0x20 - 0x10)
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
r5 = r5 | 0x1160
r4 = zx.d([r6 + 0x1e].w)
r5 = r1 u>> 0x10
flag:c = test_bit(r1, 0x10 - 1)
temp1.d = r0
cond:0 = flag:c
r0 = adc.d(temp1.d, r4, cond:0)
flag:c = adc.d(temp1.d, r4, cond:0) u< temp1.d || (cond:0 && adc.d(temp1.d, r4, cond:0) == temp1.d)
if (flag:c) then 15 @ 0x4904 else 59 @ 0x4902

r5 = r5 | &data_4580
r5 - 0xf8
unimplemented  {vst4.8 {d0, d1, d2, d3}, [r6], r0}
r9 - r1
r0 = zx.d([r7 + 0x1e].w)
r5 = r1 s>> 0x20
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
r5 = sp | 0x1160
r4 = r7 << 0xf
unimplemented  {mrrc2 p5, #8, r5, r5, c9}
r4 = zx.d([r7 + 0x1e].w)
r5 = r5 | 0xab00
r4 = zx.d([r7 + 0xe].w)
sp = r5 | &data_4580
r0 = r7 << 0xf
unimplemented  {mcrr2 p13, #8, r4, sp, c9}
temp0.d = r7
[temp0.d].d = r3
[temp0.d + 4].d = r4
[temp0.d + 8].d = r5
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r7 = r7 + 0x14
r5 = r0
flag:c = r0 u>= 0
r1 = adc.d(r1, r4, flag:c)
r0 = r0
r0 = r0
r11 = r0 + &data_4942
r5 = r2
flag:c = r2 u>= 0
r1 = adc.d(r1, r4, flag:c)
[r0 + 0x18].w = r0.w
r2 = r0 << 7
r1 = r1 s>> 0x16
[r3 + 0x10].d = r4
r1 = r0 << 1
r5 = r5 - 0x83
[r3 + 0x10].d = r4
r1 = r0 << 1
r3 = r0 u>> 0x1c
undefined

r2 = zx.d([r4 + 0xe].w)
goto 15 @ 0x4904

int32_t sub_4a3a(int32_t, int32_t, int32_t, char arg4, int32_t arg5 @ r4, char* arg6 @ r5, void* arg7 @ r7)
[r5 + r4].b = r3.b
r4 = zx.d([r7 + 0xe].w)
jump([r5 - 0xe9].d)

int32_t sub_4b0e(int16_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4 @ r5, int32_t arg5 @ r6, int32_t* arg6 @ r7)
r4 = 0x15
temp1.d = r1
cond:0 = flag:c
r1 = adc.d(temp1.d, r4, cond:0)
flag:c = adc.d(temp1.d, r4, cond:0) u< temp1.d || (cond:0 && adc.d(temp1.d, r4, cond:0) == temp1.d)
[r0 + r0].w = r0.w
r4 = 0xa1
r1 = adc.d(r1, r4, flag:c)
[r0 + r0].d = r0
r5 - 0xe8
r4 = r4
r3 = &data_4b20
[r0 + 0x10].d = r4
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r4
r1 = r0 << 1
[r0 + 0x10].b = r3.b
r1 = zx.d([r2 + 0x1a].w)
unimplemented  {mcrr2 p1, #8, r12, sp, c3}
r1 = zx.d([r0 + 8].w)
unimplemented  {mcrr2 p5, #8, r1, sp, c11}
[r0].d = r0
r1 = r0 << 1
r3 = r5 s>> 0x14
[r1].d = r0
r1 = r0 << 1
r1 = r1 s>> 0x16
[r0].d = r0
r1 = r0 << 1
r11 - r1
r0 = r7 << 0x17
r2 = r2 - 0xde
r0 = r0
r9 - r1
r0 = zx.d([r7 + 0x1e].w)
[sp {arg_0}].d = lr
sp = sp - 0x81
r5 = sp + 0x130 {arg_af}
r0 = r0
r5 = [&data_4d84].d
temp0.d = r7
[temp0.d].d = r3
[temp0.d + 4].d = r4
[temp0.d + 8].d = r5
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r7 = r7 + 0x14
r5 = r0 u>> 0x20
flag:c = test_bit(r0, 0x20 - 1)
r0 = adc.d(r0, r4, flag:c)
r0 = r0
r4 = r1
r0 = zx.d([r0 + 0x18].w)
undefined

int32_t sub_4be4(int32_t arg1, int32_t arg2, int32_t* arg3, int32_t* arg4, int32_t arg5 @ r4, int32_t arg6 @ r5, int32_t arg7 @ r6, void* arg8 @ r7)
goto 1 @ 0x4d6a

flag:c = r5 u< 0x2e
r0 = r0
r5 = [&data_4f94].d
r0 = zx.d([r7 + 0x1e].w)
r0 = 0x15
temp1.d = r0
cond:0 = flag:c
r0 = adc.d(temp1.d, r4, cond:0)
flag:c = adc.d(temp1.d, r4, cond:0) u< temp1.d || (cond:0 && adc.d(temp1.d, r4, cond:0) == temp1.d)
[r0 + 8].w = r0.w
temp0.d = r2
[temp0.d].d = r1
[temp0.d + 4].d = r6
[temp0.d + 8].d = r7
r2 = r2 + 0xc
r1 = r4
r0 = zx.d([r0 + 8].w)
r0 = 0x15
r0 = adc.d(r0, r4, flag:c)
r1 = &data_4d84
[r3].d = r0
r1 = r0 << 1
r3 - r0
r3 = &data_515c
[r3 {&data_515c}].d = r0
r1 = r0 << 1
r5 = [&data_4fc0].d
[r7 + 0xe].w = r4.w
r2 = 0xc1
r2 = r0 << 3
r0 = zx.d([r0 + 8].w)
unimplemented  {mcrr2 p5, #8, r1, sp, c11}
[r2 + 0x10].d = r0
r1 = r0 << 1
r1 = &data_4eec
[r2 + 0x10].d = r0
r1 = r0 << 1
unimplemented  {ldrex r2, [r0, #0x278]}
r0 = r0
r3 = r4 << 0x12
flag:c = test_bit(r4, 0x20 - 0x12)
r1 = adc.d(r1, r4, flag:c)
[r0 + 0x18].w = r0.w
r5 = r7 << 0x10
flag:c = test_bit(r7, 0x20 - 0x10)
r1 = adc.d(r1, r4, flag:c)
r0 = r0 << 8
r4 = r4 + 0x74
[r1 + r6].b = r3.b
r0 = zx.d([r7 + 0x1e].w)
r5 = r1 s>> 0x10
flag:c = unimplemented
temp2.d = r0
cond:1 = flag:c
r0 = adc.d(temp2.d, r4, cond:1)
flag:c = adc.d(temp2.d, r4, cond:1) u< temp2.d || (cond:1 && adc.d(temp2.d, r4, cond:1) == temp2.d)
if (flag:c) then 58 @ 0x4dc8 else 59 @ 0x4dc6

undefined

r2 = zx.d([r7 + 0xe].w)
undefined

int32_t sub_4c78(void* arg1, void* arg2 @ r4, void* arg3 @ r6, void* arg4 @ r7, void* arg5)
r2 = r4
r3 = &data_4c7c
[r0 + 0x10].d = r4
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r4
r1 = r0 << 1
[r7 + 0x13].b = r7.b
r7 = zx.d([r4 + 0x18].w)
unimplemented  {mcrr2 p5, #2, r4, r5, c11}
r4 = zx.d([r7 + 0xe].w)
unimplemented  {mcrr2 p13, #8, r0, r5, c11}
[r1].d = r0
r1 = r0 << 1
unimplemented  {srsia sp, #1}
r5 = r1 u>> 0x20
flag:c = test_bit(r1, 0x20 - 1)
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
r5 = r2 s>> 0x20
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
[r0 + 0x18].w = r0.w
r2 = r0 << 7
r1 = r1 s>> 0x16
[r2].d = r0
r1 = r0 << 1
r1 = r4 u>> 0x12
flag:c = test_bit(r4, 0x12 - 1)
r0 = adc.d(r0, r4, flag:c)
flag:c = r3 u< 0
r12 = r5 | 0x518000
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 0x18].w)
unimplemented  {mcrr2 p13, #2, r4, sp, c11}
r0 = zx.d([r7 + 0xe].w)
unimplemented  {mcrr2 p5, #8, r5, sp, c11}
r3 - 0xf8
r5 = r5 | 0x1120
r0 = zx.d([r7 + 0x1e].w)
unimplemented  {mcrr2 p0, #8, r12, r5, c3}
r1 = zx.d([r0 + 8].w)
unimplemented  {mcrr2 p13, #8, r4, r5, c11}
r4 = r6 << 0xf
unimplemented  {mcrr2 p13, #8, r4, sp, c9}
r4 = zx.d([r6 + 0x1e].w)
r5 = r2 u>> 0x20
flag:c = test_bit(r2, 0x20 - 1)
r0 = adc.d(r0, r4, flag:c)
[r0 + 8].w = r0.w
r2 = [sp + 0x308 {arg5}].d
r6 = r6 << 1
r0 = zx.d([r0 + 8].w)
r5 = r2 u>> 0x20
flag:c = test_bit(r2, 0x20 - 1)
r0 = adc.d(r0, r4, flag:c)
r1 = &data_4cf4
[r4 + 0x10].d = r4
r1 = r0 << 1
r0 = zx.d([r2 + 0x1a].w)
r5 = r1 s>> 0x20
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
[r0 + r4].d = r0
r3 = r1 s>> 0x16
[r4 + 0x10].d = r4
r1 = r0 << 1
r1 = &data_4e50
[r4 + 0x10].d = r4
r1 = r0 << 1
unimplemented  {ldrex r2, [r0, #0x100]}
r0 = r0
r3 = r4 << 0x12
flag:c = test_bit(r4, 0x20 - 0x12)
r1 = adc.d(r1, r4, flag:c)
[r0 + 0x18].w = r0.w
r5 = r7 << 0x10
flag:c = test_bit(r7, 0x20 - 0x10)
r1 = adc.d(r1, r4, flag:c)
undefined

int32_t sub_5462(int32_t arg1, int32_t arg2, int32_t arg3)
r1 = r1 s>> 0x16
[r1].d = r0
r1 = r0 << 1
r11 - r1
r3 - 0xf0
r5 = r0 s>> 0x10
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
r5 = r5 | 0x63800000
goto 11 @ 0x5c4a

r5 = r5 - 0xe8
r4 = r2 << 2
unimplemented  {srsdb sp, #4}
r0 = r0
r0 = zx.d([r5 + 0x3e].w)  {"ZE6F"}
r4 = r2 << 2
unimplemented  {srsdb sp, #0xe}
r0 = r0
r0 = zx.d([r5 + 0x2e].w)
r4 = r2 << 2
unimplemented  {srsdb sp, #0x18}
r0 = r0
[r5 + 0x3e].w = r0.w  {"ZE6F"}
r4 = r2 << 2
r0 = zx.d([r0 + 0x18].w)
r5 = zx.d([r4 + r7].b)
temp0.d = r4
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
r7 - 0xf1
r5 = 0x48
r4 - 0x48
r4 = &data_5f18
[r4 + 0x38 {&data_5f50}].d = r4
r1 = r4 << 3
flag:z = (r4 & 0x1fffffff) == 0
flag:c = test_bit(r4, 0x20 - 3)
r4 = &data_5f40
r4 = &data_5f20
goto 86 @ 0x5f5a

r4 = sp + 0x384 {arg_384}
if (flag:z || flag:c) then 88 @ 0x5faa else 91 @ 0x5f5e

r4 = &data_6058
r4 = &data_6240
if (not(flag:z)) then 96 @ &data_6068 else 97 @ 0x5fb0

[sp + 0x150 {arg_150}].d = r5
r3 = r0 + r6
flag:z = r0 == neg.d(r6)
flag:c = r0 + r6 u< r0
if (flag:z) then 107 @ &data_6054+2 else 109 @ 0x5f64

<return> tailcall(sub_62ca)

temp0.d = r4
r3 = [temp0.d {&data_6240}].d
r4 = [temp0.d + 4 {&data_6244}].d
r6 = [temp0.d + 8 {&data_6248}].d
temp0.d = r4
[temp0.d {0x27482ff1}].d = r6
[temp0.d + 4 {0x27482ff5}].d = r7
r4 = r4 + 8
r4 = sub_634c
<return> tailcall(sub_6218)

r4 = sp + 0x3c4 {arg_3c4}
if (flag:z || flag:c) then 114 @ 0x60a6 else 116 @ 0x605a

call(0xff4aa1b2)
[sp + 0x150 {arg_150}].d = r5
r3 = r0 + r6
cond:0 = r0 != neg.d(r6)
if (r0 == neg.d(r6)) then 120 @ 0x6060 else 125 @ 0x5f6e

r1 = [r5 + r3].d
goto 132 @ 0x62fe

[sp + 0xe0 {arg_e0}].d = r5
r3 = r0 + r6
cond:2 = r0 != neg.d(r6)
if (r0 == neg.d(r6)) then 139 @ 0x6152 else 120 @ 0x6060

r7 = &data_62f4
r0 = r0 + 0xf1
r6 = zx.d([r6 + r7].w)
r0 = [&data_63ac].d
goto 96 @ &data_6068

r4 = [&data_6200].d
r6 = &data_6194
r4 = &data_6204
[r4 {&data_6204}].d = r7
r0 = zx.d([r5 + r6 {&data_61dc}].w)
r1 = [r2 + r3].d
if (cond:0) then 143 @ &data_6034 else 166 @ 0x5f7c

r7 = ror.d(r7, r5)
temp1.d = r0
r0 = r0 + 0x99
cond:1 = temp1.d s<= -0x99
[r7 + 0x13].b = r4.b
[r0].w = r4.w
if (cond:1) then 192 else 193 @ 0x630a

[r4 + r3].b = r1.b
r4 = &data_6434
r4 = &data_63e8
if (cond:2) then 202 @ 0x6212 else 205 @ 0x615a

r1 = r4 << 3
r4 = [&data_6408].d
r4 = &data_61b4
r4 = &data_62cc
[r4 {&data_62cc}].d = r7
r1 - 0xa0
r1 = r4 << 3
r4 = 0xf4
[r1 + r3].b = r1.b
r7 - 0x6a
r1 = zx.d([r5 + r3].b)
r5 = 0xf5
r0 = r0 - 0xd9
[r2 + 0x1c].w = r5.w
r1 = zx.d([r3].b)
temp0.d = r0
[temp0.d {&data_5f10}].d = r4
[temp0.d + 4 {&data_5f14}].d = r6
[temp0.d + 8 {&data_5f18}].d = r7
r0 = r0 + 0xc
flag:z = r7 == 0xf5
flag:c = r7 u< 0xf5
goto 107 @ &data_6054+2

r7 - 0x5c
r4 = sp + 0x384 {arg_384}
r4 = [&data_6354].d
r7 = &data_6334
r4 = sub_6218
[r4 {sub_6218}].d = r7
temp0.d = r2
[temp0.d].d = r3
[temp0.d + 4].d = r5
[temp0.d + 8].d = r7
r2 = r2 + 0xc
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r5
r1 = r1 + 0xc
r0 = zx.d([r1 + 0x11].b)
r7 - 0xb7
unimplemented  {vst4.16 {d31, d1, d3, d5}, [r1:0x80], r7}
r0 = [&data_6054].d
r0 = [&data_6034].d
[r5 + 0x38 {&data_80}].d = r0
r1 = [r4 + r3].d
r4 = &data_628c
r4 = &data_6230
goto 218 @ 0x626a

jump(0xab61e)

unimplemented  {sbfx sp, r5, #0x12, #1}
r6 = sp + 0x3cc {arg_3cc}
r11 - r1
r3 = r3 - 0xf7
r5 = r0 u>> 0x11
r6 = r6 - 0x73 {arg_359}
r10 - r1
r0 = zx.d([r2].w)
undefined

r5 - 0xa8
r1 = [r4 + r3].d
goto 229 @ 0x6478

temp0.d = r4
r3 = [temp0.d {&data_63e8}].d
r4 = [temp0.d + 4 {&data_63ec}].d
r6 = [temp0.d + 8 {&data_63f0}].d
temp0.d = r4
[temp0.d {0x78e92fa4}].d = r2
[temp0.d + 4 {0x78e92fa8}].d = r4
[temp0.d + 8 {0x78e92fac}].d = r5
[temp0.d + 0xc {0x78e92fb0}].d = r6
[temp0.d + 0x10 {0x78e92fb4}].d = r7
r4 = r4 + 0x14
r4 = &data_64f4
<return> tailcall(sub_63c2)

r1 = zx.d([r2 + r3].b)
r1 = r3 << 0x13
temp0.d = r2
[temp0.d].d = r1
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r6
[temp0.d + 0x14].d = r7
r2 = r2 + 0x18
<return> tailcall(sub_64ce)

r2 = &data_67bc
r5 = 0xc2
r1 = zx.d([r5 + r3].b)
r1 = 0x52
r7 = 0
undefined

int32_t sub_55fa(int32_t arg1, int32_t* arg2 @ r4, void* arg3 @ r7)
r1 = &data_55fc
[r4].d = r0
r1 = r0 << 1
r3 - r5
r3 = &data_59f4
[r4].d = r0
r1 = r0 << 1
r5 = [&data_5838].d
r3 - 0xfc
r5 = r1 << 0x10
flag:c = test_bit(r1, 0x20 - 0x10)
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
unimplemented  {mcrr2 p5, #8, r1, sp, c11}
[r3 {&data_59f4}].d = r0
goto 16 @ 0x5618

r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
r5 = [&data_5848].d
if (flag:c) then 16 @ 0x5618 else 20 @ 0x561e

r2 = zx.d([r4 + 0xe].w)
r5 = r2 + r0
flag:c = r2 + r0 u< r2
r0 = adc.d(r0, r4, flag:c)
[r0 + 8].w = r0.w
unimplemented  {ldc2l p0, c0, [sp], #-0x28c}
r0 = r0
r4 = r7 s>> 0x15
r1 = r4 u>> 2
flag:c = test_bit(r4, 2 - 1)
r0 = adc.d(r0, r4, flag:c)
r3
r5 = r0
flag:c = r0 u>= 0
r0 = adc.d(r0, r4, flag:c)
r3 = &data_563c
[r1].d = r0
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
[r5 + 0x2e].w = r1.w
r0 = r0
r0 = zx.d([r0 + 0x18].w)
r4 = 0xd
r1 = adc.d(r1, r4, flag:c)
[r0 + r4].d = r0
r3 = r1 s>> 0x16
[r2 + 0x10].d = r4
r1 = r0 << 1
r1 = &data_579c
[r2 + 0x10].d = r0
r1 = r0 << 1
r0 = zx.d([r2 + 0x1a].w)
r5 = r1 s>> 0x10
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
[r0 + r4].d = r0
r3 = r1 s>> 0x16
[r2 + 0x10].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
unimplemented  {vqshl.U16 d18, d5, d2}
r0 = adc.d(r0, r2, flag:c)
r3 = &data_566c
[r0 + 0x10].d = r4
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r4
r1 = r0 << 1
[r7 + 0x13].b = r7.b
r1 = &data_5788
[r3 {&data_566c}].d = r4
r1 = r0 << 1
r3 - r5
r3 = &data_5a64
[r3 {&data_5a64}].d = r4
r1 = r0 << 1
r5 = [&data_58b4].d
[r7 + 0xe].w = r0.w
r1 = r0 << 0xb
r1 = r4
r0 = zx.d([r0 + 8].w)
undefined

int32_t j_sub_5d9e()
<return> tailcall(sub_5d9e)

int32_t sub_59da(int32_t arg1, int32_t* arg2, uint32_t* arg3, int32_t arg4 @ r4, int32_t arg5 @ r5, int32_t* arg6 @ r7)
r3 = r5 << 0x14
[r1].d = r0
r1 = r0 << 1
r9 - r1
r0 = zx.d([r7 + 0x1e].w)
r5 = r1 s>> 0x20
flag:c = unimplemented
r0 = adc.d(r0, r4, flag:c)
r0 = zx.d([r0 + 8].w)
unimplemented  {mcrr2 p5, #0xc, r0, sp, c7}
[r0].d = r0
r1 = r0 << 1
if (r1 != 0) then 13 @ 0x5ad6 else 16 @ &data_59f4

[r7 + r3].d = r0
r0 = r5 s>> 0x1f
undefined

r0 = r0
r3 = r1 s>> 0x16
[r2].d = r0
r1 = r0 << 1
r3 = r5 s>> 0x14
[r1].d = r4
r1 = r0 << 1
r1 = r1 s>> 0x16
[r2].d = r0
r1 = r0 << 1
r1 = r4 s>> 2
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
[r0 + r0].d = r0
r3 = r1 u>> 0x16
[r2 + 0x10].d = r4
r1 = r0 << 1
r1 = zx.d([r2 + 0x1a].w)
r5 = r2 s>> 0x20
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
[r0 + r0].w = r0.w
r1 = r4 s>> 2
flag:c = unimplemented
r1 = adc.d(r1, r4, flag:c)
[r0 + r0].d = r0
r3 - 0xe8
r5 = r2
r3 = &data_5a28
[r0 + 0x10].d = r4
r1 = r0 << 1
r5 = r5 - 0x83
[r0 + 0x10].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
[r0 + 0x14].b = r2.b
r0 = zx.d([r5 + 0x18].w)
unimplemented  {mcrr2 p1, #8, r12, sp, c1}
r1 = [sp + 0x1f0 {arg_1f0}].d
r0 = r0
r5 = [&data_5c64].d
r4 = zx.d([r7 + 0x1e].w)
r0 = 0x15
r0 = adc.d(r0, r4, flag:c)
[r0 + 0x18].w = r0.w
r2 = r5 << 7
r1 = r1 s>> 0x16
[r4].d = r0
r1 = r0 << 1
r1 = r4 << 2
flag:c = test_bit(r4, 0x20 - 2)
r0 = adc.d(r0, r4, flag:c)
r0 = r0 << 0xc
undefined

int32_t sub_5a80(int16_t arg1, void* arg2 @ r7)
r5 = [&data_5cb0].d
[r7 + 0x1e].w = r0.w
r1 = r5 << 7
r5 = [&data_5cac].d
[r7 + 0xe].w = r0.w
undefined

int32_t sub_5adc(int32_t arg1, void* arg2 @ r7)
[r7 + 0x1e].w = r7.w
r4 = r0 << 0x13
<return> tailcall(sub_55fa)

int32_t sub_5b70(int32_t arg1, int32_t, int32_t arg3)
r5 = r2 << 2
unimplemented  {srsdb sp, #0xc}
r0 = r0
<return> tailcall(sub_634c)

int32_t sub_5b7a(int32_t arg1, int32_t arg2, int32_t arg3, int32_t* arg4 @ r7, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9, int32_t* arg10)
r5 = r2 << 2
unimplemented  {srsdb sp, #0x1a}
r0 = r0
if (r0 != 0) then 4 @ 0x5b56 else 15 @ 0x5b84

[sp + 0x58 {arg_58}].d = r5
r0 = r0
r0 = r5 s>> 0x17
r5 = r2 << 2
unimplemented  {srsdb sp, #0x18}
r0 = r0
r0 = r5 u>> 0x1f
r5 = r2 << 2
unimplemented  {srsdb sp, #0xe}
r0 = r0
undefined

r5 = r2 << 2
unimplemented  {srsdb sp, #8}
r0 = r0
if (1) then 19 @ 0x5b8e else 21 @ 0x5b90

r5 = r2 << 2
goto 21 @ 0x5b90

unimplemented  {srsdb sp, #0xa}
r0 = r0
if (r0 == 0) then 24 @ 0x5bd4 else 59 @ 0x5b98

r4 = r2 << 2
unimplemented  {srsdb sp, #0x18}
r0 = r0
r0 = r5 - 7
r5 = r2 << 2
unimplemented  {srsdb sp, #0x1e}
r0 = r0
r5 = [sp + 0x3a0 {arg10}].d
r4 = r2 << 2
unimplemented  {srsdb sp, #0x1c}
r0 = r0
[sp + 0x3a0 {arg10}].d = r7
r4 = r2 << 2
unimplemented  {srsdb sp, #0x16}
r0 = r0
[sp + 0x3a0 {arg10}].d = r5
r4 = r2 << 2
unimplemented  {srsdb sp, #0x14}
r0 = r0
temp0.d = r7
r3 = [temp0.d].d
r5 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r2 << 2
unimplemented  {srsdb sp, #0xe}
r0 = r0
unimplemented  {stcl p0, c0, [r8, #0x250]!}
unimplemented  {srsdb sp, #8}
r0 = r0
[r5 + 0x3e].w = r0.w  {"ZE6F"}
r4 = r2 << 2
unimplemented  {srsdb sp, #6}
r0 = r0
if (r0 == 0) then 71 @ 0x5c60 else 137

r5 = r2 << 2
unimplemented  {srsdb sp, #8}
r0 = r0
r7 = [sp + 0x3a0 {arg10}].d
r5 = r2 << 2
unimplemented  {srsdb sp, #2}
r0 = r0
r3 = pop
r5 = pop
r6 = pop
r7 = pop
<return> jump(pop)

r4 = r2 << 2
unimplemented  {srsdb sp, #0x18}
r0 = r0
[r5 + 0x3e].w = r0.w  {"ZE6F"}
r4 = r2 << 2
r0 = zx.d([r0 + 0x18].w)
r5 = zx.d([r4 + r7].b)
temp0.d = r4
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
r7 - 0xf1
r5 = 0x48
r4 - 0x48
r4 = &data_5f18
[r4 + 0x38 {&data_5f50}].d = r4
r1 = r4 << 3
flag:z = (r4 & 0x1fffffff) == 0
flag:c = test_bit(r4, 0x20 - 3)
r4 = &data_5f40
r4 = &data_5f20
goto 138 @ 0x5f5a

<return> tailcall(sub_5c24)

r4 = sp + 0x384 {arg_384}
if (flag:z || flag:c) then 140 @ 0x5faa else 143 @ 0x5f5e

r4 = &data_6058
r4 = &data_6240
if (not(flag:z)) then 148 @ &data_6068 else 149 @ 0x5fb0

[sp + 0x150 {arg_150}].d = r5
r3 = r0 + r6
flag:z = r0 == neg.d(r6)
flag:c = r0 + r6 u< r0
if (flag:z) then 159 @ &data_6054+2 else 161 @ 0x5f64

<return> tailcall(sub_62ca)

temp0.d = r4
r3 = [temp0.d {&data_6240}].d
r4 = [temp0.d + 4 {&data_6244}].d
r6 = [temp0.d + 8 {&data_6248}].d
temp0.d = r4
[temp0.d {0x27482ff1}].d = r6
[temp0.d + 4 {0x27482ff5}].d = r7
r4 = r4 + 8
r4 = sub_634c
<return> tailcall(sub_6218)

r4 = sp + 0x3c4 {arg_3c4}
if (flag:z || flag:c) then 166 @ 0x60a6 else 168 @ 0x605a

call(0xff4aa1b2)
[sp + 0x150 {arg_150}].d = r5
r3 = r0 + r6
cond:0 = r0 != neg.d(r6)
if (r0 == neg.d(r6)) then 172 @ 0x6060 else 177 @ 0x5f6e

r1 = [r5 + r3].d
goto 184 @ 0x62fe

[sp + 0xe0 {arg_e0}].d = r5
r3 = r0 + r6
cond:2 = r0 != neg.d(r6)
if (r0 == neg.d(r6)) then 191 @ 0x6152 else 172 @ 0x6060

r7 = &data_62f4
r0 = r0 + 0xf1
r6 = zx.d([r6 + r7].w)
r0 = [&data_63ac].d
goto 148 @ &data_6068

r4 = [&data_6200].d
r6 = &data_6194
r4 = &data_6204
[r4 {&data_6204}].d = r7
r0 = zx.d([r5 + r6 {&data_61dc}].w)
r1 = [r2 + r3].d
if (cond:0) then 195 @ &data_6034 else 218 @ 0x5f7c

r7 = ror.d(r7, r5)
temp1.d = r0
r0 = r0 + 0x99
cond:1 = temp1.d s<= -0x99
[r7 + 0x13].b = r4.b
[r0].w = r4.w
if (cond:1) then 244 else 245 @ 0x630a

[r4 + r3].b = r1.b
r4 = &data_6434
r4 = &data_63e8
if (cond:2) then 254 @ 0x6212 else 257 @ 0x615a

r1 = r4 << 3
r4 = [&data_6408].d
r4 = &data_61b4
r4 = &data_62cc
[r4 {&data_62cc}].d = r7
r1 - 0xa0
r1 = r4 << 3
r4 = 0xf4
[r1 + r3].b = r1.b
r7 - 0x6a
r1 = zx.d([r5 + r3].b)
r5 = 0xf5
r0 = r0 - 0xd9
[r2 + 0x1c].w = r5.w
r1 = zx.d([r3].b)
temp0.d = r0
[temp0.d {&data_5f10}].d = r4
[temp0.d + 4 {&data_5f14}].d = r6
[temp0.d + 8 {&data_5f18}].d = r7
r0 = r0 + 0xc
flag:z = r7 == 0xf5
flag:c = r7 u< 0xf5
goto 159 @ &data_6054+2

r7 - 0x5c
r4 = sp + 0x384 {arg_384}
r4 = [&data_6354].d
r7 = &data_6334
r4 = sub_6218
[r4 {sub_6218}].d = r7
temp0.d = r2
[temp0.d].d = r3
[temp0.d + 4].d = r5
[temp0.d + 8].d = r7
r2 = r2 + 0xc
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r5
r1 = r1 + 0xc
r0 = zx.d([r1 + 0x11].b)
r7 - 0xb7
unimplemented  {vst4.16 {d31, d1, d3, d5}, [r1:0x80], r7}
r0 = [&data_6054].d
r0 = [&data_6034].d
[r5 + 0x38 {&data_80}].d = r0
r1 = [r4 + r3].d
r4 = &data_628c
r4 = &data_6230
goto 270 @ 0x626a

jump(0xab61e)

unimplemented  {sbfx sp, r5, #0x12, #1}
r6 = sp + 0x3cc {arg_3cc}
r11 - r1
r3 = r3 - 0xf7
r5 = r0 u>> 0x11
r6 = r6 - 0x73 {arg_359}
r10 - r1
r0 = zx.d([r2].w)
undefined

r5 - 0xa8
r1 = [r4 + r3].d
goto 281 @ 0x6478

temp0.d = r4
r3 = [temp0.d {&data_63e8}].d
r4 = [temp0.d + 4 {&data_63ec}].d
r6 = [temp0.d + 8 {&data_63f0}].d
temp0.d = r4
[temp0.d {0x78e92fa4}].d = r2
[temp0.d + 4 {0x78e92fa8}].d = r4
[temp0.d + 8 {0x78e92fac}].d = r5
[temp0.d + 0xc {0x78e92fb0}].d = r6
[temp0.d + 0x10 {0x78e92fb4}].d = r7
r4 = r4 + 0x14
r4 = &data_64f4
<return> tailcall(sub_63c2)

r1 = zx.d([r2 + r3].b)
r1 = r3 << 0x13
temp0.d = r2
[temp0.d].d = r1
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r6
[temp0.d + 0x14].d = r7
r2 = r2 + 0x18
<return> tailcall(sub_64ce)

r2 = &data_67bc
r5 = 0xc2
r1 = zx.d([r5 + r3].b)
r1 = 0x52
r7 = 0
undefined

int32_t sub_5c24(int16_t arg1, int32_t arg2, int32_t arg3, void* arg4 @ r5)
r4 = r2 << 2
unimplemented  {srsdb sp, #0}
r0 = r0
[r5 + 0x3e].w = r0.w  {"ZE6F"}
r4 = r2 << 2
unimplemented  {srsdb sp, #0x1a}
r0 = r0
r1 = &data_5fd8
r4 = r2 << 2
unimplemented  {srsdb sp, #0}
r0 = r0
r7 = [sp + 0x3a0 {arg_3a0}].d
r4 = r2 << 2
unimplemented  {srsdb sp, #6}
r0 = r0
r5 = r5 - 0xe8
r4 = r2 << 2
unimplemented  {srsdb sp, #4}
r0 = r0
r0 = zx.d([r5 + 0x3e].w)  {"ZE6F"}
r4 = r2 << 2
unimplemented  {srsdb sp, #0xe}
r0 = r0
r0 = zx.d([r5 + 0x2e].w)
r4 = r2 << 2
unimplemented  {srsdb sp, #0x18}
r0 = r0
[r5 + 0x3e].w = r0.w  {"ZE6F"}
r4 = r2 << 2
r0 = zx.d([r0 + 0x18].w)
r5 = zx.d([r4 + r7].b)
temp0.d = r4
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
r7 - 0xf1
r5 = 0x48
r4 - 0x48
r4 = &data_5f18
[r4 + 0x38 {&data_5f50}].d = r4
r1 = r4 << 3
flag:z = (r4 & 0x1fffffff) == 0
flag:c = test_bit(r4, 0x20 - 3)
r4 = &data_5f40
r4 = &data_5f20
goto 90 @ 0x5f5a

r4 = sp + 0x384 {arg_384}
if (flag:z || flag:c) then 92 @ 0x5faa else 95 @ 0x5f5e

r4 = &data_6058
r4 = &data_6240
if (not(flag:z)) then 100 @ &data_6068 else 101 @ 0x5fb0

[sp + 0x150 {arg_150}].d = r5
r3 = r0 + r6
flag:z = r0 == neg.d(r6)
flag:c = r0 + r6 u< r0
if (flag:z) then 111 @ &data_6054+2 else 113 @ 0x5f64

<return> tailcall(sub_62ca)

temp0.d = r4
r3 = [temp0.d {&data_6240}].d
r4 = [temp0.d + 4 {&data_6244}].d
r6 = [temp0.d + 8 {&data_6248}].d
temp0.d = r4
[temp0.d {0x27482ff1}].d = r6
[temp0.d + 4 {0x27482ff5}].d = r7
r4 = r4 + 8
r4 = sub_634c
<return> tailcall(sub_6218)

r4 = sp + 0x3c4 {arg_3c4}
if (flag:z || flag:c) then 118 @ 0x60a6 else 120 @ 0x605a

call(0xff4aa1b2)
[sp + 0x150 {arg_150}].d = r5
r3 = r0 + r6
cond:0 = r0 != neg.d(r6)
if (r0 == neg.d(r6)) then 124 @ 0x6060 else 129 @ 0x5f6e

r1 = [r5 + r3].d
goto 136 @ 0x62fe

[sp + 0xe0 {arg_e0}].d = r5
r3 = r0 + r6
cond:2 = r0 != neg.d(r6)
if (r0 == neg.d(r6)) then 143 @ 0x6152 else 124 @ 0x6060

r7 = &data_62f4
r0 = r0 + 0xf1
r6 = zx.d([r6 + r7].w)
r0 = [&data_63ac].d
goto 100 @ &data_6068

r4 = [&data_6200].d
r6 = &data_6194
r4 = &data_6204
[r4 {&data_6204}].d = r7
r0 = zx.d([r5 + r6 {&data_61dc}].w)
r1 = [r2 + r3].d
if (cond:0) then 147 @ &data_6034 else 170 @ 0x5f7c

r7 = ror.d(r7, r5)
temp1.d = r0
r0 = r0 + 0x99
cond:1 = temp1.d s<= -0x99
[r7 + 0x13].b = r4.b
[r0].w = r4.w
if (cond:1) then 196 else 197 @ 0x630a

[r4 + r3].b = r1.b
r4 = &data_6434
r4 = &data_63e8
if (cond:2) then 206 @ 0x6212 else 209 @ 0x615a

r1 = r4 << 3
r4 = [&data_6408].d
r4 = &data_61b4
r4 = &data_62cc
[r4 {&data_62cc}].d = r7
r1 - 0xa0
r1 = r4 << 3
r4 = 0xf4
[r1 + r3].b = r1.b
r7 - 0x6a
r1 = zx.d([r5 + r3].b)
r5 = 0xf5
r0 = r0 - 0xd9
[r2 + 0x1c].w = r5.w
r1 = zx.d([r3].b)
temp0.d = r0
[temp0.d {&data_5f10}].d = r4
[temp0.d + 4 {&data_5f14}].d = r6
[temp0.d + 8 {&data_5f18}].d = r7
r0 = r0 + 0xc
flag:z = r7 == 0xf5
flag:c = r7 u< 0xf5
goto 111 @ &data_6054+2

r7 - 0x5c
r4 = sp + 0x384 {arg_384}
r4 = [&data_6354].d
r7 = &data_6334
r4 = sub_6218
[r4 {sub_6218}].d = r7
temp0.d = r2
[temp0.d].d = r3
[temp0.d + 4].d = r5
[temp0.d + 8].d = r7
r2 = r2 + 0xc
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r5
r1 = r1 + 0xc
r0 = zx.d([r1 + 0x11].b)
r7 - 0xb7
unimplemented  {vst4.16 {d31, d1, d3, d5}, [r1:0x80], r7}
r0 = [&data_6054].d
r0 = [&data_6034].d
[r5 + 0x38 {&data_80}].d = r0
r1 = [r4 + r3].d
r4 = &data_628c
r4 = &data_6230
goto 222 @ 0x626a

jump(0xab61e)

unimplemented  {sbfx sp, r5, #0x12, #1}
r6 = sp + 0x3cc {arg_3cc}
r11 - r1
r3 = r3 - 0xf7
r5 = r0 u>> 0x11
r6 = r6 - 0x73 {arg_359}
r10 - r1
r0 = zx.d([r2].w)
undefined

r5 - 0xa8
r1 = [r4 + r3].d
goto 233 @ 0x6478

temp0.d = r4
r3 = [temp0.d {&data_63e8}].d
r4 = [temp0.d + 4 {&data_63ec}].d
r6 = [temp0.d + 8 {&data_63f0}].d
temp0.d = r4
[temp0.d {0x78e92fa4}].d = r2
[temp0.d + 4 {0x78e92fa8}].d = r4
[temp0.d + 8 {0x78e92fac}].d = r5
[temp0.d + 0xc {0x78e92fb0}].d = r6
[temp0.d + 0x10 {0x78e92fb4}].d = r7
r4 = r4 + 0x14
r4 = &data_64f4
<return> tailcall(sub_63c2)

r1 = zx.d([r2 + r3].b)
r1 = r3 << 0x13
temp0.d = r2
[temp0.d].d = r1
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r6
[temp0.d + 0x14].d = r7
r2 = r2 + 0x18
<return> tailcall(sub_64ce)

r2 = &data_67bc
r5 = 0xc2
r1 = zx.d([r5 + r3].b)
r1 = 0x52
r7 = 0
undefined

int32_t sub_5d18(void* arg1, int32_t arg2, int16_t* arg3, uint32_t arg4, void* arg5 @ r5, int32_t arg6 @ r7)
flag:c = r5 u< 0x34
r4 = 0xe1
flag:z = r4 == 0
goto 4 @ 0x5d1c

if (flag:z || flag:c) then 5 @ 0x5d6e else 13 @ 0x5d1e

r4 = zx.d([r3 + r7].w)
r3 = zx.d([r3 + r5].w)
cond:0 = r5 u<= 0xb4
[r5 + 0x38].d = r4
r1 = [r4 + r3].d
r4 = &data_600c
r4 = &data_600c
if (cond:0) then 21 @ 0x5dce else 24 @ 0x5d7e

r4 = &data_5db0
r6 = &data_6068
unimplemented  {mcrr2 p1, #2, lr, pc, c9}
call(0xff0161c0)
r4 = &data_5fc4
r7 = 0xa4
r0 = &data_5eb0
goto 27 @ 0x5f86

flag:z = r0 == 0xd9
flag:c = r0 u< 0xd9
if (not(flag:z)) then 4 @ 0x5d1c else 48 @ 0x5dd2

r4 = &data_5ef0
breakpoint

[r4 {&data_5fc4}].d = r7
temp0.d = r2
[temp0.d].d = r3
[temp0.d + 4].d = r5
[temp0.d + 8].d = r7
r2 = r2 + 0xc
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r5
r1 = r1 + 0xc
r0 = zx.d([r1 + 0x11].b)
r7 - 0xb7
unimplemented  {vst4.16 {d31, d1, d3, d5}, [r1:0x80], r7}
r0 = [&data_6054].d
r0 = [&data_6034].d
[r5 + 0x38].d = r0
r1 = [r4 + r3].d
r4 = &data_628c
r4 = &data_6230
goto 54 @ 0x626a

r7 = [&data_606c].d
[r0 + 0x30].d = r3
r0 = r0 + 0xe1
r4 = &data_606c
r4 = &data_606c
goto 65 @ 0x60a6

r1 = zx.d([r2 + r3].b)
r1 = r3 << 0x13
temp0.d = r2
[temp0.d].d = r1
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r6
[temp0.d + 0x14].d = r7
r2 = r2 + 0x18
<return> tailcall(sub_64ce)

r1 = [r5 + r3].d
goto 67 @ 0x62fe

r7 = ror.d(r7, r5)
temp1.d = r0
r0 = r0 + 0x99
cond:1 = temp1.d s<= -0x99
[r7 + 0x13].b = r4.b
[r0].w = r4.w
if (cond:1) then 74 else 75 @ 0x630a

jump(0xab61e)

unimplemented  {sbfx sp, r5, #0x12, #1}
r6 = sp + 0x3cc {arg_3cc}
r11 - r1
r3 = r3 - 0xf7
r5 = r0 u>> 0x11
r6 = r6 - 0x73 {arg_359}
r10 - r1
r0 = zx.d([r2].w)
undefined

int32_t sub_5d9e(int32_t arg1, int32_t arg2, void* arg3, void* arg4, void* arg5 @ r6, int32_t arg6 @ r7, int32_t arg7 @ r11)
r4 = &data_5f00
r0 = 0xab
flag:z = r0 == 0
r5 = &data_5fb4
r4 = &data_6038
if (flag:z || flag:c) then 6 @ 0x5dfa else 7 @ 0x5da8

if (r4 == 0xd9) then 12 @ 0x5d46 else 15 @ &data_5dfc

r4 = &data_5dfc
r0 = 0xab
r5 = &data_6078
r4 = &data_6040
<return> tailcall(j_sub_6014)

[sp + 0x140 {arg_140}].d = r5
r3 = r0 + r6
if (r0 == neg.d(r6)) then 19 @ 0x5e3e else 22 @ 0x5d4c

r5 = [&data_6084].d
r6 = zx.d([r3 + r7].w)
r3 = zx.d([r3 + r5].w)
goto 31 @ 0x6064

r7 = 0x14
r1 = r3 s>> 0x13
if (r1 != 0) then 34 @ 0x5d8e else 40 @ 0x5e44

r7 - 0xd3
r1 = r4 u>> 3
r7 = r7 + r4
r7 - 0xa3
r1 = r5 << 3
r7 = [r1 + 0x48 {0x2fde8}].d
unimplemented  {srsia sp!, #8}
r1 = r5 u>> 3
<return> tailcall(sub_5fc0)

r6 = zx.d([r6 + r7].w)
r0 = [&data_63ac].d
<return> tailcall(sub_62ca)

r4 = zx.d([r3 + r7].w)
r3 = zx.d([r3 + r5].w)
r5 - 0x51
temp0.d = r4
r4 = r4 + 0xe1
if (temp0.d != -0xe1) then 44 @ 0x5e50 else 66 @ 0x5d98  {"4&^G"}

r5 = [&data_60cc].d
r6 = zx.d([r2 + r6].w)
r3 = zx.d([r3 + r5].w)
<return> tailcall(sub_60ac)

call(0xff10e10a)
r7 - 0x20
r0 = sp + 0x3c4 {arg_3c4}
r7 - 0xf6
r1 = r4 s>> 0x13
r4 = r4 << 4
r4 = zx.d([r3 + r7].w)
r3 = zx.d([r3 + r5].w)
r7 = &data_60a4
r0 = r0 - 0xe1 {arg_2e3}
r7 - 0xf4
r0 = sp + 0x3a4 {arg_3a4}
r7 - 0xf5
r4 = sp + 0x3c4 {arg_3c4}
r6 = zx.d([r6 + r7].w)
r1 = r2 u>> 0x13
flag:c = test_bit(r2, 0x13 - 1)
sp = adc.d(r11, 0x24002400, flag:c)
temp1.d = r4 {arg_3c4}
r4 = r4 + 0xe1 {arg_4a5}
cond:0 = temp1.d s<= -0xe1
goto 68 @ 0x60d6

r4 = zx.d([r6 + r4].w)
undefined

r1 = zx.d([r6 + 0x26].w)
goto 70 @ 0x6336

[r4 + 0xa {arg_4af}].w = r6.w
if (cond:0) then 72 else 73 @ 0x633c

jump(0x73bde)

undefined

int32_t j_sub_6128()
<return> tailcall(sub_6128)

int32_t sub_5ec8(int32_t arg1, char arg2, void* arg3, char* arg4, char* arg5 @ r4, int16_t arg6 @ r5, void* arg7 @ r6)
r7 - 0x58
unimplemented  {vst4.16 {d31, d1, d3, d5}, [r1:0x80], r7}
r0 = [&data_5f8c].d
r0 = [&data_5f70].d
[r6 + 0x38].d = r0
[r4 + r3].b = r1.b
[r2 + 0x1c].w = r5.w
r1 = zx.d([r3].b)
<return> tailcall(sub_61a4)

int32_t sub_5eea(int16_t arg1)
r6 = sp + 0x120 {arg_120}
r4 = &data_6180
r4 = zx.d([r4 + r6 {arg1}].w)
r0 = [sub_6238].d
[sp + 0x330 {arg_330}].d = r4
<return> tailcall(sub_5a80)

int32_t sub_5ef6(void* arg1, int32_t arg2, uint32_t* arg3, uint32_t arg4, int32_t arg5 @ r7)
r7 - 0xa4
r4 = sp + 0x384 {arg_384}
r5 = 0xc2
cond:0 = r5 != 0
r1 = zx.d([r0 + r3].b)
unimplemented  {stc2l p12, c4, [r6], #0x3d0}
r6 = &data_5ffc
r4 = &data_6198
[r4 {&data_6198}].d = r7
r0 = zx.d([r5 + r6 {&data_60be}].w)
[r2 + r3].d = r1
if (cond:0) then 12 @ &data_5fc4+2 else 14 @ 0x5f0e

[r2 + r3].d = r1
<return> tailcall(sub_622a)

r7 - 0x58
r4 = sp + 0x384 {arg_384}
r4 = [&data_62e4].d
r7 = &data_5f60
r4 = &data_61a8
[r4 {&data_61a8}].d = r7
r5 = 0xa8
r1 = zx.d([r4 + r3].b)
temp1.d = r4
r4 = r4 - 0x79
cond:1 = temp1.d u<= 0x79
cond:2 = temp1.d != 0x79
[r7 + 0x28 {&data_5f88}].w = r7.w
if (cond:1) then 28 @ &data_5f70 else 34 @ 0x5f24

r6 = &data_6194
r4 = &data_6204
[r4 {&data_6204}].d = r7
r0 = zx.d([r5 + r6 {&data_623c}].w)
r1 = [r2 + r3].d
if (cond:2) then 38 @ &data_6034 else 61 @ 0x5f7c  {"EZE6F"}

[sp + 0x150 {arg_150}].d = r5
r3 = r0 + r6
cond:7 = r0 == neg.d(r6)
goto 87 @ 0x5f28

r1 = r4 << 3
r4 = [&data_6408].d
r4 = &data_61b4
r4 = &data_62cc
[r4 {&data_62cc}].d = r7
r1 - 0xa0
r1 = r4 << 3
r4 = 0xf4
[r1 + r3].b = r1.b
r7 - 0x6a
r1 = zx.d([r5 + r3].b)
r5 = 0xf5
r0 = r0 - 0xd9
[r2 + 0x1c].w = r5.w
r1 = zx.d([r3].b)
temp0.d = r0
[temp0.d {&data_ab53}].d = r4
[temp0.d + 4 {&data_ab57}].d = r6
[temp0.d + 8 {&data_ab5b}].d = r7
r0 = r0 + 0xc
cond:3 = r7 u<= 0xf5
r4 = sp + 0x3c4 {arg_3c4}
if (cond:3) then 88 @ 0x60a6 else 90 @ 0x605a

r7 - 0x5c
r4 = sp + 0x384 {arg_384}
r4 = [&data_6354].d
r7 = &data_6334
r4 = sub_6218
[r4 {sub_6218}].d = r7
temp0.d = r2
[temp0.d].d = r3
[temp0.d + 4].d = r5
[temp0.d + 8].d = r7
r2 = r2 + 0xc
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r5
r1 = r1 + 0xc
r0 = zx.d([r1 + 0x11].b)
r7 - 0xb7
unimplemented  {vst4.16 {d31, d1, d3, d5}, [r1:0x80], r7}
r0 = [&data_6054].d
r0 = [&data_6034].d
[r5 + 0x38 {&data_e0}].d = r0
r1 = [r4 + r3].d
r4 = &data_628c
r4 = &data_6230
goto 94 @ 0x626a

if (cond:7) then 105 @ 0x601c else 110 @ 0x5f2a

r1 = [r5 + r3].d
goto 119 @ 0x62fe

[sp + 0xe0 {arg_e0}].d = r5
r3 = r0 + r6
cond:6 = r0 != neg.d(r6)
if (r0 == neg.d(r6)) then 126 @ 0x6152 else 130 @ 0x6060  {"eCo=M"}

r1 = zx.d([r2 + r3].b)
r1 = r3 << 0x13
temp0.d = r2
[temp0.d].d = r1
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r6
[temp0.d + 0x14].d = r7
r2 = r2 + 0x18
<return> tailcall(sub_64ce)

r1 = r4 << 3
cond:4 = r1 != 0
r4 = zx.d([r6 + r7].w)
[r6 + 6 {&data_6002}].w = r1.w
goto 135 @ 0x6280

r7 - 0xa4
unimplemented  {vst4.16 {d31, d1, d3, d5}, [r1:0x80], r7}
r0 = [&data_5ff0].d
r0 = [&data_5fd0].d
[r6 + 0x38 {&data_6034}].d = r0
r1 = zx.d([r4 + r3].b)
r4 = &data_6210
r4 = &data_61cc
goto 136 @ &data_6204+2

r7 = ror.d(r7, r5)
temp2.d = r0
r0 = r0 + 0x99
cond:5 = temp2.d s<= -0x99
[r7 + 0x13 {0x2fb0014}].b = r4.b
[r0 {&data_abf8}].w = r4.w
if (cond:5) then 138 else 139 @ 0x630a

[r4 + r3 {arg_110b7}].b = r1.b
r4 = &data_6434
r4 = &data_63e8
if (cond:6) then 148 @ 0x6212 else 151 @ 0x615a

r7 = &data_62f4
r0 = r0 + 0xf1
r6 = zx.d([r6 + r7 {0xc488}].w)
r0 = [&data_63ac].d
<return> tailcall(sub_62ca)

if (cond:4) then 164 @ &data_61cc else 167 @ 0x6282

r4 = &data_6498
<return> tailcall(sub_6208)

jump(0xab61e)

unimplemented  {sbfx sp, r5, #0x12, #1}
r6 = sp + 0x3cc {arg_3cc}
r11 - r1
r3 = r3 - 0xf7
r5 = r0 u>> 0x11
r6 = r6 - 0x73 {arg_359}
r10 - r1
r0 = zx.d([r2].w)
undefined

r5 - 0xa8
r1 = [r4 + r3 {sub_14302+0x2dd9}].d
goto 171 @ 0x6478

temp0.d = r4
r3 = [temp0.d {&data_63e8}].d
r4 = [temp0.d + 4 {&data_63ec}].d
r6 = [temp0.d + 8 {&data_63f0}].d
temp0.d = r4
[temp0.d {0x78e92fa4}].d = r2
[temp0.d + 4 {0x78e92fa8}].d = r4
[temp0.d + 8 {0x78e92fac}].d = r5
[temp0.d + 0xc {0x78e92fb0}].d = r6
[temp0.d + 0x10 {0x78e92fb4}].d = r7
r4 = r4 + 0x14
r4 = &data_64f4
<return> tailcall(sub_63c2)

r7 - 0x8f
r7 = [&data_6554].d
<return> tailcall(sub_642e)

r7 = 0xa1
cond:7 = r7 == 0
r4 = zx.d([r5 + r5 {0x150}].w)
goto 87 @ 0x5f28

r2 = &data_67bc
r5 = 0xc2
r1 = zx.d([r5 + r3 {&data_10db5}].b)  {"Cgi#Y(1#oGW#'g}#=(E$SGk$ig3$!(Y$…"}
r1 = 0x52
r7 = 0
undefined

int32_t sub_5f58(void* arg1, char arg2, int32_t* arg3, int32_t* arg4 @ r5, void* const arg5 @ r6, int32_t arg6 @ r7)
cond:0 = r7 u<= 0xa4
cond:1 = r7 != 0xa4
r4 = sp + 0x384 {arg_384}
if (cond:0) then 4 @ 0x5faa else 7 @ 0x5f5e

r4 = &data_6058
r4 = &data_6240
if (cond:1) then 12 @ &data_6068 else 13 @ 0x5fb0

[sp + 0x150 {arg_150}].d = r5
r3 = r0 + r6
flag:z = r0 == neg.d(r6)
flag:c = r0 + r6 u< r0
if (flag:z) then 23 @ &data_6054+2 else 25 @ 0x5f64

<return> tailcall(sub_62ca)

temp0.d = r4
r3 = [temp0.d {&data_6240}].d
r4 = [temp0.d + 4 {&data_6244}].d
r6 = [temp0.d + 8 {&data_6248}].d
temp0.d = r4
[temp0.d {0x27482ff1}].d = r6
[temp0.d + 4 {0x27482ff5}].d = r7
r4 = r4 + 8
r4 = sub_634c
<return> tailcall(sub_6218)

r4 = sp + 0x3c4 {arg_3c4}
if (flag:z || flag:c) then 30 @ 0x60a6 else 32 @ 0x605a

call(0xff4aa1b2)
[sp + 0x150 {arg_150}].d = r5
r3 = r0 + r6
cond:2 = r0 != neg.d(r6)
if (r0 == neg.d(r6)) then 36 @ 0x6060 else 41 @ 0x5f6e

r1 = [r5 + r3].d
goto 48 @ 0x62fe

[sp + 0xe0 {arg_e0}].d = r5
r3 = r0 + r6
cond:4 = r0 != neg.d(r6)
if (r0 == neg.d(r6)) then 55 @ 0x6152 else 36 @ 0x6060

r7 = &data_62f4
r0 = r0 + 0xf1
r6 = zx.d([r6 + r7].w)
r0 = [&data_63ac].d
goto 12 @ &data_6068

r4 = [&data_6200].d
r6 = &data_6194
r4 = &data_6204
[r4 {&data_6204}].d = r7
r0 = zx.d([r5 + r6].w)
r1 = [r2 + r3].d
if (cond:2) then 59 @ &data_6034 else 82 @ 0x5f7c

r7 = ror.d(r7, r5)
temp1.d = r0
r0 = r0 + 0x99
cond:3 = temp1.d s<= -0x99
[r7 + 0x13].b = r4.b
[r0].w = r4.w
if (cond:3) then 108 else 109 @ 0x630a

[r4 + r3].b = r1.b
r4 = &data_6434
r4 = &data_63e8
if (cond:4) then 118 @ 0x6212 else 121 @ 0x615a

r1 = r4 << 3
r4 = [&data_6408].d
r4 = &data_61b4
r4 = &data_62cc
[r4 {&data_62cc}].d = r7
r1 - 0xa0
r1 = r4 << 3
r4 = 0xf4
[r1 + r3].b = r1.b
r7 - 0x6a
r1 = zx.d([r5 + r3].b)
r5 = 0xf5
r0 = r0 - 0xd9
[r2 + 0x1c].w = r5.w
r1 = zx.d([r3].b)
temp0.d = r0
[temp0.d].d = r4
[temp0.d + 4].d = r6
[temp0.d + 8].d = r7
r0 = r0 + 0xc
flag:z = r7 == 0xf5
flag:c = r7 u< 0xf5
goto 23 @ &data_6054+2

r7 - 0x5c
r4 = sp + 0x384 {arg_384}
r4 = [&data_6354].d
r7 = &data_6334
r4 = sub_6218
[r4 {sub_6218}].d = r7
temp0.d = r2
[temp0.d].d = r3
[temp0.d + 4].d = r5
[temp0.d + 8].d = r7
r2 = r2 + 0xc
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r5
r1 = r1 + 0xc
r0 = zx.d([r1 + 0x11].b)
r7 - 0xb7
unimplemented  {vst4.16 {d31, d1, d3, d5}, [r1:0x80], r7}
r0 = [&data_6054].d
r0 = [&data_6034].d
[r5 + 0x38].d = r0
r1 = [r4 + r3].d
r4 = &data_628c
r4 = &data_6230
goto 134 @ 0x626a

jump(0xab61e)

unimplemented  {sbfx sp, r5, #0x12, #1}
r6 = sp + 0x3cc {arg_3cc}
r11 - r1
r3 = r3 - 0xf7
r5 = r0 u>> 0x11
r6 = r6 - 0x73 {arg_359}
r10 - r1
r0 = zx.d([r2].w)
undefined

r5 - 0xa8
r1 = [r4 + r3].d
goto 145 @ 0x6478

temp0.d = r4
r3 = [temp0.d {&data_63e8}].d
r4 = [temp0.d + 4 {&data_63ec}].d
r6 = [temp0.d + 8 {&data_63f0}].d
temp0.d = r4
[temp0.d {0x78e92fa4}].d = r2
[temp0.d + 4 {0x78e92fa8}].d = r4
[temp0.d + 8 {0x78e92fac}].d = r5
[temp0.d + 0xc {0x78e92fb0}].d = r6
[temp0.d + 0x10 {0x78e92fb4}].d = r7
r4 = r4 + 0x14
r4 = &data_64f4
<return> tailcall(sub_63c2)

r1 = zx.d([r2 + r3].b)
r1 = r3 << 0x13
temp0.d = r2
[temp0.d].d = r1
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r6
[temp0.d + 0x14].d = r7
r2 = r2 + 0x18
<return> tailcall(sub_64ce)

r2 = &data_67bc
r5 = 0xc2
r1 = zx.d([r5 + r3].b)
r1 = 0x52
r7 = 0
undefined

int32_t sub_5fc0(int32_t arg1, int32_t arg2, int32_t* arg3, void* arg4, int16_t arg5 @ r4, int32_t arg6 @ r5, int32_t arg7 @ r6)
r0 = sp + 0x180 {arg_180}
if (not(flag:z)) then 2 @ 0x607c else 6 @ &data_5fc4

r5 = 0xc2
[r5 + r3].b = r1.b
r5 = r6 u>> 0x10
goto 9 @ 0x62e0

r4 = zx.d([r3 + r5].w)
[r2 + r3].d = r1
<return> tailcall(sub_622a)

r0 = r0 {arg_180}
&data_62e4+2 - r8
r7 = r6 << 3
r0 = r0 {arg_180}
r0 = r0 u>> 0x1c
lr - r6
[r2 + 0x18].w = r0.w
r0 = r7 << 3
r5 = r6 << 9
[r5 + 0x2c].d = r3  {"4&^G"}
r3 = r5 - r3
r11 - r1
r7 = r6 << 0xf
unimplemented  {mcrr2 p13, #8, r7, r5, c1}
r7 = ror.d(r7, r5)
temp0.d = r0
r0 = r0 + 0x99
cond:0 = temp0.d s<= -0x99
[r7 + 0x13].b = r4.b
[r0].w = r4.w
if (cond:0) then 30 else 31 @ 0x630a

jump(0xab61e)

unimplemented  {sbfx sp, r5, #0x12, #1}
r6 = sp + 0x3cc {arg_3cc}
r11 - r1
r3 = r3 - 0xf7
r5 = r0 u>> 0x11
r6 = r6 - 0x73 {arg_359}
r10 - r1
r0 = zx.d([r2].w)
undefined

int32_t sub_5fd4(int32_t arg1, int32_t arg2, int16_t* arg3, int32_t arg4, int32_t arg5 @ r5, void* arg6 @ r6, int32_t arg7 @ r7, int32_t arg8 @ r11)
r7 = r7 s>> r5
[r7 + 0x7c].d = r1
flag:v = add_overflow(r7, -0xf1)
r7 = 0x48
flag:n = r7 s< 0
flag:z = r7 == 0
if (not(flag:z) && flag:n == flag:v) then 7 @ 0x6070 else 8 @ 0x5fde

if (flag:n) then 9 @ 0x6008 else 10 @ 0x6072

<return> tailcall(sub_62a8)

goto 19 @ 0x62d2

r4 = zx.d([r6 + r7].w)
r1 = r2 << 0x13
flag:c = test_bit(r2, 0x20 - 0x13)
sp = adc.d(r11, 0x50005000, flag:c)
r4 = r4 - 0xe1
r5 = 0xc2
[r5 + r3].b = r1.b
r5 = r6 u>> 0x10
goto 33 @ 0x62e0

r4 = r5 s>> 0xb
&data_62d8 - r8
r7 = ror.d(r7, r5)
r0 = r0 + 0x99
temp0.d = r7
[temp0.d].d = r2
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r6
[temp0.d + 0x14].d = r7
r7 = r7 + 0x18
unimplemented  {mcrr2 p0, #0, r0, r5, c1}
goto 33 @ 0x62e0

r0 = r0
&data_62e4+2 - r8
r7 = r6 << 3
r0 = r0
r0 = r0 u>> 0x1c
lr - r6
[r2 + 0x18].w = r0.w
r0 = r7 << 3
r5 = r6 << 9
[r5 + 0x2c].d = r3  {"4&^G"}
r3 = r5 - r3
r11 - r1
r7 = r6 << 0xf
unimplemented  {mcrr2 p13, #8, r7, r5, c1}
r7 = ror.d(r7, r5)
temp1.d = r0
r0 = r0 + 0x99
cond:0 = temp1.d s<= -0x99
[r7 + 0x13].b = r4.b
[r0].w = r4.w
if (cond:0) then 54 else 55 @ 0x630a

jump(0xab61e)

unimplemented  {sbfx sp, r5, #0x12, #1}
r6 = sp + 0x3cc
r11 - r1
r3 = r3 - 0xf7
r5 = r0 u>> 0x11
r6 = r6 - 0x73
r10 - r1
r0 = zx.d([r2].w)
undefined

int32_t sub_5ff4(int32_t arg1, int32_t arg2, int32_t arg3)
r0 = r0 + 0xe1
r4 = &data_6278
r4 = &data_628c
<return> tailcall(j_sub_62ca)

int32_t j_sub_6014(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4)
r4 = [&data_63e4].d
<return> tailcall(sub_6014)

int32_t sub_6014(int32_t arg1, int32_t arg2, void* arg3, void* arg4, int32_t* arg5 @ r4, void* arg6 @ r5, void* arg7 @ r6, int32_t arg8 @ r7)
r1 = zx.d([r2 + r0].w)
r3 = zx.d([r3 + r5].w)
[r4].d = r7
r1 - 0xa0
goto 5 @ 0x601c

r1 = r4 << 3
cond:0 = r1 != 0
r4 = zx.d([r6 + r7].w)
[r6 + 6].w = r1.w
goto 10 @ 0x6280

if (cond:0) then 11 @ &data_61cc else 14 @ 0x6282

r7 - 0x8f
r7 = [&data_6554].d
<return> tailcall(sub_642e)

r7 = 0xa1
cond:1 = r7 == 0
r4 = zx.d([r5 + r5].w)
goto 18 @ 0x5f28

if (cond:1) then 5 @ 0x601c else 19 @ 0x5f2a

r7 - 0xa4
unimplemented  {vst4.16 {d31, d1, d3, d5}, [r1:0x80], r7}
r0 = [&data_5ff0].d
r0 = [&data_5fd0].d
[r6 + 0x38].d = r0
r1 = zx.d([r4 + r3].b)
r4 = &data_6210
r4 = &data_61cc
goto 28 @ &data_6204+2

r4 = &data_6498
<return> tailcall(sub_6208)

int32_t sub_6090(int32_t arg1, int32_t arg2, void* arg3, char* arg4, int32_t arg5 @ r4, int16_t arg6 @ r5)
r7 = 0x2c  {"4&^G"}
if (r4 != 0xd9) then 2 @ 0x5fe0 else 9 @ 0x6096

r6 = sub_5ff4
r4 = &data_6278
[r4 + 0x38 {&data_62b0}].d = r4
r0 = r0 - 0xe1
[r2 + 0x1c].w = r5.w
r1 = zx.d([r3].b)
<return> tailcall(sub_62b6)

r7 = [&data_6330].d
r7 - 0xd3
r4 = sp + 0x384 {arg_384}
r4 = sp + 0xbc {arg_bc}
undefined

int32_t sub_60ac()
undefined

int32_t sub_60b0(int32_t arg1, int32_t arg2, void* arg3, char* arg4, int32_t arg5 @ r4, int16_t arg6 @ r5, int32_t arg7 @ r11)
r0 = r0 - 0xd9
[r2 + 0x1c].w = r5.w
r1 = zx.d([r3].b)
temp0.d = r0
r0 = r0 - 0xd0
flag:c = temp0.d u< 0xd0
sp = adc.d(r11, 0x84008400, flag:c)
r4 = r4 - 0xe1
goto 9 @ 0x631c

undefined

int32_t sub_60c0(int32_t arg1, int32_t* arg2, int32_t* arg3, void** arg4, int32_t arg5 @ r4, void* arg6 @ r6)
temp0.d = r2
[temp0.d].d = r4
[temp0.d + 4].d = r6
r2 = r2 + 8
temp0.d = r1
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r5 = [temp0.d + 8].d
r1 = r1 + 0xc
r4 = [sub_6218].d
r7 = 7
flag:n = r7 s< 0
flag:z = r7 == 0
[r3 + r3].d = r1
if (not(flag:z)) then 15 @ 0x6016 else 19 @ &data_60cc  {"[['`"}

r3 = zx.d([r3 + r5].w)
[r4 {0x48e12dac}].d = r7
r1 - 0xa0
goto 23 @ 0x601c

r7 = [sub_6368].d
r5 = zx.d([r4 + r7 {0xed85d1ec}].w)
r0 = [&data_6418].d
if (not(flag:z)) then 28 @ 0x618c else 41 @ 0x60d4

r1 = r4 << 3
cond:2 = r1 != 0
r4 = zx.d([r6 + r7].w)
[r6 + 6].w = r1.w
goto 44 @ 0x6280  {"4&^G"}

r7 = 0xa4
r0 = sp + 0x180 {arg_180}
r7 = r7 s>> r5
[r7 + 0x7c].d = r1
r0 = [r5 + 4].d
r0 = [r5 + 4].d
r0 = [r5 + 4].d
r0 = [r5 + 4].d
r0 = [r5 + 4].d
r0 = [r5 + 4].d
r7 - 0xf1
r7 = 0x48
<return> tailcall(sub_61a4)

r4 = zx.d([r1 + r5].w)
r1 = zx.d([r6 + 0x26].w)
goto 45 @ 0x6336

if (cond:2) then 47 @ &data_61cc else 50 @ 0x6282

[r4 + 0xa].w = r6.w
if (flag:z || flag:n != flag:v) then 54 else 55 @ 0x633c

r7 - 0x8f
r7 = [&data_6554].d
<return> tailcall(sub_642e)

r7 = 0xa1
cond:3 = r7 == 0
r4 = zx.d([r5 + r5].w)
goto 56 @ 0x5f28

jump(0x73bde)

undefined

if (cond:3) then 23 @ 0x601c else 57 @ 0x5f2a

r7 - 0xa4
unimplemented  {vst4.16 {d31, d1, d3, d5}, [r1:0x80], r7}
r0 = [&data_5ff0].d
r0 = [&data_5fd0].d
[r6 + 0x38].d = r0
r1 = zx.d([r4 + r3].b)
r4 = &data_6210
r4 = &data_61cc
goto 66 @ &data_6204+2

r4 = &data_6498
<return> tailcall(sub_6208)

int32_t sub_6128(int32_t arg1 @ r4, void* arg2 @ r7, int32_t arg3 @ r11)
r4 = zx.d([r7 + r4].w)
temp0.d = r4
r4 = r4 - 0xd1
flag:c = temp0.d u< 0xd1
jump(adc.d(r11, 0xb800b800, flag:c))

int32_t sub_6162(void* arg1 @ r5, int32_t arg2 @ r6, int32_t arg3 @ r7)
call(0xff4b23b0)
[sp + 0x170 {arg_170}].d = r5
r3 = r0 + r6
cond:0 = r0 != neg.d(r6)
if (r0 == neg.d(r6)) then 5 @ 0x625e else 10 @ 0x616c

[r3 + 0x34].d = r0
r7 = [&data_65e8].d
r4 = &data_64f4
r4 = &data_64f8
<return> tailcall(sub_64c8)

r4 = [&data_6400].d
r4 = &data_6398
r4 = &data_6404
[r4 {&data_6404}].d = r7
r0 = zx.d([r5 + r6].w)
[r2 + r3].d = r1
if (cond:0) then 17 @ 0x6232 else 18 @ 0x617a

goto 26 @ 0x6584

r7 - 0x54
r4 = sp + 0x384 {arg_384}
r5 = 0xf4
r1 = zx.d([r3 + r3].b)
[r2 + 0x1c].w = r5.w
r1 = zx.d([r3].b)
r4 = sub_64c8
<return> tailcall(sub_5c24)

[r1 + 0x22].w = r5.w
push(r11)
push(r10)
push(r9)
push(r8)
push(r6)
push(r5)
push(r2)
push(r0)
r4 = sp + 0x3a4 {arg_384}
unimplemented  {srsia sp!, #0x18}
r9 - sp
undefined

int32_t sub_61a4(int32_t, int32_t arg2, char* arg3 @ r4, int32_t* arg4, char arg5)
r3 = pop
r6 = pop
goto 3 @ 0x6470

r5 = 0xa4
[r3 + r3].d = r1
r5 = r6 << 4
[r4 + r3].b = r6.b
r2 = &data_67bc
r5 = 0xc2
r1 = zx.d([r5 + r3].b)
r1 = 0x52
r7 = 0
undefined

int32_t sub_61b6(int32_t arg1, int32_t, int32_t, int32_t* arg4, int32_t arg5 @ r5, int32_t arg6 @ r7, int32_t arg7 @ r9, int32_t arg8 @ r12)
r4 = &data_62e4
r4 = &data_644c
r7 - 0xa4
push(r7)
push(r6)
push(r5)
push(r0)
goto 8 @ 0x641c

r9 = r9 + r12
r4 = [&data_67f0].d
r0 = [r3 + r7].d
r3 = zx.d([r3 + r5].w)
[r4 {0x2d668f5c}].d = r7
r7 - 0xa8
sp = sp - 0x1a4
undefined

int32_t sub_6208(int32_t, int32_t arg2, int32_t arg3, uint32_t* arg4, void* arg5 @ r4, char arg6 @ r6)
[r4 + 0x38].d = r4
r1 = zx.d([r4 + r3].b)
r4 = &data_64a0
r4 = &data_64a0
goto 5 @ 0x6472

[r3 + r3].d = r1
r5 = r6 << 4
[r4 + r3].b = r6.b
r2 = &data_67bc
r5 = 0xc2
r1 = zx.d([r5 + r3].b)
r1 = 0x52
r7 = 0
undefined

int32_t sub_6218()
r5 - 0xac
r0 = [&data_65a0].d
r5 = sp + 0x13c {arg_13c}
goto 4 @ 0x6480

r7 = 0
undefined

int32_t sub_6226(int32_t arg1, int32_t arg2, int32_t, int32_t arg4, void* arg5 @ r4)
r7 - 0x5c
r1 = zx.d([r4 + r3].b)
<return> tailcall(sub_622a)

int32_t sub_622a(int32_t arg1, int32_t arg2, int32_t* arg3 @ r4, int32_t arg4 @ r5, int32_t arg5 @ r7)
goto 1 @ 0x656c

[r4].d = r7
r7 = [&data_6810].d
r7 - 0xab
r1 = ror.d(r1, r5)
push(lr)
push(r5)
push(r3)
push(r2)
push(r1)
push(r0)
unimplemented  {unpredictable}
r7 - 0x55
r1 = ror.d(r1, r4)
push(r5)
push(r3)
push(r2)
push(r0)
r3 - 0x4f
undefined

int32_t sub_6238(int32_t, void* arg2)
temp0.d = r1
r2 = [temp0.d].d
r5 = [temp0.d + 4].d
r1 = r1 + 8
r4 = r2 << 0xd
r4 = sp + 0xb0 {arg_b0}
r7 = zx.d([r1 + 9].b)
r7 = r7 s>> r5
[r7 + 0x7c].d = r1
r7 - 0xf1
r7 = 0x48
undefined

int32_t sub_624c(int32_t, int32_t arg2, int32_t arg3, int32_t arg4 @ r7)
r5 = &data_63b0
r4 = &data_64e0
[r4 + 0x38 {&data_6518}].d = r4
r3 = [&data_65d8].d
r4 = sub_64e8
r4 = sub_64e8
goto 7 @ 0x6522

r1 = r2 + r7
undefined

int32_t sub_625c(int32_t arg1, int32_t arg2, int32_t, void* arg4)
[sp + 0xf4 {arg_f4}].d = r4
[r3 + 0x34].d = r0
r7 = [&data_65e8].d
r4 = &data_64f4
r4 = &data_64f8
<return> tailcall(sub_64c8)

int32_t sub_6268(int32_t, int32_t arg2, int32_t* arg3, int32_t arg4, int32_t arg5 @ r4, int32_t arg6 @ r6, int32_t arg7 @ r7)
r5 = 0xb4
r1 = zx.d([r2 + r3].b)
r1 = r3 << 0x13
temp0.d = r2
[temp0.d].d = r1
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r6
[temp0.d + 0x14].d = r7
r2 = r2 + 0x18
<return> tailcall(sub_64ce)

int32_t sub_6272(void* arg1, int32_t arg2, int32_t arg3, int32_t arg4, void* arg5 @ r5, void* arg6 @ r6)
[r0 + 0x24].d = r3
r1 = sx.d([r4 + r7].b)
r7 = 0xa4
cond:0 = r7 == 0
r4 = sp + 0x364 {arg_364}
if (cond:0) then 6 @ 0x61c6 else 8 @ 0x627c

r7 = [&data_654c].d
<return> tailcall(sub_650a)

r7 = 0xa2
cond:2 = r7 != 0
r0 = sp + 0x364 {arg_364}
goto 12 @ 0x6280

if (cond:2) then 13 @ &data_61cc else 16 @ 0x6282

r7 - 0x8f
r7 = [&data_6554].d
<return> tailcall(sub_642e)

r7 = 0xa1
cond:1 = r7 == 0
r4 = zx.d([r5 + r5].w)
goto 20 @ 0x5f28

if (cond:1) then 21 @ 0x601c else 26 @ 0x5f2a

r1 = r4 << 3
cond:2 = r1 != 0
r4 = zx.d([r6 + r7].w)
[r6 + 6].w = r1.w
goto 12 @ 0x6280

r7 - 0xa4
unimplemented  {vst4.16 {d31, d1, d3, d5}, [r1:0x80], r7}
r0 = [&data_5ff0].d
r0 = [&data_5fd0].d
[r6 + 0x38].d = r0
r1 = zx.d([r4 + r3].b)
r4 = &data_6210
r4 = &data_61cc
goto 35 @ &data_6204+2

r4 = &data_6498
<return> tailcall(sub_6208)

int32_t sub_6288()
unimplemented  {setend be}
<return> tailcall(sub_64ec)

int32_t sub_6292(int32_t arg1, int32_t arg2, int32_t arg3, int32_t* arg4)
r5 = 0x4f
[r3 + r3].d = r1
r5 = r5 - 0xe5
r4 = [r2 + r2].d
r4 = &data_65dc
<return> tailcall(sub_64fe)

int32_t sub_629e(int32_t, int32_t arg2, void* arg3, int32_t arg4 @ r4, int16_t arg5)
r7 = [sp + 0x13c {arg5}].d
r1 = not.d(r4)
[r2 + 0x3e].w = r7.w  {"ZE6F"}
<return> tailcall(sub_6506)

int32_t sub_62a6()
r7 = &data_6548
<return> tailcall(sub_62a8)

int32_t sub_62a8()
r7 = [sub_6630].d
r4 = sp + 0xb8 {arg_b8}
undefined

int32_t sub_62b6(int32_t arg1)
r4 = sp + 0x48 {arg_48}
r3 = r5 s>> 0xa
r1 = sx.d([r6 + r7].b)
r7 = [r3 + 0x68].d
r1 = &data_6600
r7 = [r4 + 0x40 {arg_88}].d
r7 = [&data_6430].d
<return> tailcall(j_sub_62ca)

int32_t j_sub_62ca(int32_t arg1, int32_t arg2, int32_t arg3)
r7 = [&data_654c].d
r7 - 0x67
r3 = [&data_6650].d
<return> tailcall(sub_62ca)

int32_t sub_62ca(int32_t arg1, int32_t arg2, int16_t* arg3, int32_t arg4, int16_t arg5 @ r4, int32_t arg6 @ r5, int32_t arg7 @ r6, int32_t arg8 @ r7)
r7 = r7 s>> r5
[r7 + 0x7c].d = r1
r5 = zx.d([r2 + 0x1a].w)
[r5 + 0x1e].w = r4.w
r4 = r5 s>> 0xb
&data_62d8 - r8
r7 = ror.d(r7, r5)
r0 = r0 + 0x99
temp0.d = r7
[temp0.d].d = r2
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r6
[temp0.d + 0x14].d = r7
r7 = r7 + 0x18
unimplemented  {mcrr2 p0, #0, r0, r5, c1}
r0 = r0
&data_62e4+2 - r8
r7 = r6 << 3
r0 = r0
r0 = r0 u>> 0x1c
lr - r6
[r2 + 0x18].w = r0.w
r0 = r7 << 3
r5 = r6 << 9
[r5 + 0x2c].d = r3  {"4&^G"}
r3 = r5 - r3
r11 - r1
r7 = r6 << 0xf
unimplemented  {mcrr2 p13, #8, r7, r5, c1}
r7 = ror.d(r7, r5)
temp1.d = r0
r0 = r0 + 0x99
cond:0 = temp1.d s<= -0x99
[r7 + 0x13].b = r4.b
[r0].w = r4.w
if (cond:0) then 38 else 39 @ 0x630a

jump(0xab61e)

unimplemented  {sbfx sp, r5, #0x12, #1}
r6 = sp + 0x3cc {arg_3cc}
r11 - r1
r3 = r3 - 0xf7
r5 = r0 u>> 0x11
r6 = r6 - 0x73 {arg_359}
r10 - r1
r0 = zx.d([r2].w)
undefined

int32_t sub_634c(void* arg1 @ r6)
r3 - r0
r7 = zx.d([r6 + 0x16].w)
undefined

int32_t sub_6358(int32_t arg1, int32_t arg2, int32_t arg3, int32_t* arg4, void* arg5 @ r4, int32_t arg6 @ r6)
temp0.d = r3
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r3
[temp0.d + 0xc].d = r4
[temp0.d + 0x10].d = r6
r3 = r3 + 0x14
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
r7 - 0xf1
r7 = 0x48
[sp + 0x120 {arg_120}].d = r4
<return> tailcall(sub_6630)

int32_t sub_6368(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4)
r4 = &data_646c
r4 = &data_65fc
[r4 + 0x38 {&data_6634}].d = r4
[r4 + 3 {&data_65ff}].b = r1.b
r4 = &data_6660
r4 = &data_6604
<return> tailcall(sub_663e)

int32_t sub_63c2(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, void* arg5 @ r5, void* arg6 @ r7, int32_t arg7, int32_t arg8, int32_t arg9, int32_t arg10, int32_t arg11)
temp0.d = r1
r1 = r1 u>> r2
flag:c = test_bit(temp0.d, r2 - 1)
r4 = adc.d(r11, 0x84008400, flag:c)
r1 = zx.d([r4 + r3].b)
cond:0 = r5 != 0xac
r4 = [&data_6754].d
if (cond:0) then 8 @ 0x6488 else 19 @ 0x63d0

r4 = &data_65c4
push(r7)
push(r5)
push(r2)
r7 - 0xa4
r1 = zx.d([r4 + 3 {&data_65c7}].b)
push(r5)
push(r3)
push(r2)
push(r0)
goto 26 @ 0x675c

r4 = zx.d([r1 + r5].w)
r0 = pop
r4 = pop
r5 = pop
r6 = pop
r7 = pop
goto 32 @ &data_6630+2

[r7 + 0x7c].d = r1
r0 = [r5 + 4].d
r7 - 0xf1
r7 = 0x48
[r1 + 2 {&data_d1+1}].w = r0.w
<return> tailcall(sub_6a30)

r4 = &data_68c4
r4 = &data_68c8
<return> tailcall(sub_6900)

int32_t sub_63d6(int32_t arg1, int32_t arg2, int32_t* arg3, char* arg4, void* arg5 @ r4, int32_t arg6 @ r5, int32_t arg7 @ r6, int32_t arg8 @ r7)
cond:0 = r5 u<= 0x4c
r1 = zx.d([r4 + 3].b)
if (cond:0) then 3 @ 0x642c else 5 @ 0x63dc

r5 - 0x74
<return> tailcall(sub_642e)

r4 = &data_65c0
r1 = &data_6724
r5 = r1 s>> 1
r4 = &data_6674
r4 = zx.d([r4 + r6].w)
r1 = zx.d([r2 + 0x13].b)
r4 = r1 << 0x13
cond:1 = r4 != 0
goto 14 @ 0x5f76

r0 = zx.d([r5 + r6].w)
r1 = [r2 + r3].d
if (cond:1) then 17 @ &data_6034 else 40 @ 0x5f7c

r1 = r4 << 3
r4 = [&data_6408].d
r4 = &data_61b4
r4 = &data_62cc
[r4 {&data_62cc}].d = r7
r1 - 0xa0
r1 = r4 << 3
r4 = 0xf4
[r1 + r3].b = r1.b
r7 - 0x6a
r1 = zx.d([r5 + r3].b)
r5 = 0xf5
r0 = r0 - 0xd9
[r2 + 0x1c].w = r5.w
r1 = zx.d([r3].b)
temp0.d = r0
[temp0.d].d = r4
[temp0.d + 4].d = r6
[temp0.d + 8].d = r7
r0 = r0 + 0xc
cond:2 = r7 u<= 0xf5
r4 = sp + 0x3c4 {arg_3c4}
if (cond:2) then 66 @ 0x60a6 else 68 @ 0x605a

r7 - 0x5c
r4 = sp + 0x384 {arg_384}
r4 = [&data_6354].d
r7 = &data_6334
r4 = sub_6218
[r4 {sub_6218}].d = r7
temp0.d = r2
[temp0.d].d = r3
[temp0.d + 4].d = r5
[temp0.d + 8].d = r7
r2 = r2 + 0xc
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r5
r1 = r1 + 0xc
r0 = zx.d([r1 + 0x11].b)
r7 - 0xb7
unimplemented  {vst4.16 {d31, d1, d3, d5}, [r1:0x80], r7}
r0 = [&data_6054].d
r0 = [&data_6034].d
[r5 + 0x38 {&data_33ca}].d = r0
r1 = [r4 + r3].d
r4 = &data_628c
r4 = &data_6230
goto 72 @ 0x626a

r1 = [r5 + r3].d
goto 83 @ 0x62fe

[sp + 0xe0 {arg_e0}].d = r5
r3 = r0 + r6
cond:4 = r0 != neg.d(r6)
if (r0 == neg.d(r6)) then 90 @ 0x6152 else 94 @ 0x6060

r1 = zx.d([r2 + r3].b)
r1 = r3 << 0x13
temp0.d = r2
[temp0.d].d = r1
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r6
[temp0.d + 0x14].d = r7
r2 = r2 + 0x18
<return> tailcall(sub_64ce)

r7 = ror.d(r7, r5)
temp1.d = r0
r0 = r0 + 0x99
cond:3 = temp1.d s<= -0x99
[r7 + 0x13].b = r4.b
[r0].w = r4.w
if (cond:3) then 99 else 100 @ 0x630a

[r4 + r3].b = r1.b
r4 = &data_6434
r4 = &data_63e8
if (cond:4) then 109 @ 0x6212 else 112 @ 0x615a

r7 = &data_62f4
r0 = r0 + 0xf1
r6 = zx.d([r6 + r7].w)
r0 = [&data_63ac].d
<return> tailcall(sub_62ca)

jump(0xab61e)

unimplemented  {sbfx sp, r5, #0x12, #1}
r6 = sp + 0x3cc {arg_3cc}
r11 - r1
r3 = r3 - 0xf7
r5 = r0 u>> 0x11
r6 = r6 - 0x73 {arg_359}
r10 - r1
r0 = zx.d([r2].w)
undefined

r5 - 0xa8
r1 = [r4 + r3].d
goto 125 @ 0x6478

temp0.d = r4
r3 = [temp0.d {&data_63e8}].d
r4 = [temp0.d + 4 {&data_63ec}].d
r6 = [temp0.d + 8 {&data_63f0}].d
temp0.d = r4
[temp0.d {0x78e92fa4}].d = r2
[temp0.d + 4 {0x78e92fa8}].d = r4
[temp0.d + 8 {0x78e92fac}].d = r5
[temp0.d + 0xc {0x78e92fb0}].d = r6
[temp0.d + 0x10 {0x78e92fb4}].d = r7
r4 = r4 + 0x14
r4 = &data_64f4
<return> tailcall(sub_63c2)

r2 = &data_67bc
r5 = 0xc2
r1 = zx.d([r5 + r3].b)
r1 = 0x52
r7 = 0
undefined

int32_t sub_63f4(int32_t arg1, int32_t arg2, int32_t arg3, void* arg4, int32_t* arg5 @ r4, void* arg6 @ r5, int32_t arg7 @ r7)
r3 = zx.d([r3 + r5].w)
[r4].d = r7
r7 - 0xa8
r1 = zx.d([r5 + 3].b)
<return> tailcall(j_sub_6128)

int32_t sub_640c(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r5)
r5 = r5 + 0x50
<return> tailcall(sub_6014)

int32_t sub_642e()
r7 - 0xb5
push(r7)
push(r6)
push(r5)
push(r3)
push(r0)
undefined

int32_t sub_645a(int32_t, int32_t arg2, void* arg3, int32_t* arg4, void* arg5 @ r4, char arg6 @ r6, int32_t arg7)
r7 - 0x58
r1 = zx.d([r4 + 3].b)
unimplemented  {srsdb sp!, #6}
r5 = zx.d([r6 + r7].w)
[r2 + 3].b = r1.b
r5 = 0xc2
r1 = zx.d([r4 + r3].b)
r1 = [sp + 0xf0 {arg7}].d
r4 = zx.d([r1 + 0x11].b)
r4 = &data_670c
r5 = 0xa4
[r3 + r3].d = r1
r5 = r6 << 4
[r4 + r3].b = r6.b
r2 = &data_67bc
r5 = 0xc2
r1 = zx.d([r5 + r3].b)
r1 = 0x52
r7 = 0
undefined

int32_t sub_6494(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r5, int32_t arg6 @ r7)
r4 = &data_65e8
r4 = &data_6728
r7 - 0xa4
[r4 + r3].b = r1.b
r7 = r7 s>> r5
[r7 + 0x7c].d = r1
r7 - 0xf1
r7 = 0x48
unimplemented  {mcrr p1, #6, lr, r8, c3}
r5 = r5 + 0x69
<return> tailcall(sub_60b0)

int32_t sub_64ac(int32_t arg1, char arg2, void* arg3, char* arg4 @ r4, int32_t arg5 @ r7)
[r2 + 0x34].d = r4
[r4 + r7].b = r1.b
r4 = &data_6748
r4 = &data_6744
<return> tailcall(j_sub_69e0)

int32_t sub_64b6(int16_t arg1, int32_t arg2, int32_t arg3, void* arg4)
[r3 + 0x22].w = r0.w
r4 = &data_674c
[r4 + 0x38 {&data_6784}].d = r4
r1 = zx.d([r4 + r3].b)
r4 = &data_6790
r4 = &data_6754
<return> tailcall(sub_678c)

int32_t sub_64c4()
push(r4)
push(r3)
push(r0)
r4 = &data_6758
<return> tailcall(sub_64c8)

int32_t sub_64c8(void* arg1 @ r4)
[r4 + 0x38].d = r4
r1 = [r4 + 0x5c].d
r4 = &data_67bc
<return> tailcall(sub_64ce)

int32_t sub_64ce()
r4 = &data_6760
<return> tailcall(sub_679a)

int32_t sub_64d2(int32_t arg1, int32_t arg2, int32_t arg3 @ r5)
r4 = sp + 0x184 {arg_184}
r4 = sub_6768
r7 - 0xa4
r4 = sp + 0x3a4 {arg_3a4}
push(r11)
push(r10)
push(r9)
push(r8)
push(r6)
push(r0)
r4 = sp + 0x3a4 {arg_38c}
unimplemented  {srsia sp!, #0x1c}
r9 - sp
goto 14 @ 0x6734

r1 = r1 u>> r5
undefined

int32_t sub_64e8(int32_t, int32_t arg2, int32_t arg3 @ r11)
r1 = r1 << 9
r3 = r11 + 0x770
r5 = [&data_6874].d
r4 = &data_6784
r4 = &data_6784
<return> tailcall(sub_67be)

int32_t sub_64ec(void* arg1 @ r5, int32_t arg2 @ r6)
[r5 + 0x3c].d = r6  {"\x1bEZE6F"}
r5 = [&data_6874].d
r4 = &data_6784
r4 = &data_6784
<return> tailcall(sub_67be)

int32_t sub_64f6(int32_t arg1)
r4 = &data_668c
r4 = sub_678c
[r4 + 0x38 {&data_67c4}].d = r4
r1 = r4 + 7
<return> tailcall(sub_64fe)

int32_t sub_64fe(int32_t arg1, int32_t* arg2, int32_t arg3, void* arg4, int32_t arg5 @ r5)
r3 = zx.d([r3 + r5].w)
r3 = zx.d([r3 + r5].w)
goto 3 @ 0x67ca

if (flag:z) then 4 @ &data_68b8+2 else 8 @ 0x67cc

[sp + 0x284 {arg_284}].d = r7
r7 = &data_6a54
r0 = [&data_6c44].d
if (flag:z || flag:c) then 12 @ 0x690e else 19 @ 0x68c2

[sp + 0x290 {arg_290}].d = r7
r7 = &data_6964
r4 = [&data_6b58].d
<return> tailcall(sub_6a30)

r0 = &data_6a20
temp0.d = r1
[temp0.d].d = r2
[temp0.d + 4].d = r5
r1 = r1 + 8
r3 = r3 - 0x58
undefined

temp0.d = r3
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
temp0.d = r3
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r2
[temp0.d + 0xc].d = r6
r3 = r3 + 0x10
if (flag:z) then 31 @ 0x69b6 else 34 @ &data_68c8

r5 = sub_6b74
r4 = &data_6c4c
undefined

r7 - 0xbd
r4 = [sub_6c50].d
r7 = r7 + r4
r7 - 0xa7
push(r7)
push(r6)
push(r5)
push(r3)
push(r0)
temp0.d = r1
[temp0.d].d = r2
[temp0.d + 4].d = r5
r1 = r1 + 8
r4 = &data_6a38
undefined

int32_t sub_6504()
r4 = &data_664c
<return> tailcall(sub_6506)

int32_t sub_6506()
goto 1 @ 0x67d0

r4 = [&data_6b58].d
<return> tailcall(sub_6a30)

int32_t sub_650a(int32_t arg1, int32_t arg2, int32_t* arg3, int32_t* arg4, char arg5 @ r6, int32_t arg6)
r4 = &data_679c
r7 = [&data_67a0].d
flag:z = r7 == 0xad
flag:c = r7 u< 0xad
flag:v = add_overflow(r7, -0xad)
r5 = [&data_68b8].d
unimplemented  {srsia sp!, #0x15}
r5 = [&data_68bc].d
if (flag:z || flag:c) then 9 @ 0x6566 else 31 @ &data_6518+2

r4 = [&data_6618].d
r0 = [r2 + r2].d
r3 = zx.d([r3 + r5].w)
[r4 {0x63a4a4a4}].d = r7
r7 = [&data_6810].d
r7 - 0xab
r1 = ror.d(r1, r5)
push(lr)
push(r5)
push(r3)
push(r2)
push(r1)
push(r0)
unimplemented  {unpredictable}
r7 - 0x55
r1 = ror.d(r1, r4)
push(r5)
push(r3)
push(r2)
push(r0)
r3 - 0x4f
undefined

r4 = &data_6650
push(r7)
push(r5)
push(r2)
if (not(flag:v)) then 36 @ 0x646a else 47 @ 0x6520

r1 = [sp + 0xf0 {arg6}].d
r4 = zx.d([r1 + 0x11].b)
r4 = &data_670c
r5 = 0xa4
[r3 + r3].d = r1
r5 = r6 << 4
[r4 + r3].b = r6.b
r2 = &data_67bc
r5 = 0xc2
r1 = zx.d([r5 + r3].b)
goto 50 @ 0x647e

r3 = zx.d([r7 + r7 {0x494948b0}].w)
r1 = r2 + r7
undefined

r1 = 0x52
r7 = 0
undefined

int32_t sub_655a(int32_t arg1 @ r5)
r5 = r5 + 0x69
<return> tailcall(sub_6162)

int32_t sub_65b0(void* arg1 @ r4)
[r4 + 0x38].d = r4
r5 = [&data_6938].d
r4 = &data_6848
r4 = &data_6848
unimplemented  {setend be}
undefined

int32_t sub_65da(int32_t arg1, int32_t* arg2, int32_t* arg3, int32_t arg4 @ r4, int32_t arg5 @ r6, int32_t arg6)
r7 = &data_66f0
r5 = [&data_69a4].d
temp0.d = r2
[temp0.d].d = r1
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r6
[temp0.d + 0x14].d = r7
r2 = r2 + 0x18
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r5
r1 = r1 + 0xc
r7 = [sp + 0x124 {arg6}].d
r6 = zx.d([r5 + r6].w)
r1 = [r2 + 0x5c].d
if (not(flag:v)) then 19 @ 0x6684 else 20 @ &data_65e8+2

jump(0x9ae1d8)

r4 = &data_6880
r7 = [&data_6880].d
[r5 + 0x34 {0xab78f163}].d = r7
r1 = r4 + 7
r4 = &data_6884
r4 = &data_6887+1
r7 = r7 s>> r5
[r7 + 0x7c {0xffff13c5}].d = r1
r0 = [r5 + 4 {0xab78f133}].d
r0 = [r5 + 4 {0xab78f133}].d
r0 = [r5 + 4 {0xab78f133}].d
r7 - 0xf1
r7 = 0x48
[r1 + 2 {&data_6887+2}].w = r0.w
goto 35 @ 0x68d0

push(r7)
push(r6)
push(r5)
push(r3)
push(r0)
temp0.d = r1
[temp0.d {&data_6887}].d = r2
[temp0.d + 4 {sub_688a}].d = r5
r1 = r1 + 8
r4 = &data_6a38
undefined

int32_t sub_6608(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r7)
r5 = &data_672c
r4 = sub_689c
[r4 + 0x38 {&data_68d4}].d = r4
[r4 + r3].b = r1.b
r0 = r7 s>> 0xf
r6 = [r4 + 0x50 {&data_68ec}].d
<return> tailcall(sub_68de)

int32_t sub_6624(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t* arg5 @ r6)
r5 - 0xac
[r6 + r3].d = r1
<return> tailcall(sub_68f2)

int32_t sub_6630(int32_t arg1, int32_t arg2, int32_t arg3 @ r4)
r1 = r1 u>> r4
r4 = &data_68c4
r4 = &data_68c8
<return> tailcall(sub_6900)

int32_t sub_663e(int32_t arg1, int32_t arg2, int32_t arg3, int32_t* arg4)
[r3 + r3].d = r1
if (flag:z) then 2 @ 0x658c else 5 @ 0x6642

unimplemented  {srsia sp!, #0x18}
r9 - sp
goto 9 @ 0x6592

r7 = 0xa2
cond:0 = r7 != 0
sp = sp - 0x164
if (cond:0) then 9 @ 0x6592 else 10 @ 0x6648

undefined

r7 = 0xac
r4 = zx.d([r5 + r5].w)
r5 = sp + 0x134 {var_30}
r4 = &data_68e4
r7 - 0xa4
sp = sp - 0x1c4
r6 = sp + 0xbc {var_26c}
push(r11)
push(r10)
push(r9)
push(r8)
push(r6)
push(r3)
push(r2)
r0 = sp + 0x3c4 {arg_80}
call(0xda58f8)
r7 = 0xac
r4 = zx.d([r5 + r5].w)
[r1 + r5].b = r5.b
r4 = &data_68f8
r7 = 0xa4
cond:1 = r7 != 0
push(r7)
push(r6)
push(r4)
push(r3)
push(r0)
if (cond:1) then 38 @ 0x65b8 else 40 @ 0x666e

unimplemented  {setend be}
undefined

r7 - 0xf0
[r6 + r3].d = r1
undefined

int32_t sub_66bc(int32_t arg1, int32_t arg2, int32_t, void* arg4, void* arg5 @ r4, int32_t arg6 @ r5, uint32_t* arg7 @ r6)
r1 = zx.d([r4 + 3].b)
r3 = r3 + 0x4d
r4 = &data_6954
r7 - 0xa4
[r6 + r3].d = r1
r6 = sp + 0xbc {arg_bc}
unimplemented  {srsia sp!, #0}
r4 = [&data_6a74].d
r6 = sp + 0x348 {arg_348}
r6 = zx.d([r3 + r0].w)
r3 = zx.d([r3 + r5].w)
r5 = [&data_6844].d
r4 = sub_6768
r4 = &data_696c
undefined

int32_t sub_66dc(int32_t, int32_t arg2, int32_t, int32_t arg4, int32_t* arg5 @ r5)
r7 - 0x50
[r5 + r3].d = r1
r6 = sp + 0x29c {arg_29c}
<return> tailcall(sub_6944)

int32_t sub_66e4(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, void* arg5 @ r4, int32_t** arg6 @ r6)
r7 = &data_6998
r0 = sp + 0x384 {arg_384}
r7 = [r3 + 0x48].d
r1 = &data_6a34
r7 = [r4 + 0x40].d
r7 = [&data_685c].d
cond:0 = r7 != 0xcd
[r6 + r3].d = r1
r6 = sp + 0xbc {arg_bc}
if (cond:0) then 10 @ 0x6742 else 35 @ 0x66f8

r0 = r7 s>> 0xf
r6 = [r4 + 0x50].d
r4 = sub_6a88
push(r11)
push(r10)
push(r9)
push(r8)
push(r6)
push(r4)
r0 = [&data_6b14].d
r7 = sx.d([r4 + r0 {0xa5c1b77d}].w)
r3 = sp + 0x290 {arg_278}
temp0.d = r0
r0 = [temp0.d {0xa5c14cf5}].d
r5 = [temp0.d + 4 {0xa5c14cf9}].d
r3 = zx.d([r3 + r5].w)
r7 - 0x5b
r1 = zx.d([r4 + 3 {&data_6a8b}].b)
r7 = r7 s>> r5
[r7 + 0x7c].d = r1
r0 = [r5 + 4].d
r7 - 0xf1
r7 = 0x48
[r1 + 2 {&data_8}].w = r0.w
<return> tailcall(sub_6a30)

r4 = r0 + 5 {arg_389}
r7 - 0xf5
[r4 + r3].d = r1
<return> tailcall(sub_6a50)

int32_t sub_6768()
r5 = &data_68ac
r4 = &data_69fc
[r4 + 0x38 {&data_6a34}].d = r4
r0 = [&data_6af4].d
call(r9)
[r0 + 0x1b].b = r3.b
<return> tailcall(sub_69d6)

int32_t j_sub_69e0()
r7 - 0xa8
r0 = &data_6b1c
<return> tailcall(sub_69e0)

int32_t sub_678c(int32_t, void* arg2, int32_t, int32_t arg4, int32_t arg5 @ r4, int32_t arg6 @ r9)
r5 = zx.d([r1 + 0x2a].w)
sp = r4 - 0xada
[r5 + r3].b = r1.b
if (flag:n) then 4 else 5 @ 0x6798

jump(0xf5e40)

sp = r11 + 0xac00ac00
r9 = r9 + lr
<return> tailcall(sub_6a68)

int32_t sub_679a(int32_t arg1 @ r9)
r5 - 0xac
r9 = r9 + lr
<return> tailcall(sub_6a68)

int32_t sub_67a4(int32_t arg1, int32_t arg2, int32_t, int32_t arg4, int32_t* arg5 @ r4)
r7 = [&data_6a38].d
r7 - 0xad
r1 = [r4 + r3].d
<return> tailcall(sub_6afc)

int32_t sub_67ac(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t* arg5 @ r4)
r5 - 0x50
r1 = [r4 + r3].d
<return> tailcall(sub_6a12)

int32_t sub_67b2(int32_t arg1) __noreturn
r7 = [sp + 0x160 {arg1}].d
r4 = sp + 0x384 {arg_384}
trap(0xd7)
{ Does not return }

int32_t sub_67be()
undefined

int32_t sub_67d4(int32_t arg1 @ r9, int32_t arg2 @ r12)
r7 - 0x40
r9 = r9 + r12
r4 = [&data_6970].d
r7 = 0xaf
r7 = &data_68f0
undefined

int32_t sub_67f4(int32_t, int32_t arg2, int32_t, int32_t arg4, void* arg5 @ r4)
r1 = zx.d([r4 + r3].b)
goto 2 @ 0x6a58

undefined

int32_t sub_67f8(void* arg1, char arg2, int32_t, int32_t arg4)
r4 = zx.d([r0 + 0x3a].w)
[r4 + r3].b = r1.b
<return> tailcall(j_sub_6cb8)

int32_t sub_6824(int32_t arg1, void* arg2, int32_t arg3, int32_t arg4 @ r7)
r7 - 0x40
r4 = [&data_6bac].d
[r1 + 0x68].d = r7
<return> tailcall(sub_6a88)

int32_t sub_688a(int32_t arg1, int32_t arg2, void* arg3, int32_t arg4 @ r4)
[r2 + 0x34].d = r0
r1 = r1 u>> r4
r4 = &data_6b20
r4 = &data_6b24
r3 = sp + 0x13c {arg_13c}
<return> tailcall(sub_6af6)

int32_t sub_689c(int32_t arg1, int32_t arg2, int32_t* arg3, int32_t arg4, int32_t arg5 @ r6)
temp0.d = r2
[temp0.d].d = r6
r2 = r2 + 4
<return> tailcall(sub_6aec)

int32_t sub_68a0(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r4)
r0 = r3 + 1
r7 - 0xab
r1 = r1 u>> r4
<return> tailcall(sub_6be8)

int32_t sub_68d8(void* arg1, int32_t arg2, int32_t arg3, void* arg4)
r5 = 0x4c
r1 = zx.d([r3 + r3].b)
call(r9)
<return> tailcall(sub_68de)

int32_t sub_68de(void* arg1, int32_t arg2, int32_t arg3, char arg4)
[r0 + 0x1b].b = r3.b
r0 = sp + 0x340 {arg_340}
<return> tailcall(sub_6b40)

int32_t sub_68f2(int32_t, char arg2, int32_t* arg3, int32_t arg4, char* arg5 @ r6, int32_t arg6 @ r7)
[r6 + r3].b = r1.b
r5 = r7 - 0x44004400
r1 = [r2 + r3].d
jump(0xff06d682)

int32_t sub_6900()
r7 - 0x44
r4 = [&data_6c88].d
<return> tailcall(sub_6c56)

int32_t sub_690c(void* arg1, int32_t* arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r4, int32_t arg6 @ r5)
[r0 + 0x54].d = r4
r0 = &data_6a20
temp0.d = r1
[temp0.d].d = r2
[temp0.d + 4].d = r5
r1 = r1 + 8
r3 = r3 - 0x58
undefined

int32_t sub_691e(int32_t arg1, char arg2, int32_t arg3, int32_t arg4, char* arg5 @ r4)
r5 - 0x44
[r4 + r3].b = r1.b
<return> tailcall(sub_6b84)

int32_t sub_6924(int32_t arg1, void* arg2, int32_t arg3 @ r4)
[r1 + 0x54].d = r4
r7 = sp + 0x130 {arg_130}
r7 = r7 + r4
r7 - 0xa7
push(r7)
push(r6)
push(r5)
push(r3)
push(r0)
goto 10 @ 0x6b7c

r7 - 0xa6
r1 = r1 u>> r4
r7 = &data_6cc0
<return> tailcall(sub_6de4)

int32_t sub_6944()
undefined

int32_t sub_6946(int32_t arg1, int32_t, int32_t, void* arg4, int32_t arg5 @ r5)
r3 = zx.d([r3 + r5].w)
r7 - 0x5b
r0 = sp + 0x384 {arg_384}
undefined

int32_t sub_6956(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r5, int32_t arg6 @ r7)
r5 - 0x48
r0 = &data_6cf4
r7 = r7 s>> r5
[r7 + 0x6c].d = r1
r4 = &data_6c00
r7 - 0xf1
r7 = 0x48
<return> tailcall(sub_69f8)

int32_t j_sub_6c30(int32_t arg1, int32_t arg2, int32_t arg3 @ r5)
<return> tailcall(sub_6c30)

int32_t sub_6976(int32_t arg1, int32_t arg2, int32_t* arg3, void* arg4, char* arg5 @ r6, int32_t arg6 @ r7)
r4 = &data_6ac8
r4 = &data_6b8c
[r4 + 0x38 {&data_6bc4}].d = r4
r1 = zx.d([r4 + r3].b)
push(r7)
push(r5)
push(r2)
r4 = &data_6c14
goto 9 @ &data_6c4c

temp0.d = r2
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r3
[temp0.d + 0xc].d = r7
r2 = r2 + 0x10
goto 16 @ 0x6e9c

[r1 + 0xc].w = r2.w
r5 = 0x22
[r3 + 0x13].b = r1.b
r0 = 0x1f
r7 = r7 << 0x18
r0 = r2 - 3
r5 = 0xc2
r1 = [r2 + 0xc].d
r0 = [r2 + r3].d
push(r11)
push(r10)
push(r9)
push(r8)
push(r6)
push(r5)
[r6 + r3].b = r1.b
undefined

int32_t j_sub_6238(int32_t arg1, void* arg2)
<return> tailcall(sub_6238)

int32_t sub_69d6(int32_t arg1, int32_t arg2, void* arg3, void* arg4, int32_t arg5 @ r6)
r4 = &data_6c6c
r7 = 0xa4
cond:0 = r7 != 0
r1 = [r3 + 0x4c].d
if (cond:0) then 5 @ 0x6928 else 13 @ 0x69de

r7 = r7 + r4
r7 - 0xa7
push(r7)
push(r6)
push(r5)
push(r3)
push(r0)
goto 15 @ 0x6b7c

r4 = zx.d([r2 + r6].w)
<return> tailcall(sub_69e0)

r7 - 0xa6
r1 = r1 u>> r4
r7 = &data_6cc0
<return> tailcall(sub_6de4)

int32_t sub_69e0(int32_t arg1, int32_t arg2, int32_t* arg3, int32_t arg4, int32_t arg5 @ r5, int32_t* arg6 @ r6, void* arg7 @ r7, int32_t arg8)
r1 = [r2 + r3].d
if (not(flag:z)) then 2 @ 0x6a9c else 4 @ 0x69e4

r0 = [sp + 0x3b8 {arg8}].d
<return> tailcall(sub_6d00)

cond:0 = r7 != 0x54
[r6 + r3].d = r1
unimplemented  {mcr p5, #1, pc, c15, c4, #7}
if (cond:0) then 8 @ 0x6aa6 else 10 @ 0x69ee

r4 = 0x4c
undefined

r4 = zx.d([r7 + r5].w)
undefined

int32_t j_sub_6c50(int32_t arg1, int32_t arg2, int32_t arg3 @ r6)
<return> tailcall(sub_6c50)

int32_t sub_69f4(int32_t arg1, void* arg2 @ r4)
r5 - 0x70
r1 = [r4 + 0x4c].d
<return> tailcall(sub_69f8)

int32_t sub_69f8(int32_t arg1, int32_t arg2, void* arg3, void* arg4, void* arg5 @ r5, void* arg6 @ r6, int32_t arg7 @ r7, int32_t arg8 @ r9, int32_t arg9 @ r12)
if (flag:z || flag:c) then 1 @ 0x6a46 else 2 @ 0x69fa

if (not(flag:z)) then 6 @ 0x6b00 else 10 @ 0x6a48

r4 = r6 - 5
temp0.d = r7
r7 = r7 - 0x20
if (temp0.d == 0x20) then 13 @ 0x6a0e else 16 @ 0x6a00

cond:0 = r5 != 0x90
cond:2 = r5 == 0x90
r1 = [r5 + 0xc].d
if (cond:0) then 20 @ 0x6b50 else 21 @ 0x6b06

r0 = zx.d([r3 + r5].w)
r1 = zx.d([r2 + r3].b)
undefined

r4 = zx.d([r4 + r6].w)
r0 = [&data_6d58].d
<return> tailcall(sub_6a12)

r7 = 0xa4
cond:1 = r7 != 0
r1 = [r3 + 0x4c].d
if (cond:1) then 23 @ 0x6950 else 26 @ 0x6a06

undefined

lr = 0xcd27
if (cond:2) then 29 @ 0x6a56 else 31 @ 0x6b0c

r7 - 0xac
r0 = sp + 0x3c4 {arg_3c4}
<return> tailcall(sub_6bb6)

cond:3 = r7 u>= 0xac
r9 = r9 + r12
if (cond:3) then 46 @ 0x6aa8 else 47 @ 0x6a0c

r4 = zx.d([r6 + r7].w)
undefined

r7 - 0xb4
r1 = [r6 + 0xc].d
r7 - 0xf6
r1 = r1 u>> r5
r4 = [&data_6eec].d
r5 = &data_6e1c
r4 = &data_6dac
[r4 {&data_6dac}].d = r7
r7 - 0xac
r4 = [sp + 0x3c4 {arg_3c4}].d
r7 - 0xf6
[sp + 0x3a4 {arg_3a4}].d = r4
r7 - 0xf5
r1 = r1 u>> r4
<return> tailcall(sub_6d74)

undefined

r4 = &data_6ca4
goto 13 @ 0x6a0e

int32_t sub_6a12(int32_t arg1, int32_t arg2, int32_t arg3, void* arg4, void* arg5 @ r5, void* arg6 @ r6, void* arg7 @ r7, char* arg8, int16_t arg9)
if (not(flag:z)) then 1 @ 0x6acc else 2 @ 0x6a14

goto 5 @ 0x6d2e

r4 = zx.d([r7 + r5].w)
[sp + 0x3c4 {arg_3c4}].d = r0
goto 6 @ 0x6c76

if (not(flag:v)) then 7 @ 0x6e22 else 15 @ 0x6d30

if (not(flag:n)) then 34 @ 0x6d14 else 37 @ 0x6c78

r4 = &data_70b4
r4 = &data_70b8
r6 = sp + 0x134 {arg_134}
r4 = &data_70c0
cond:0 = r7 == 0xa4
[r6 + r3].b = r1.b
r6 = [sp + 0x9c {arg8}].d
if (cond:0) then 47 @ 0x6d7c else 49 @ 0x6e32

r7 - 0xe9
[r6 + 0x13].b = r1.b
r3 = r5 s>> 0xe
[r5 + 0x58].d = r6
r0 = sp + 0x174 {arg_174}
push(r11)
push(r10)
push(r9)
push(r8)
push(r6)
push(r4)
[r6 + 0x13].b = r1.b
r3 = r5 s>> 0xe
r5 = 0xae
r5 = zx.d([r0 + r5 {arg9}].w)
r4 = &data_6ff4
r5 - 0xa4
[r5 + 0xc].d = r1
undefined

r5 - 0x40
r1 = zx.d([r6 + 3].b)
undefined

r3 = zx.d([r3 + r5].w)
r7 - 0x5b
unimplemented  {vst4.16 {d31, d1, d3, d5}, [r1:0x80], r7}
r0 = [&data_6d40].d
r0 = [&data_6d20].d
[r4 + 0x3c].d = r4  {"\x1bEZE6F"}
r0 = [&data_700c].d
r4 = &data_6f24
r4 = &data_6f1c
<return> tailcall(sub_6f56)

r5 = r5 + 0x4f
undefined

r7 - 0xb9
[r6 + r3].b = r1.b
undefined

int32_t sub_6a30(int32_t arg1, int32_t arg2, void* arg3, void* arg4, void* arg5 @ r5, void* arg6 @ r6, int32_t arg7 @ r7, int32_t arg8)
if (flag:z || flag:c) then 1 @ 0x6a7e else 2 @ 0x6a32

undefined

r4 = r6 - 5
temp0.d = r7
r7 = r7 - 0x20
cond:0 = temp0.d != 0x20
if (temp0.d == 0x20) then 7 @ 0x6a46 else 8 @ &data_6a38

if (cond:0) then 10 @ 0x6b00 else 14 @ 0x6a48

r5 = zx.d([r2 + r6].w)
undefined

cond:1 = r5 != 0x90
cond:2 = r5 == 0x90
r1 = [r5 + 0xc].d
if (cond:1) then 17 @ 0x6b50 else 18 @ 0x6b06

r0 = zx.d([r3 + r5].w)
r1 = zx.d([r2 + r3].b)
undefined

undefined

lr = 0xcd27
if (cond:2) then 20 @ 0x6a56 else 22 @ 0x6b0c

r4 = zx.d([r6 + r7].w)
undefined

r7 - 0xb4
r1 = [r6 + 0xc].d
r7 - 0xf6
r1 = r1 u>> r5
r4 = [&data_6eec].d
r5 = &data_6e1c
r4 = &data_6dac
[r4 {&data_6dac}].d = r7
r7 - 0xac
r4 = [sp + 0x3c4 {arg8}].d
r7 - 0xf6
[sp + 0x3a4 {arg_3a4}].d = r4
r7 - 0xf5
r1 = r1 u>> r4
<return> tailcall(sub_6d74)

int32_t j_sub_6f64(int32_t arg1, int32_t arg2, void* arg3, void* arg4 @ r4, int32_t arg5 @ r11)
<return> tailcall(j_sub_6f64)

int32_t sub_6a50()
undefined

int32_t j_sub_6cb8(void* arg1 @ r5)
<return> tailcall(sub_6cb8)

int32_t sub_6a5c(int32_t arg1, int32_t arg2, void* arg3, void* arg4, void* arg5 @ r6, int32_t arg6 @ r7, int16_t arg7 @ r8)
r5 = 0x70
[r3 + 0x13].b = r1.b
r0 = 0x1f
r7 = r7 << 0x18
cond:0 = r7 != 0
r0 = zx.d([r2 + 0x26].w)
if (cond:0) then 7 @ 0x6ab2 else 17

[lr].w = r8.w
r7 - 0xf6
[r5 + 0xc {&data_7c}].d = r1
r4 = [&data_6e90].d
[r0 + r1].w = r4.w
r3 = zx.d([r3 + r5].w)
[r4 {0x5cf1a778}].d = r7
r7 - 0xa8
r1 = zx.d([r6 + 3].b)
undefined

<return> tailcall(sub_6a68)

int32_t sub_6a68()
unimplemented  {setend be}
undefined

int32_t sub_6a88(int32_t arg1, uint32_t* arg2, int32_t arg3, void* arg4 @ r4, int32_t arg5 @ r5, int32_t arg6 @ r7, int32_t arg7)
r0 = 0x1f
r7 = r7 << 0x18
r0 = r2 u>> 0x1f
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r5
r1 = r1 + 0xc
r6 = [sp + 0x130 {arg7}].d
r3 = [&data_6e18].d
r5 - 0x2f
[r4 + 0xc].d = r1
undefined

int32_t sub_6a9a(int32_t arg1)
r7 - 0x78
r0 = [sp + 0x3b8 {arg1}].d
<return> tailcall(sub_6d00)

int32_t sub_6aec(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4)
if (not(flag:z)) then 1 @ 0x6b38 else 2 @ 0x6aee

<return> tailcall(sub_6d96)

unimplemented  {mcrr2 p0, #4, r3, r12, c12}
r4 = &data_6d84
r7 = 0xa4
<return> tailcall(sub_6af6)

int32_t sub_6af6()
push(r6)
push(r5)
undefined

int32_t j_sub_6afc(int32_t arg4)
r7 - 0x50
<return> tailcall(sub_6afc)

int32_t sub_6afc(void* arg1 @ r5, void* arg2 @ r6, int32_t arg3 @ r7, int32_t arg4)
r0 = sp + 0x3a4 {arg_3a4}
unimplemented  {mcr p13, #4, r2, c15, c0, #4}
r1 = [r5 + 0xc].d
if (not(flag:z)) then 4 @ 0x6b50 else 5 @ 0x6b06

undefined

lr = 0xcd27
if (flag:z) then 7 @ 0x6a56 else 9 @ 0x6b0c

r4 = zx.d([r6 + r7].w)
undefined

r7 - 0xb4
r1 = [r6 + 0xc].d
r7 - 0xf6
r1 = r1 u>> r5
r4 = [&data_6eec].d
r5 = &data_6e1c
r4 = &data_6dac
[r4 {&data_6dac}].d = r7
r7 - 0xac
r4 = [sp + 0x3c4 {arg4}].d
r7 - 0xf6
[sp + 0x3a4 {arg_3a4}].d = r4
r7 - 0xf5
r1 = r1 u>> r4
<return> tailcall(sub_6d74)

int32_t sub_6b2a(int32_t arg1, int32_t arg2, int32_t arg3 @ r4, int32_t arg4 @ r7, int32_t arg5 @ r8, int32_t arg6 @ r9, int32_t arg7 @ r10, void** arg8 @ r12)
temp1.d = r4
cond:0 = flag:c
r4 = adc.d(temp1.d, r1, cond:0)
flag:c = adc.d(temp1.d, r1, cond:0) u< temp1.d || (cond:0 && adc.d(temp1.d, r1, cond:0) == temp1.d)
flag:v = unimplemented
r4 = [&data_6f00].d
r6 = &data_6e44
r4 = &data_6dc4
r5 = 0xc2
flag:n = r5 s< 0
flag:z = r5 == 0
r4 = [&data_6edc].d
jump(&data_6b3a => 13 @ &data_6b3a)

if (flag:n == flag:v) then 14 else 31 @ 0x6b3e

temp0.d = r0 - 0x18
[temp0.d].d = r4
temp0.d = temp0.d + 4
[temp0.d].d = r5
temp0.d = temp0.d + 4
[temp0.d].d = r6
temp0.d = temp0.d + 4
[temp0.d].d = r8
temp0.d = temp0.d + 4
[temp0.d].d = r9
temp0.d = temp0.d + 4
[temp0.d].d = r10
temp0.d = temp0.d + 4
[temp0.d].d = sp {arg_0}
temp0.d = temp0.d + 4
r0 = r0 - 0x1c
goto 31 @ 0x6b3e

if (flag:z || flag:n != flag:v) then 32 else 34 @ 0x6b42

r5 = r7 u>> 0x18
goto 34 @ 0x6b42

if (not(flag:c)) then 35 else 38 @ 0x6b46

syscall_info = 0x994fa6
syscall
goto 38 @ 0x6b46

if (flag:n == flag:v) then 39 else 43 @ 0x6b4e  {"O4&^G"}

Coproc_SendOneWord(r4, 0, 1, 0xf, 1, 7)
[r12].d = sp {arg_0}
r12 = r12 + 0xd27
goto 43 @ 0x6b4e  {"O4&^G"}

undefined

int32_t sub_6b40(int32_t arg1, uint32_t* arg2, int32_t arg3, int32_t arg4, int32_t* arg5 @ r4, int32_t arg6 @ r5, int32_t arg7 @ r6, int32_t arg8)
if (not(flag:z)) then 1 @ 0x6a8c else 12 @ 0x6b42

r0 = r2 u>> 0x1f
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r5
r1 = r1 + 0xc
r6 = [sp + 0x130 {arg8}].d
r3 = [&data_6e18].d
r5 - 0x2f
[r4 + 0xc].d = r1
undefined

r7 = [&data_6ddc].d
flag:v = add_overflow(r7, -0x99)
temp1.d = r1
r1 = r1 u>> r6
flag:n = temp1.d u>> r6 s< 0
flag:z = temp1.d u>> r6 == 0
r6 = sp + 0xbc {arg_bc}
if (flag:z || flag:n != flag:v) then 20 @ 0x6b9c else 25 @ 0x6b4c

[r4 + 0x38].d = r4
r1 = [r4 + r3].d
r4 = &data_6e38
r4 = &data_6e34
<return> tailcall(sub_6e6e)

r4 = &data_6d80
r6 = sp + 0x340 {arg_340}
undefined

int32_t sub_6b64()
r7 - 0x40
r7 - 0xae
r0 = sp + 0x384 {arg_384}
<return> tailcall(sub_66bc)

int32_t sub_6b74(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t* arg5 @ r5)
r7 - 0xb0
[r5 + r3].d = r1
<return> tailcall(sub_65da)

int32_t sub_6b7a(int32_t, int32_t arg2, int32_t arg3 @ r4)
r5 - 0xf4
r7 - 0xa6
r1 = r1 u>> r4
r7 = &data_6cc0
<return> tailcall(sub_6de4)

int32_t sub_6b84(int32_t arg1, char arg2, void* arg3, void* arg4 @ r4)
r7 - 0x44
unimplemented  {vst4.16 {d31, d1, d3, d5}, [r1:0x80], r7}
r0 = [&data_6c48].d
r0 = [&data_6c2c].d
[r2 + 0x38].d = r0
[r4 + 3].b = r1.b
r4 = &data_6f24
r4 = &data_6e28
<return> tailcall(sub_6e60)

int32_t sub_6b98(int32_t arg1, int32_t arg2, int32_t, int32_t arg4)
r4 = zx.d([r0 + 0x22].w)
r4 = &data_6e2c
[r4 + 0x38 {&data_6e64}].d = r4
r1 = [r4 + r3].d
r4 = &data_6e38
r4 = &data_6e34
<return> tailcall(sub_6e6e)

int32_t sub_6bb6(int32_t arg1, char arg2, int32_t, int32_t arg4, int32_t arg5 @ r5, int32_t arg6 @ r7, char* arg7)
r0 = &data_6f70
push(r10)
push(r6)
push(r5)
push(r4)
push(r3)
r0 = [&data_6f04].d
r7 - 0x22
push(r7)
push(r6)
push(r5)
push(r4)
push(r0)
r6 = sp + 0xbc {arg_94}
goto 15 @ 0x6e26

r6 = sp + 0x134 {arg_10c}
r4 = &data_70c0
cond:0 = r7 == 0xa4
[r6 + r3].b = r1.b
r6 = [sp + 0x9c {arg7}].d
if (cond:0) then 21 @ 0x6d7c else 23 @ 0x6e32

r5 = r5 + 0x4f
undefined

r7 - 0xb9
[r6 + r3].b = r1.b
undefined

int32_t sub_6bc8(int32_t arg1, int32_t arg2, int32_t arg3)
r3 = sp + 0x2d0 {arg_2d0}
<return> tailcall(sub_67f4)

int32_t sub_6be8(int32_t arg1, void* arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r5, int32_t* arg6 @ r6, int32_t arg7 @ r7)
r4 = &data_6e7c
[r1 + 2].w = r7.w
if (flag:n) then 3 else 4 @ 0x6bf0

jump(0x76aa8)

r1 = [r6 + r3].d
if (flag:z || flag:c) then 6 @ 0x6c40 else 9 @ 0x6bf4

r5 - 0x4c
r1 = zx.d([r4 + 0x13 {&data_6e8f}].b)
undefined

r0 = r2 - 5
temp0.d = r7
r7 = r7 - 0x20
if (temp0.d == 0x20) then 13 @ 0x6c08 else 17 @ 0x6bfa

r4 = &data_6f4c
unimplemented  {srsia sp!, #4}
r1 = r1 u>> r5
undefined

r5 - 0xa4
r1 = zx.d([r6 + r3].b)
undefined

int32_t sub_6c30(int32_t arg1, int32_t arg2, int32_t arg3 @ r5)
r7 - 0xf6
r1 = r1 u>> r5
<return> tailcall(sub_6e96)

int32_t sub_6c50(int32_t arg1, int32_t arg2, int32_t arg3 @ r6)
r0 = r9
r7 - 0xd2
r1 = r1 u>> r6
<return> tailcall(sub_6c56)

int32_t sub_6c56()
unimplemented  {mcr p5, #1, pc, c15, c4, #5}
<return> tailcall(sub_6ebc)

int32_t j_sub_6f64(int32_t arg1, int32_t arg2, void* arg3, void* arg4 @ r4, int32_t arg5 @ r11)
<return> tailcall(sub_6f64)

int32_t sub_6cb8(void* arg1 @ r5)
r5 - 0x44
r1 = zx.d([r5 + 0x13].b)
undefined

int32_t sub_6d00(int32_t arg1, char arg2, void* arg3, int32_t* arg4 @ r4, int32_t* arg5 @ r5, void* arg6 @ r6, int32_t arg7 @ r7)
sp = r7 - 0x5c005c00
[r6 + 0x13].b = r1.b
goto 3 @ 0x6fd0

[r2 + 6].w = r4.w
r0 = r0 << 1
r7 = r7 s>> 0x17
[r4 + r4].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
unimplemented  {ldrex r0, [r9, #0x388]}
r0 = r0
[r5 + 0x22].w = r0.w
r1 = adc.d(r1, r2, flag:c)
r0 = [r0].d
[r0 + r6].d = r0
r1 = r0 << 1
temp0.d = r5
r3 = [temp0.d].d
r5 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r0 = r0
r1 = &data_6ff0
[r4 + 0xc].d = r4
r1 = r0 << 1
flag:c = r9 u< r1
r4 = zx.d([r2 + 0x2c].w)  {"4&^G"}
[sp + 0x114].d = r4
unimplemented  {vqadd.U16 d30, d0, d21}
temp1.d = r0
cond:0 = flag:c
r0 = adc.d(temp1.d, r4, cond:0)
flag:c = adc.d(temp1.d, r4, cond:0) u< temp1.d || (cond:0 && adc.d(temp1.d, r4, cond:0) == temp1.d)
r0 = zx.d([r0 + 0x28].w)
r4 = [sp + 0x114].d
r0 = zx.d([r2 + 0x2a].w)
[sp + 0x114].d = r0
r0 = zx.d([r2 + 0x2a].w)
r0 = &data_7120
unimplemented  {vceq.S16 d19, d0, d5}
r1 = adc.d(r1, r2, flag:c)
r0 = [r0 {&data_7120}].d
[r7 + r5].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
r0 = zx.d([r5 + 1].b)
r1 = adc.d(r1, r2, flag:c)
unimplemented  {srsdb sp, #0x1a}
r0 = r0
temp0.d = r4
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r7
r4 = r4 + 0xc
r1 = &data_70b8
[r6 + r4].d = r4
r1 = r0 << 1
r0 = r0 + 0x8b
[r1 + 0x16].b = r1.b
[r1 + 4].w = r4.w
r2 = 0x3e  {"ZE6F"}
r2 = r2 - 0x75
r6 = zx.d([r0 + 0xa].w)
r5 = zx.d([r6 + 0x22].w)
r2 = r1 << 0x1a
temp0.d = r3
[temp0.d].d = r1
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
r3 = r3 + 0x10
r4 = r6 << 0x11
r2 = 0x3c  {"\x1bEZE6F"}
undefined

int32_t sub_6d4e(void* arg1, void* arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r5, void* arg6 @ r6, int32_t arg7 @ r7)
cond:0 = r5 u<= 0x50
cond:1 = r5 - 0x50 s< 0
r4 = [&data_7118].d
if (cond:0) then 4 @ 0x6da4 else 10 @ 0x6d54

r7 = r7 - 0x20
[r0 + 0x30].d = r6
[r4 + r3].d = r1
r4 = &data_702c
r4 = &data_7040
<return> tailcall(sub_7078)

r7 = &data_6e88
r0 = &data_7098
[r1 + 0x32].w = r7.w
[r1 + 0x22].w = r7.w
if (cond:1) then 15 else 16 @ 0x6d60

jump(0x76c28)

[r6 + 0xc].d = r1
undefined

int32_t sub_6d64(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t* arg5 @ r6)
r7 - 0x58
r1 = [r6 + r3].d
r6 = sp + 0xbc {arg_bc}
unimplemented  {srsia sp!, #8}
<return> tailcall(sub_6fbc)

int32_t sub_6d74(int32_t, int32_t arg2, int32_t, int32_t arg4, int32_t* arg5 @ r4, int32_t arg6 @ r5, int32_t arg7 @ r9)
r1 = [r4 + r3].d
if (not(flag:z)) then 2 @ 0x6dc2 else 7 @ 0x6d78

r7 - 0xa4
r4 = sp + 0x3c4 {arg_3c4}
unimplemented  {cdp p13, #2, c2, c15, c0, #5}
r9 = sp + r9
undefined

r7 = &data_6f1c
r4 = sp + 0xb4 {arg_b4}
r5 = r5 + 0x4f
undefined

int32_t sub_6d96(int32_t arg1, int32_t arg2, int32_t arg3, void* arg4)
r0 = [&data_6e34].d
[r3 + 0x38].d = r0
r4 = [&data_7120].d
r4 = &data_7060
r4 = &data_7030
<return> tailcall(sub_706a)

int32_t sub_6db0(int32_t, int32_t arg2, int32_t, int32_t arg4)
r4 = 0x40
r4 = &data_7044
[r4 + 0x38 {&data_707c}].d = r4
r1 = zx.d([r4 + r3].b)
r4 = &data_7054
r4 = &data_704c
<return> tailcall(sub_7086)

int32_t sub_6dce(void* arg1 @ r6) __noreturn
r7 - 0xac
r7 = &data_708c
r1 = r1 u>> r5
push(r11)
push(r10)
push(r9)
push(r8)
push(r6)
push(r5)
push(r3)
push(r2)
r1 = [r6 + 0x4c].d
trap(0x27)
{ Does not return }

int32_t sub_6de4()
undefined

int32_t sub_6e60()
undefined

int32_t sub_6e68(int32_t arg1, char arg2, int32_t, void* arg4)
r5 = 0x70
[r3 + 0x13].b = r1.b
r0 = 0x1f
<return> tailcall(sub_6e6e)

int32_t sub_6e6e(int32_t arg1 @ r7)
r7 = r7 << 0x18
r0 = &data_ab
r4 = &data_6f6c
r4 = &data_7108
<return> tailcall(sub_70d4)

int32_t sub_6e96(int32_t arg1, int32_t* arg2, void* arg3 @ r4)
r0 = [&data_723c].d
goto 2 @ 0x70e6

r5 = 0xff
[r1 + r4].d = r4
r1 = r0 << 1
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
undefined

int32_t sub_6ebc(int32_t, int32_t arg2, int32_t, int32_t arg4, void* arg5 @ r5, uint32_t* arg6 @ r6, int32_t arg7)
r4 = [sp + 0x130 {arg7}].d
unimplemented  {mcr p13, #5, r2, c7, c4, #5}
r1 = zx.d([r5 + 0x13].b)
unimplemented  {setend be}
if (flag:n) then 5 else 6 @ 0x6eca

jump(0x76d8a)

[r6 + r3].d = r1
undefined

int32_t sub_6f40(int32_t arg1, int32_t arg2, int32_t arg3, int32_t** arg4, int32_t* arg5 @ r4)
r7 = zx.d([r4 + 0x1a].w)
r5 = zx.d([r4 + r7].b)
temp0.d = r4
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
r5 = 0xff
[r4 + r0].d = r0
r1 = r0 << 1
r5 = 0xff
[r3 + r0].d = r4
r1 = r0 << 1
r5 = 0xff
[r3 + r0].d = r0
<return> tailcall(sub_6f56)

int32_t sub_6f56(int32_t arg1, int32_t arg2, void* arg3, int32_t* arg4, void* arg5 @ r6, void* arg6 @ r7)
r1 = r0 << 1
r5 = zx.d([r2 + 0x1a].w)
r4 = [r5 + 0x2c].d  {"4&^G"}
r7 = [r7 + 0xc].d
[r2 + 0xc].d = r0
r1 = r0 << 1
goto 7 @ &data_7034+2

r5 = zx.d([r6 + 0x22].w)
r2 = r1 << 0x1a
temp0.d = r3
[temp0.d].d = r1
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
r3 = r3 + 0x10
r4 = r6 << 0x11
r2 = 0x3c  {"\x1bEZE6F"}
undefined

int32_t sub_6f64(int32_t arg1, int32_t arg2, void* arg3, void* arg4 @ r4, int32_t arg5 @ r11)
r0 = r0 << r0
[r0 + 0x40].d = r0
r1 = r4 << 2
flag:c = test_bit(r4, 0x20 - 2)
r0 = r0
[r0 + r0].d = r0
r4 = zx.d([r4 + 0xa].w)
r5 = r4
r0 = r0
[r0 + 0x18].w = r0.w
r4 = [r5 + 0xc].d
r3 = sx.d([r2 + r1].b)
r7 = zx.d([r2 + 0xa].w)
[r5].d = sp {arg_0}
[r5 + 4].d = r11
r5 = r5 - 0xcc
r1 = zx.d([r1 + r6].b)
r4 = [r7 + 0x2c].d  {"4&^G"}
unimplemented  {vqshl.U8 d1, d5, d2}
r1 = adc.d(r1, r2, flag:c)
r0 = [r0 + r4].d
r3 = r0 u>> 0x16
[r0 + 0x14].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
[r7 + 0x1e].w = r7.w
r0 = [&data_6fcc].d
r1 = adc.d(r1, r4, flag:c)
undefined

int32_t sub_6fbc(int32_t arg1, void* arg2, void* arg3, int32_t arg4 @ r4, int32_t* arg5 @ r5, int32_t arg6 @ r6)
r3 = &data_6fc0
[r1 + 0x14].d = r4
r1 = r0 << 1
r0 = r5 s>> 3
r1 = r0
temp1.d = r1
r1 = r1
flag:c = temp1.d u< 0
[sp + 0x74 {arg_74}].d = r0
r0 = adc.d(r0, r4, flag:c)
[r0 + 0x14].b = r0.b
r4 = [r1].d
[r2 + 6].w = r4.w
r0 = r0 << 1
r7 = r7 s>> 0x17
[r4 + r4].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
unimplemented  {ldrex r0, [r9, #0x388]}
r0 = r0
[r5 + 0x22].w = r0.w
r1 = adc.d(r1, r2, flag:c)
r0 = [r0].d
[r0 + r6].d = r0
r1 = r0 << 1
temp0.d = r5
r3 = [temp0.d].d
r5 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r0 = r0
r1 = &data_6ff0
[r4 + 0xc].d = r4
r1 = r0 << 1
flag:c = r9 u< r1
r4 = zx.d([r2 + 0x2c].w)  {"4&^G"}
[sp + 0x114 {arg_114}].d = r4
unimplemented  {vqadd.U16 d30, d0, d21}
temp2.d = r0
cond:0 = flag:c
r0 = adc.d(temp2.d, r4, cond:0)
flag:c = adc.d(temp2.d, r4, cond:0) u< temp2.d || (cond:0 && adc.d(temp2.d, r4, cond:0) == temp2.d)
r0 = zx.d([r0 + 0x28].w)
r4 = [sp + 0x114 {arg_114}].d
r0 = zx.d([r2 + 0x2a].w)
[sp + 0x114 {arg_114}].d = r0
r0 = zx.d([r2 + 0x2a].w)
r0 = &data_7120
unimplemented  {vceq.S16 d19, d0, d5}
r1 = adc.d(r1, r2, flag:c)
r0 = [r0 {&data_7120}].d
[r7 + r5].d = r4
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
r0 = zx.d([r5 + 1].b)
r1 = adc.d(r1, r2, flag:c)
unimplemented  {srsdb sp, #0x1a}
r0 = r0
temp0.d = r4
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r7
r4 = r4 + 0xc
r1 = &data_70b8
[r6 + r4].d = r4
r1 = r0 << 1
r0 = r0 + 0x8b
[r1 + 0x16].b = r1.b
[r1 + 4].w = r4.w
r2 = 0x3e  {"ZE6F"}
r2 = r2 - 0x75
r6 = zx.d([r0 + 0xa].w)
r5 = zx.d([r6 + 0x22].w)
r2 = r1 << 0x1a
temp0.d = r3
[temp0.d].d = r1
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
r3 = r3 + 0x10
r4 = r6 << 0x11
r2 = 0x3c  {"\x1bEZE6F"}
undefined

int32_t sub_706a(void* arg1, void* arg2, int32_t arg3, int32_t* arg4, int32_t* arg5 @ r4, int32_t arg6 @ r5, void** arg7 @ r6, int32_t arg8 @ r7)
if (flag:n) then 1 @ 0x70f8 else 3 @ 0x706c

r1 = [&data_74f8].d
if (flag:n != flag:v) then 9 @ 0x7022 else 34 @ 0x70fc

r3 = r5 u>> 0x1b
r6 = r6 - 0x80
[r4 + 0x18].b = r0.b
r8 = r11
[r1 + 0x16].b = r1.b
undefined

temp0.d = r4
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r7
r4 = r4 + 0xc
r1 = &data_70b8
[r6 + r4].d = r4
r1 = r0 << 1
r0 = r0 + 0x8b
[r1 + 0x16].b = r1.b
[r1 + 4].w = r4.w
r2 = 0x3e  {"ZE6F"}
r2 = r2 - 0x75
r6 = zx.d([r0 + 0xa].w)
r5 = zx.d([r6 + 0x22].w)
r2 = r1 << 0x1a
temp0.d = r3
[temp0.d].d = r1
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
r3 = r3 + 0x10
r4 = r6 << 0x11
r2 = 0x3c  {"\x1bEZE6F"}
undefined

r4 = [r4 + 0x50].d
undefined

int32_t sub_7078(int32_t arg1, int32_t* arg2, int32_t arg3, int16_t arg4, int32_t arg5 @ r4, int32_t* arg6 @ r6, int32_t arg7 @ r7)
r5 = [r6 + 0x2c].d  {"4&^G"}
r2 = [r1 + r0].d
r0 = sx.d([r2 + r1].b)
[r2 + r5].w = r3.w
r7 = r7 s>> 0x17
[r6 + r2].d = r4
r1 = r0 << 1
<return> tailcall(sub_7086)

int32_t sub_7086()
unimplemented  {ldrex lr, [r0, #0x120]}
undefined

int32_t sub_70d4(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t** arg4, void* arg5 @ r4, int32_t arg6 @ r5, int32_t arg7 @ r6, int32_t arg8 @ r7)
temp0.d = r0
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
temp0.d = r3
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r6
[temp0.d + 0xc].d = r7
r3 = r3 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
r5 = 0xff
[r2 + r4].d = r0
r1 = r0 << 1
r5 = 0xff
[r1 + r4].d = r4
r1 = r0 << 1
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
temp0.d = r4
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r4 = r4 + 0x10
undefined

int32_t sub_7f46(int32_t arg1, void* arg2, void* arg3 @ r6, int32_t arg4 @ r7)
r2 = r7 << 3
sp = sp - 0x1a8
r4 = [r6 + 0x2c].d  {"4&^G"}
r6 = 0x50
r0 = r2 s>> 0xd
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
goto 31 @ 0x7f82  {"vavvavvavvavvavvavvavvavvavvavva…"}

[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {&data_64}].d = r6
[r6 + 0x19 {&data_68+1}].b = r6.b
[r4 + 0x19].b = r1.b
r5 = r1 << 0x19
r0 = r0
r3 = r2 << 0x1c
r0 = r0
if (r0 s>= 0) then 87 @ 0x7f18 else 90 @ 0x7ff2

syscall_info = 0x52
syscall
jump(0xffd553f2)

[r6 + 0x2a {&data_7a}].w = r2.w
r0 = r7 << 0xb
if (r4 u>= 0xdd) then 31 @ 0x7f82 else 93 @ 0x7ffa  {"vavvavvavvavvavvavvavvavvavvavva…"}

[r6 + 8 {&data_58}].b = r3.b
r7 = r7 - 0xa7
r5 = [r2 + 0x10].d
[sp + 0x270 {arg_c8}].d = r7
r5 = 5
r2 = sx.d([r1 + r5].b)
r0 = r5 u>> 0x18 | (r5 u>> 0x10 & 0xff) | (r5 u>> 8 & 0xff) | (r5 & 0xff)
undefined

int32_t sub_85d2(int32_t arg1, int32_t, int32_t, void* arg4, int32_t arg5 @ r5, int32_t arg6 @ r12)
r0 = r5 s>> 0x16
r4 = zx.d([r3 + 0x16].b)
jump(r12)

int32_t sub_8c1e(int32_t arg1, int32_t arg2, int32_t arg3, int16_t* arg4, void* arg5 @ r5, int32_t arg6 @ r7, int32_t arg7 @ r9, int32_t arg8, int32_t arg9, char arg10, int32_t arg11)
r6 - r5
r2 = [sp + 0x230 {arg11}].d
r2 = r2 - 0xc2
r2 = r2 ^ r7
r1 - 0x20
r2 = r2 - 0x71
r7 = zx.d([r5 + 0x3c].w)  {"\x1bEZE6F"}
goto 8 @ 0x8c2c

[r2 + 0x1d].b = r5.b
r1 = r2 << 0x15
unimplemented  {mrrc p1, #6, r1, r2, c0}
r8 = r9 - 0x131
[r2 + r7].w = r1.w
[r3].w = r1.w
r4 = [r7 + r3].d
r6 = sp + 0x214 {arg_214}
[r2 + 0x16].w = r6.w
r3 = r3 + 0xa7
r4 = r7 s>> 0x14
flag:c = unimplemented
if (flag:c) then 21 @ 0x8cea else 42 @ 0x8c48  {"vvavvavvavvavvavv"}

[r6 + 0x19 {arg_22d}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {arg_228}].d = r6 {arg_214}
[r6 + 0x19 {arg_22d}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {arg_228}].d = r6 {arg_214}
[r6 + 0x19 {arg_22d}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {arg_228}].d = r6 {arg_214}
r7 = r1 << 8
r0 = r0
r2 = r1 << 0xb
r0 = r0
r7 = r0 + 1
r2 = r2 - 0x58
r3 = r7 s>> 0xa
[r2 + r7].b = r6.b
r4 = zx.d([r3 + 0xf].b)
r2 = pop
r6 = pop
<return> jump(pop)

r1 = zx.d([r2 + 0x32].w)
r3 = [r1 + 0x14].d
r2 = 0x86
[r7 + 0x1e].b = r6.b
[r5 + 0x64].d = r1
r4 = zx.d([r6 + 0x11 {arg10}].b)
r4 = r4 + 0x5c
goto 8 @ 0x8c2c

int32_t sub_955c(int32_t arg1, int32_t, int32_t arg3, int32_t* arg4 @ r7)
r4 = 0xe0
r2 = [r7 + r2].d
[r4 + r2].b = r0.b
jump(r0)

int32_t sub_a47a(void* arg1, int32_t arg2, void* arg3, int32_t arg4 @ r4, int32_t arg5 @ r5, int16_t arg6 @ r8, int32_t arg7 @ r10, void* arg8 @ r12) __noreturn
push(lr)
push(r6)
push(r5)
push(r4)
r0 = [r0 + 0x40].d
r3 = &data_a838
r7 - 0x5e
[r4 + 0xa].w = r5.w
r6 = [&data_a608].d
[r6 + 0x14 {0xbaae5daa}].d = r3
[r6 + 0x19 {0xbaae5daf}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {0xbaae5daa}].d = r6
[r6 + 0x19 {0xbaae5daf}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {0xbaae5daa}].d = r6
[r6 + 0x19 {0xbaae5daf}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {0xbaae5daa}].d = r6
[r6 + 0x19 {0xbaae5daf}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {0xbaae5daa}].d = r6
[r6 + 0x19 {0xbaae5daf}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {0xbaae5daa}].d = r6
[r6 + 0x19 {0xbaae5daf}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {0xbaae5daa}].d = r6
[r6 + 0x19 {0xbaae5daf}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {0xbaae5daa}].d = r6
[r6 + 0x19 {0xbaae5daf}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {0xbaae5daa}].d = r6
[r6 + 0x19 {0xbaae5daf}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {0xbaae5daa}].d = r6
[r6 + 0x19 {0xbaae5daf}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {0xbaae5daa}].d = r6
[r6 + 0x19 {0xbaae5daf}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {0xbaae5daa}].d = r6
[r6 + 0x19 {0xbaae5daf}].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14 {0xbaae5daa}].d = r6
[r6 + 0x19 {0xbaae5daf}].b = r6.b
[r4 + 0x19].b = r1.b
goto 49 @ 0xa4d4  {"vavvavvavvavvavvavvavvavvavvavva…"}

[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
goto 60 @ 0xa4e8  {"\x1bEZE6F"}  {"vvavvavvavvavvavvavvavvavvavvavv…"}

[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
r6 = r6 << 0x19
r1 = r0
if (r1 s< 0) then 110 @ 0xa54e else 126 @ 0xa54c  {"eCo=M"}

r0 = zx.d([r0 + r0].b)
[r2 + 0x40].d = r0
r6 = r6 - 0x3e  {"ZE6F"}
r5 = [r2 + 4].d
r1 = 0xcb
r5 = [sp + 0xb0].d
temp0.d = r3
r1 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r5 = [temp0.d + 0xc].d
r6 = [temp0.d + 0x10].d
r7 = [temp0.d + 0x14].d
r7 = [&data_a8d8].d
r7 = &data_a83c
goto 128 @ 0xa42e

r1 = r0
goto 110 @ 0xa54e

[r2 + 0x74].d = r5
[r5 + 0x78].d = r1
temp0.d = r3
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r7 = [temp0.d + 0x10].d
r3 = r3 + 0x14
temp0.d = r0
r1 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r0 = r0 + 0xc
[r12 + 0x162].w = r8.w
r0 = r5 + r2
goto 145 @ 0xa43c

r1 = r6 u>> 0x1f
r3 - 0xf6
pc = [r10 - 0x2e4].d
r10 = [r10 - 0x2e4 + 4].d
goto 150 @ &data_a444

temp1.d = r3
r3 = r3 - 0x9d
cond:0 = temp1.d s< 0x9d
r0 = zx.d([r2 + 0xc].b)
if (cond:0) then 145 @ 0xa43c else 155 @ 0xa44a

r4 = r2 << 0x15
temp0.d = r3
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r5 = [temp0.d + 0xc].d
r6 = [temp0.d + 0x10].d
r3 = r3 + 0x14
r4 = zx.d([r7 + r2].w)
r4 = r1 s>> 0xe
push(r6)
push(r5)
push(r4)
push(r1)
temp2.d = r1
r1 = r1 - 0xaf
cond:1 = temp2.d s>= 0xaf
[r5 + 0x2c].w = r1.w  {"4&^G"}
r7 = zx.d([r4 + 0xf].b)
if (cond:1) then 49 @ 0xa4d4 else 175 @ 0xa45c  {"vavvavvavvavvavvavvavvavvavvavva…"}

[r3 + r1].d = r2
r4 = sx.d([r4 + r4].b)
r3 = r2 << 0x15
[r6 + 0x17].b = r7.b
[r0 + 0x26].w = r0.w
r11 = sp & not.d(0xb200000)
unimplemented  {mcr2 p5, #3, pc, c6, c7, #0}
[r4 + 0x10].b = r6.b
r7 = sp + 0x140
r6 = zx.d([r4 + 6].w)
if (r7 != 0) then 60 @ 0xa4e8 else 186 @ 0xa476  {"\x1bEZE6F"}  {"vvavvavvavvavvavvavvavvavvavvavv…"}

r1 = r1 + 0x72
goto 60 @ 0xa4e8  {"\x1bEZE6F"}  {"vvavvavvavvavvavvavvavvavvavvavv…"}

int32_t sub_a5a4() __pure
<return> jump(lr)

int32_t sub_a5a6(int32_t, int32_t, int32_t, int32_t arg4, int16_t* arg5 @ r6, int16_t arg6 @ r7) __noreturn
[r6 + r3].w = r7.w
breakpoint

uint32_t sub_a5ca(int32_t arg1, void* arg2, void* arg3 @ r4, int32_t* arg4 @ r5, int32_t arg5 @ r6, int16_t arg6 @ r7, void* arg7 @ r9, int32_t arg8 @ r10, void* arg9, int32_t* arg10, void* arg11, void** arg12, int32_t arg13, char* arg14, int32_t arg15)
r6 = zx.d([r1 + r6].w)
temp0.d = r5
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r5 = r5 + 0xc
temp0.d = r5
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r6
r5 = r5 + 0x10
unimplemented  {ldc2 p14, c13, [r8], {0x9e}}
[r2 + 0x2e].w = r7.w
temp0.d = r0
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
[r3 + 0x14].w = r7.w
temp1.d = r3
r3 = r3 - 0xf5
cond:0 = temp1.d s> 0xf5
[r5 + 0x12].b = r7.b
if (cond:0) then 25 @ 0xa6a0 else 46 @ 0xa5e0  {"avvavvavvavvavvavvavvavvavvavvav…"}

[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
goto 80 @ 0xa6c8  {"vvavvavvavvavvavvavvavvavvavvavv…"}

r1 = r3 + 1
r1 = r1 - 0xa1
temp2.d = r4
r4 = r4 - 0xea
flag:v = add_overflow(temp2.d, -0xea)
r6 = r7 << 0xa
temp0.d = r0
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r2 = [temp0.d + 8].d
r4 = [temp0.d + 0xc].d
r6 = [temp0.d + 0x10].d
r7 = [temp0.d + 0x14].d
r5 = [sp + 0x7c {arg_7c}].d
r5 = r1 u>> 0x14
flag:n = r1 u>> 0x14 s< 0
flag:z = (r1 & 0xfff00000) == 0
flag:c = test_bit(r1, 0x14 - 1)
temp0.d = r5
[temp0.d].d = r2
[temp0.d + 4].d = r4
r5 = r5 + 8
temp0.d = r7
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r2 = [temp0.d + 8].d
r3 = [temp0.d + 0xc].d
r5 = [temp0.d + 0x10].d
r6 = [temp0.d + 0x14].d
r7 = [temp0.d + 0x18].d
[r6 + 4].w = r6.w
unimplemented  {setend be}
r7 = zx.d([r6 + 0x18].w)
if (not(flag:z) && flag:n == flag:v) then 128 @ 0xa64e else 131 @ 0xa5fa

[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x1d].b = r6.b
r6 = r0
r0 = r0 u>> 0xc
r7 = r0
temp0.d = r7
r7 = r7
if (r1 == 0) then 135 @ 0xa752 else 155 @ 0xa726

r1 = zx.d([r4 + 0x20].w)
r5 = r6 u>> 0x1a
undefined

unimplemented  {usat r0, #0x17, pc, lsl #28}
r3 = 0x60
flag:z = r3 == 0
if (flag:z || flag:c) then 80 @ 0xa6c8 else 164 @ 0xa602  {"vvavvavvavvavvavvavvavvavvavvavv…"}

[r6 + 8].d = r2
r1 = r1 - 0xaa
r7 = sx.d([r1 + r7].b)
r0 = pop
r1 = pop
r2 = pop
r3 = pop
r5 = pop
r7 = pop
r4 = zx.d([r4 + 7].b)
temp0.d = r9 - 0x1c
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r6
[temp0.d + 0xc].d = r7
[temp0.d + 0x10].d = r9
[temp0.d + 0x14].d = r10
[temp0.d + 0x18].d = lr
r4 = [r4 + 0x28].d
if (r6 == 0) then 168 @ 0xa7d8 else 175 @ 0xa764

r4 - 0xfb
r6 = sx.d([r4 + r1].w)
r3 = zx.d([r2 + r6].b)
r5 = r3 u>> 7
r4 = zx.d([r0 + 0xe].b)
r1 = pop
r3 = pop
r7 = pop
<return> jump(pop)

r4 = 0xff00ff - r0
[sp + 0x21c {arg_21c}].d = r6
r6 = zx.d([r2 + r6].b)
undefined

r5 = r0 u>> 0x1d
r6 = sp {arg_18}
r6 = zx.d([r2 + 0xe].w)
r7 = r4 * r7
r0 = sx.d(r6.b)
r4 = sp + 0x34c {arg_364}
undefined

r2 = 0xd0
if (r6 != 0) then 177 @ 0xa792 else 179 @ 0xa768

r3 = 0x92
if (r3 == 0) then 180 @ 0xa7c8 else 187 @ 0xa796

goto 191 @ 0xa592

r4 = r2 + r5
[r0 + 0x14].d = r6
r1 = r6 + 6
r1 = zx.d([r6 + r3].b)
r3 = r6 + r1
unimplemented  {cdp2 p12, #0xa, c10, c0, c12, #3}
undefined

r0 = r0 - 0xa8
r6 - 0xa1
[r0 + 0x14].w = r4.w
if (r3 == 0) then 212 @ 0xa7ae else 227 @ 0xa79e

r0 = r5 << 4
r2 = r2 + 0x1a
temp0.d = r4
[temp0.d].d = r0
[temp0.d + 4].d = r3
[temp0.d + 8].d = r5
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r4 = r4 + 0x14
r1 = r1 - 0x75
r1 = zx.d([r7 + 0x1e].b)
[r3 + 0x24].w = r3.w
r0 = sp + 0x22c {arg_244}
temp0.d = r3
[temp0.d].d = r0 {arg_244}
[temp0.d + 4].d = r4
[temp0.d + 8].d = r5
[temp0.d + 0xc].d = r6
[temp0.d + 0x10].d = r7
r3 = r3 + 0x14
undefined

r1 = r1 + 0x29
unimplemented  {ldcl p2, c13, [pc], #0xdc}
unimplemented  {ldc2 p6, c3, [r1], #0x254}
sp = sp + 0x104
r7 = [sp + 0x1ac {arg15}].d
unimplemented  {cdp p7, #0xf, c13, c2, c6, #4}
temp0.d = r3
[temp0.d {&data_92}].d = r0
[temp0.d + 4 {&data_96}].d = r2
[temp0.d + 8 {&data_9a}].d = r3
[temp0.d + 0xc {&data_9e}].d = r4
[temp0.d + 0x10 {&data_a2}].d = r6
[temp0.d + 0x14 {&data_a6}].d = r7
r3 = r3 + 0x18
goto 246 @ 0xa7c2

[r7].b = r6.b
r7 = r5 + 7
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
r1 = r1 + 0x10
unimplemented  {ldc2 p2, c0, [r2], #0x4c}
r5 = zx.d([r1 + 0x16].b)
temp0.d = r6
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
[temp0.d + 0x10].d = r7
r6 = r6 + 0x14
[r3 + 8 {&data_9a}].d = r4
goto 212 @ 0xa7ae

temp0.d = r0
r3 = [temp0.d].d
r4 = [temp0.d + 4].d
r5 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r7 = [temp0.d + 0x10].d
r0 = r0 + 0x14
r4 = r2 << 0xc
if (r4 s< 0) then 246 @ 0xa7c2 else 180 @ 0xa7c8

int32_t sub_b3a4(int32_t arg1, int32_t arg2, int32_t arg3, void* arg4 @ r7, int32_t arg5)
r5 = [&data_b4ec].d
r3 = r1 s>> 0x19
if (r2 == 0) then 3 @ 0xb3e4 else 8 @ 0xb3aa

[r3 + 0x13].b = r5.b
r4 = r1 - 2
[r7 + 0x10].b = r4.b
r2 = r2 - 0x6a
undefined

syscall_info = 6
syscall
r2 = [sp + 0x338 {arg5}].d
trap(0xdc)
{ Does not return }

int32_t sub_b3b4(int32_t arg1, int32_t arg2, int16_t* arg3, void* arg4, void* arg5 @ r4, char arg6 @ r5, void* arg7 @ r7, void* arg8, void* arg9)
r6 = sp + 0xa8 {arg_a8}
if (r7 != 0) then 2 @ 0xb3ee else 27 @ 0xb3b8

r5 = zx.d([r0 + 0xc].w)
r5 = 0xf1
r0 = r0 - 0xf1
[r4 + 0x11].b = r3.b
r7 = r7 & r5
r1 = r1 + 0x77
[r2 + r0].w = r7.w
r1 = pop
r5 = pop
r6 = pop
r2 = [r7 + 0xc].d
r0 = [r4 + 0x68].d
r4 = sp + 0xa4 {arg_b0}
r7 = [sp + 0x12c {arg9}].d
r1 = sx.d([r5 + r6].b)
r1 = [sp + 0x248 {arg_254}].d
r1 = zx.d([r2 + 0x2a].w)
r4 = r6 << 9
[r4 + 0x12].w = r1.w
sp = r7 & not.d(0xbd00bd00)
r4 = zx.d([r6 + 0x24].w)
r1 = r1 + 0x64
r0 = sx.d([r1 + r1].w)
r5 = sp + 0x220
goto 30 @ 0xb41c

r0 = zx.d([r3 + 0x19].b)
[r6 + r0].b = r5.b
goto 30 @ 0xb41c

r4 = zx.d([r7 + 0x24].w)
undefined

int32_t sub_c02e(int32_t arg1 @ r4, int32_t arg2 @ r6, void* arg3 @ r7, void* arg4, void* arg5, void* arg6) __noreturn
r2 = [r3 + 0x10].d
r5 = &data_c1d8
r2 = r4 u>> 6
r0 = r6 s>> 0x16
[r7 + 0x14].w = r5.w
r6 = &data_c350
r3 = [sp + 0x54 {arg4}].d
r1 = r5 u>> 0x17
r7 = r12
r1 = r6 - 2
flag:v = add_overflow(r6, -2)
r6 = [sp + 0xac {arg5}].d
if (r5 != 0) then 13 @ 0xc06c else 41 @ 0xc046  {"avvavvavvavvavvavvavvavvavvavvav…"}

[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
goto 51 @ 0xc0a2  {"avvavvavvavvavvavvavvavvavvavvav…"}

temp0.d = r0
r4 = [temp0.d].d
r5 = [temp0.d + 4].d
r0 = r0 + 8
[r0 + r0].d = r3
r4 = r0 s>> 0x1a
unimplemented  {cdp p13, #2, c13, c12, c3, #4}
r7 = zx.d([r5 + 0x14].w)
r1 = [sp + 0x1b0 {arg6}].d
if (not(flag:v)) then 51 @ 0xc0a2 else 54 @ 0xc056  {"avvavvavvavvavvavvavvavvavvavvav…"}

[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
goto 66 @ 0xc0a6  {"vvavvavvavvavvavvavvavvavvavvavv…"}

[r3 + 0x5c].d = r7
r1 - 0x7d
r7 = zx.d([r6 + 0x10].w)
r0 = zx.d([r3 + 0x16].w)
[r1 + r5].w = r2.w
r3 = [r4 + 0x48].d
[r4 + 0x1c].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
goto 13 @ 0xc06c  {"avvavvavvavvavvavvavvavvavvavvav…"}

[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
r1 = [r4 + r5].d
r1 = r0
unimplemented  {vhadd.U8 d0, d0, d1}
r5 = [&data_c10c].d
r0 = sx.d([r2 + r0].w)
r2 = r2 - 0xe2
r6 = [r7 + 0x5c].d
temp0.d = r1
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r5 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r1 = r1 + 0x10
temp0.d = r0
r5 = [temp0.d].d
r7 = [temp0.d + 4].d
r0 = r0 + 8
r0 = r2 << 8
r5 = r5 - 0xa0
[r1 + r3].w = r5.w
breakpoint

int32_t sub_c212(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r5) __noreturn
r0 = sp + 8 {arg_8}
r2 = sx.d(r5.b)
r2 = [&data_c430].d
r1 = sx.d([r2 + r0 {var_38631b3e}].b)
unimplemented  {srsia sp, #0xa}
r5 = r5 - 0x92
unimplemented  {vst4.8 {d5[1], d6[1], d7[1], d8[1]}, [r12], r12}
r1 = r2 << 0x14
unimplemented  {mcr p0, #1, r9, c12, c11, #3}
r6 = zx.d([r1 {0x4ba00000}].b)
r1 = sp + 0x24 {arg_24}
[r0 + 0x2c {arg_34}].d = r4  {"4&^G"}
r3 = r3 u>> 0x1c
trap(0x54)
{ Does not return }

int32_t sub_d510(void* arg1, char arg2, void* arg3 @ r4, int32_t arg4 @ r5, void* arg5 @ r6)
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
r7 - 0x76
r7 = r0
r0 = zx.d([r0 + 0xc].b)
r7 = r0
[sp {arg_0}].d = r4
syscall_info = 2
syscall
r3 = sp + 0x4c {arg_4c}
unimplemented  {ldc p9, c15, [r1, #0x24c]!}
push(lr)
push(r7)
push(r3)
unimplemented  {ldcl p5, c9, [r12, #0x3c]}  {"\x1bEZE6F"}
unimplemented  {rfedb pc!}
[r6 + 0x1a].b = r5.b
r1 = r3 << 0x13
[sp + 0x304 {arg_2f8}].d = r5
[r7 + 0x38].d = r7
r4 = [&data_d77c].d
sp = r6 | 0x1f40000
r6 = &data_d830
r1 = 0x7d
unimplemented  {vshr.S32 d27, d17, #0xb}
[r2 + 0x54].d = r6
temp0.d = r2
[temp0.d].d = r3 {arg_4c}
[temp0.d + 4].d = r5
[temp0.d + 8].d = r7
r2 = r2 + 0xc
r5 = r5 - 0xfc
goto 54 @ 0xd640

undefined

int32_t sub_d578(int32_t arg1, int32_t arg2, int32_t, int32_t arg4, char* arg5 @ r4)
r1 = zx.d([r4 + r4].b)
r3 = r3 - 0x8f
<return> tailcall(sub_d510)

uint32_t sub_e26a(void* arg1, int32_t arg2, void* arg3 @ r4, void* arg4 @ r5, int32_t arg5, int32_t arg6, char* arg7)
r6 = [&data_e5d0].d
if (not(flag:z) && flag:n == flag:v) then 2 @ 0xe262 else 8 @ 0xe26e

r2 = zx.d([r6 + 0x16 {0xc6a89655}].w)
r1 = r4 - r2
[r5 + 0x3e].w = r2.w  {"ZE6F"}
r0 = pop
r6 = pop
<return> jump(pop)

r7 = [r4 + 0x5c].d
r5 = sp + 0x24c {arg_24c}
r3 = &data_e35c
unimplemented  {ldcl p1, c11, [r7, #0xc]!}
r5 = [&data_e56c].d
r6 = 0xa7
cond:0 = r3 s<= 0x7b
r3 = [r7 + 0xc].d
sp = sp - 0x1c0
r5 = [sp + 0x278 {arg7}].d
r2 = [r6 + 0xc {&data_b3}].d
r6 = [r7 + 0x34].d
if (cond:0) then 21 @ 0xe2bc else 76 @ 0xe28a  {"avvavvavvavvavvavvavvavvavvavvav…"}

[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
r6 = r6 - 0x76
r6 = r0
r0 = zx.d([r0 + 0x28].w)
r6 = r0
r0 = r0 << 0x10
r0 = r0 u>> 0x1c
[r5 + r4].b = r1.b
r3 = sp + 0xd4 {var_ec}
r2 = [r2 + 0x38 {0x4dc0aa78}].d
r7 - 0x69
[r7 + r1].w = r7.w
<return> jump(lr)

unimplemented  {cdp2 p6, #9, c7, c15, c1, #3}
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
goto 21 @ 0xe2bc  {"avvavvavvavvavvavvavvavvavvavvav…"}

int32_t sub_e938(char* arg1, void* arg2 @ r6, int32_t arg3 @ r8, void* arg4 @ r10, void* arg5, void* arg6, int32_t* arg7, void* arg8, int32_t arg9)
temp0.d = r6
r1 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r5 = [temp0.d + 0xc].d
r6 = [temp0.d + 0x10].d
r7 = [temp0.d + 0x14].d
[r4 + 0x3e].w = r0.w  {"ZE6F"}
r1 = sx.d([r6 + r4].w)
r3 = &data_ece4  {"vvavvavvavvavvavvavvavvavvavvavv…"}
[r0 + r4].b = r6.b
[r4 + 0x10].d = r5
r10 = r10 + 0x278
[r10].d = r5
[r10 + 4].d = r8
[r6].d = sp {arg_0}
[r6 + 4].d = r5
r6 = r6 + 0x3bc
unimplemented  {revsh r5, r2}
r3 = &data_eb7c
r0 = pop
r1 = pop
r2 = pop
r3 = pop
r4 = pop
r5 = pop
r6 = zx.d([r2 + 0x11].b)
r7 = sx.d([r2 + r3].b)
if (r0 != 0) then 29 @ 0xe97c else 63 @ 0xe958  {"vavvavvavvavvavvavvavvavvavvavva…"}

[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
r2 = r6 << 0xc
r0 = r0
r5 = r6 << 0xe
r0 = r0
r0 = [&data_eca8].d
r7 = r7 + 0x6d
r3 - 0xca
temp0.d = r3
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r7 = [temp0.d + 0x10].d
r6 = zx.d([r1 + 6].b)
r0 = r0 - 0x8f
undefined

[r1 + 0x1c].d = r4
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
goto 29 @ 0xe97c  {"vavvavvavvavvavvavvavvavvavvavva…"}

int32_t sub_eca2(int32_t arg1, void* arg2, void* arg3, int32_t arg4, void* arg5 @ r4, void* arg6 @ r5, void* arg7 @ r6)
r5 = [r5 + 0x2c].d  {"4&^G"}
if (not(flag:n)) then 2 @ 0xed12 else 35 @ 0xeca6  {"vavvavvavvavvavvavvavvavvavvavva…"}

[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
goto 51 @ 0xed52

r6 = zx.d([r6 + 0x26].w)
r3 = r3 s>> 0x1a
r7 = sx.d([r5 + r6].w)
[sp + 0x54 {arg_54}].d = r7
temp0.d = r1
[temp0.d].d = r2
[temp0.d + 4].d = r3
[temp0.d + 8].d = r4
[temp0.d + 0xc].d = r5
r1 = r1 + 0x10
r5 = r5 - 0x76
r3 = zx.d([r0 + 0x26].w)
r0 = r4 << 0x1d
temp1.d = r1
r1 = r1 + 0xeb
if (temp1.d != -0xeb) then 51 @ 0xed52 else 61 @ 0xecba  {"EZE6F"}

[r4 + 0x19].b = r1.b
r6 = sx.d([r6 + r5].w)
r3 = r0
r0 = r0 s>> 0x1c
r4 = r0
r0 = r0 s>> 0x1c
r6 = 0xda
r3 = [sp + 0x268 {arg_268}].d
r2 = zx.d([r5 + 0xf].b)
<return> tailcall(sub_f47c)

r0 = r0 + 0x3f
[r2 + 0x13].b = r6.b
r3 = r2 << 0xb
undefined

int32_t sub_ecc2(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5) __pure
r0 = pop
r1 = pop
r4 = pop
r6 = pop
r7 = pop
<return> jump(pop)

int32_t sub_f03e(int32_t arg1, int32_t* arg2, int32_t arg3, int32_t* arg4, char arg5 @ r5, void* arg6 @ r7, int32_t arg7, void* arg8)
r7 - 0x57
[r7 + 4].b = r5.b
r2 - 0xb4
temp0.d = r3
r0 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r7 = [temp0.d + 0x10].d
r3 + r4
r4 = 0xaf
temp0.d = r1
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r2
[temp0.d + 0xc].d = r6
r1 = r1 + 0x10
r1 = r1 u>> 0x1c
goto 19 @ 0xf0e6  {"avvavvavvavvavvavvavvavvavvavvav…"}

[r4 + 0x19 {&data_c8}].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19 {&data_c8}].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19 {&data_c8}].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19 {&data_c8}].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19 {&data_c8}].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19 {&data_c8}].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19 {&data_c8}].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19 {&data_c8}].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
goto 44 @ 0xf116  {"4&^G"}  {"avvavvavvavvavvavvavvavvavvavvav…"}

[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
[r6 + 0x14].d = r6
[r6 + 0x19].b = r6.b
[r4 + 0x19].b = r1.b
r7 = r1 << 4
r0 = r0
r6 = r7 << 4
r0 = r0
r3 = [&data_f1c8].d
unimplemented  {ldrex r7, [pc, #0x2e8]}
r4 = zx.d([r2 + r7].w)
r5 = [sp + 0xf4 {arg7}].d
r4 = [sp + 0x260 {arg8}].d
[r7 + 0x60].d = r2
unimplemented  {stc2l p5, c11, [r11], #-0x1d0}
unimplemented  {ssat r3, #0x18, r12, lsl #27}
r0 = [r4 + 0x60].d
r4 = [r3 + 8 {0xdf95e76f}].d
temp1.d = r6
r6 = r6 - 0x4a
cond:0 = temp1.d != 0x4a
[r7 + 8].b = r1.b
r2 = sp + 0x1c0 {arg_1c0}
r3 = [r7 + r0].d
if (r6 == 0) then 108 @ 0xf1ce else 113 @ 0xf198

r5 = r5 + 0xb7
r2 = zx.d([r1 + 0xf].b)
[r3 + 0x1b].b = r7.b
unimplemented  {vaddw.S16 q5, q9, d7}
undefined

[sp + 0x218 {arg_218}].d = r5
[r1 + 3].b = r6.b
if (cond:0) then 44 @ 0xf116 else 116 @ 0xf19e  {"4&^G"}  {"avvavvavvavvavvavvavvavvavvavvav…"}

undefined

int32_t sub_f47c(void* arg1, int32_t arg2, int32_t arg3, void* arg4, int32_t arg5 @ r5, char arg6 @ r6, void* arg7 @ r7, int32_t arg8, int32_t arg9)
r4 = r2 u>> 9
[r4 + r4].b = r6.b
[r0 + 4].w = r3.w
r6 = r1 u>> 0x13
r2 = zx.d([r7 + 4].b)
temp0.d = r6
[temp0.d].d = r0
[temp0.d + 4].d = r3
[temp0.d + 8].d = r5
[temp0.d + 0xc].d = r7
r6 = r6 + 0x10
[r3 + 0x34].d = r2
r3 = zx.d([r7 + r2].b)
r5 = &data_f748  {"avvavvavvavvavvavvavvavvavvavvav…"}
r6 = r7 - r5
cond:0 = r7 u<= r5
if (r7 - r5 s< 0) then 17 @ 0xf3de else 31 @ 0xf492

r3 = [&data_f700].d  {"avvavvavvavvavvavvavvavvavvavvav…"}
r1 = r2 s>> 9
r4 - 0x77
r0 = 0xe4
r1 = r0 + 4
r7 = [sp + 0x398 {arg9}].d
temp0.d = r0
[temp0.d {&data_e4}].d = r1
[temp0.d + 4 {&data_e8}].d = r5
[temp0.d + 8 {&data_ec}].d = r7
r0 = r0 + 0xc
r7 = r1 u>> 0xa
r1 = zx.d([r5 + r5 {0x1ee90}].b)
<return> tailcall(sub_f662)

if (cond:0) then 32 else 33 @ 0xf496

jump(0xfff25292)

r3 = r0 << 0xe
r7 = r6 u>> 0xc
flag:c = test_bit(r6, 0xc - 1)
[r2 + r1].d = r4
if (flag:c) then 38 @ 0xf58c else 42 @ 0xf49e

[r4 + r3].w = r3.w
r6 = [sp + 0x80 {arg8}].d
[sp + 0x368 {arg_368}].d = r7
undefined

r1 = r6 << 0x1c
r7 = r7 - 0x8c
r4 = r3 << 2
temp1.d = r0
r0 = r0 + 0xe6
cond:1 = temp1.d s> -0xe6
[r1 + r6].b = r2.b
if (cond:1) then 50 else 51 @ 0xf4ac

jump(0xfff83bf6)

[r6 + r0].w = r6.w
r3 = r3 + 0xa2
r3 = r4 u>> 9
r1 - 0xa4
r1 = r0 s>> 0x11
temp0.d = r5
[temp0.d {&data_f748}].d = r0  {"avvavvavvavvavvavvavvavvavvavvav…"}
[temp0.d + 4 {&data_f74c}].d = r2  {"vvavvavvavvavvavvavvavvavvavvavv…"}
[temp0.d + 8 {&data_f750}].d = r5  {"vavvavvavvavvavvavvavvavvavvavva…"}
[temp0.d + 0xc {&data_f754}].d = r6  {"avvavvavvavvavvavvavvavvavvav"}
r5 = r5 + 0x10
undefined

int32_t sub_f662()
r3 = 0x48
undefined

int32_t sub_fa94(int32_t arg1, int32_t arg2, int32_t, void* arg4, int16_t arg5 @ r4, int32_t arg6)
if (not(flag:z) && not(flag:c)) then 1 @ 0xf9b4 else 10 @ 0xfa96

r0 = 0xa
r5 = r5 - 0x5d
r4 = zx.d([r5 + r6].b)
unimplemented  {ldc p15, c8, [r12, #0x3d0]}
r7 = zx.d([r3 + 5].b)
r6 = &data_fc0c
r6 = [sp + 0x240 {arg6}].d
r4 = sp + 0x108 {arg_108}
undefined

[r3 + 0xa].w = r4.w
<return> tailcall(sub_fa98)

int32_t sub_fa98(void* arg1, void* arg2, int32_t arg3 @ r7)
r3 = &data_fb18
r5 = r5 + 0x8e
r4 = 0x9d80
r5 = zx.d([r0 + r7].w)
[r4 + r4 {&data_13b00}].w = r1.w
r4 = [r1 + 0x64].d
goto 7 @ 0x10024

undefined

int32_t sub_10026(int32_t arg1, int32_t arg2 @ r6, void* arg3 @ r7)
r6 = r6 << 6
r1 = [r7 + 0x38].d
r0 = r0 + 0x92
undefined

int32_t sub_100c8(void* arg1, void* arg2)
r5 = &data_1047c  {"))<[*7[#*EzI*S<o*a[7*oz]*};%*-[K…"}
r6 = [r0 + 0x54].d
r4 = &data_103e4  {"$I^;$W}a$e>)$s]O$#}u%1>=%?]c%M|+…"}
[r1 + 0x38].d = r0
push(r7)
push(r6)
push(r5)
push(r4)
push(r2)
[sp + 0x17c {arg_168}].d = r2
if (r4 != 0) then 11 @ 0x100fc else 12 @ 0x100d6

undefined

r6 = [r0 + 0x34].d
undefined

int32_t sub_100f0(int32_t arg1) __noreturn
r5 = [sp + 0xf4 {arg1}].d
r1 = [&data_10198].d
[sp + 0x29c {arg_29c}].d = r2
trap(0x57)
{ Does not return }

int32_t sub_10282(int32_t, int32_t, void* arg3, char arg4, int32_t arg5) __noreturn
r7 = [sp + 0x3d4 {arg5}].d
r2 - 0x64
[r2 + 0x1f].b = r3.b
trap(0xf)
{ Does not return }

int32_t sub_10f16(int32_t arg1, int32_t arg2, int16_t* arg3, int32_t arg4 @ r4, void* arg5 @ r5, uint32_t* arg6 @ r6, int32_t arg7 @ r9, int32_t* arg8 @ r10, int32_t arg9 @ r11)
r4 = r4 - 0x30
[r6 + 0x10].d = r0
[r2 + 0x24].d = r0
r0 = zx.d([r6 + 0xc].b)
r2 - 0x6f
r7 = r7 + 0x30
[r6 + r0].d = r0
[r6 + r4].d = r0
[r2 + 0x19].b = r0.b
r1 = [r6 + 0x30].d
r6 = r6 - 0x6f
r7 = 0x31
[r6 + 0x40].d = r0
r1 = r1 s>> r6
r4 - 0x50
r1 = zx.d([r6 + r4].w)
[r5 + r1].w = r7.w
[r6 + 0x14].b = r1.b
r0 = zx.d([r6].b)
r1 = r1 + 0x31
r0 = r0 ^ r2
r3 = [&data_1100c].d  {"9Un?9o/d9+N,:EnR:_/x:yN@:5nf:O/.…"}
[r5 + 0x54].d = r7
[r6 + 0x50].d = r2
r5 - 0x30
r1 = 0x32
[r2 + r5].w = r0.w
r3 = r3 - 0x32
r7 = zx.d([r5 + 5].b)
[r6 + r4].b = r2.b
r0 = r0 s>> r6
r2 = [r6 + 0x70].d
[r1 + 0x74 {&data_a6}].d = r7
r3 - 0x32
r7 - 0x6f
r3 - r6
[r6 + r4].b = r0.b
r3 = sx.d([r6 + r4].w)
r7 = zx.d([r1 + 0xd {0x3f}].b)
r3 = zx.d([r6 + 4].b)
r7 = r5 * r7
r5 = r5 + 0x33
r0 = [r6 + 0x10].d
r7 = [&data_1103c].d  {";sn0;//V;IN|;cnD;}/j<9N2<SmX<m/}…"}
r1 = r1 + 0x4f
r3 = [r6 + 0x10].d
r7 = sx.d([r5 + r5].b)
r5 = 0x33
r0 = zx.d([r6 + 0x14].b)
r7 = r7 - 0x34
r7 - r9
r4 = [r6 + r4].d
r7 = [r5 + 0x34 {&data_64+3}].d
[r6 + 0xc].b = r4.b
r3 = r3 + 0x30
r7 - 0x34
r7 = [r1 + r1 {&data_102}].d
r1 = [&data_1105c].d  {"<)NE<Cmk<]/3<wNY=3m!=M/G=gNm=#m5…"}
r7 = zx.d([r5 + 0x19 {sub_13414-0x133c8}].b)
[r6 + 0x30].d = r4
r0 = r6
r4 = zx.d([r6 + 0x14].b)
r7 = [r1 + 0x44 {0x454e2980}].d
r1 = r1 - 0x35
r4 = r4 + 0x6e
[r6 + r4].w = r5.w
r0 = zx.d([r6 + r0].w)
r5 = [r6 + 0x50].d
r2 = 0x4f
r1 - 0x35
r0 = [&data_1115c].d  {"Fkl6F'-\FAM$F[lJFu-oF1M7FKl]Ge-%…"}
r5 = r5 | r6
r0 = [r6 + 0x60].d
r5 = zx.d([r6 + r4].b)
r6 = r6 + 0x4f
[r6 + 0x1c].b = r6.b
r6 = zx.d([r5 + r1].b)
r3 = r3 + 0x36
r4 = 0x30
r5 = [&data_11090].d  {">am]>{.%>7NK>Qmp?k.8?'N^?Am&?[.L…"}
r2 = [&data_110f4].d  {"BY.eBsM-B/mSBI.yBcMAB}mgC9./CSMU…"}
[r6 + 0x70].d = r6
[r5 + 1 {0x5d6d613f}].b = r6.b
r3 = 0x36
r0 = r0 - 0x30
r5 = r5 - 0x36
r7 = sx.d([r1 + r1 {0x8a9c520e}].w)
r6 = sx.d([r6 + r4].b)
r6 = 0x6e
[r6 + 4 {&data_6f+3}].b = r7.b
r4 = [&data_1108c].d  {">GN7>am]>{.%>7NK>Qmp?k.8?'N^?Am&…"}
flag:n = r5 - 0x37 s< 0
flag:z = r5 == 0x37
flag:c = r5 u< 0x37
flag:v = add_overflow(r5, -0x37)
[r1 + 5 {0x454e290c}].b = r7.b
jump(r6 => 97 @ &data_6e)

if (flag:z || flag:c) then 98 else 105 @ &data_6f+3

temp0.d = sp - 0x14 {var_14}
r0 = [temp0.d {var_14}].d
r1 = [temp0.d + 4 {var_10}].d
r2 = [temp0.d + 8 {var_c}].d
r3 = [temp0.d + 0xc {var_8}].d
r6 = [temp0.d + 0x10 {var_4}].d
goto 105 @ &data_6f+3

if (flag:n) then 106 else 109 @ &data_73+3

syscall_info = 0xd54702
syscall
goto 109 @ &data_73+3

if (flag:z) then 110 else 112 @ &data_7a

[r3].d = r0
goto 112 @ &data_7a

if (not(flag:z) && not(flag:c)) then 113 else 129 @ &data_7c+2  {"eCo=M"}

temp0.d = lr
[temp0.d].d = r0
temp0.d = temp0.d + 4
[temp0.d].d = r2
temp0.d = temp0.d + 4
[temp0.d].d = r4
temp0.d = temp0.d + 4
[temp0.d].d = r5
temp0.d = temp0.d + 4
[temp0.d].d = r7
temp0.d = temp0.d + 4
[temp0.d].d = r9
temp0.d = temp0.d + 4
[temp0.d].d = lr
temp0.d = temp0.d + 4
goto 129 @ &data_7c+2  {"eCo=M"}

if (flag:c) then 130 else 132 @ &data_80+2

unimplemented  {stcllo p3, c4, [pc,  #-0x194]!}
goto 132 @ &data_80+2

if (not(flag:v)) then 133 else 138 @ &data_86

flag:n = r7 + 0x4d s< 0
flag:z = r7 == -0x4d
flag:c = r7 u>= 0xffffffb3
flag:v = add_overflow(r7, 0x4d)
goto 138 @ &data_86

if (flag:n == flag:v) then 139 else 142 @ 0x8a

r1 = r1 - 0x7cd
[r1].d = r4
goto 142 @ 0x8a

if (not(flag:z) && not(flag:c)) then 143 else 145 @ &data_8e

Coproc_SendOneWord(r4, 8, 4, 7, 0, 7)
goto 145 @ &data_8e

if (flag:n) then 146 else 148 @ &data_92

r0 = zx.d([&data_96 + (r10 s>> 0x20)].b)
goto 148 @ &data_92

[r10].d = r0
r10 = r10 + r0
if (flag:z || flag:n != flag:v) then 151 else 154 @ &data_9a

r3 = r3 - (r1 s>> 0x1a)
r4 = zx.d([r3].b)
goto 154 @ &data_9a

if (flag:n) then 155 else 158 @ &data_a2

[r11 - 0x4a].d = r0
temp0.d = r9 - 0xfffffffc
goto 158 @ &data_a2

if (not(flag:z)) then 159 else 161 @ &data_a6

unimplemented  {mrsne r0, apsr}
goto 161 @ &data_a6

if (flag:n) then 162 else 164 @ 0xaa

r4 = r7 + (r5 u>> 0x11)
goto 164 @ 0xaa

undefined

int32_t sub_11060(int32_t, int32_t* arg2, int32_t, int32_t arg4, int32_t arg5 @ r4, void* arg6 @ r5, char* arg7 @ r7)
r4 = r4 | r7
r5 = [r5 + 0x34].d
r4 = zx.d([r7 + r4].b)
r3 = r3 + 0x2f
[r7 + 0x1c].b = r4.b
r6 = [r1 + r5].d
r3 = r3 + 0x3d  {"EZE6F"}
r1 = 0x6d
r5 = [&data_11168].d  {"F[lJFu-oF1M7FKl]Ge-%G!MKG;lqGU-9…"}
jump(r5)

int32_t sub_11074(int32_t, void* arg2, int32_t arg3 @ r4, int32_t arg4 @ r5, void* arg5 @ r7)
[r7 + 0x70].d = r5
r6 = [r1 + 0x54].d
r3 = 0x3d  {"EZE6F"}
r5 = r5 + 0x6d
r5 = r5 - 0x3d  {"EZE6F"}
r7 = zx.d([r5 + r4].w)
r5 = sx.d([r7 + r4].b)
r3 = 0x4e
[r7 + 4].b = r6.b
r1 = [&data_1123c].d  {"N;LoNUk6No,\N+L$NEkJO_,pOyK8O5k^…"}
r5 - 0x3e  {"ZE6F"}
r7 = [r5 + 0x70].d
jump(r7)

int32_t sub_1116c(void* arg1, int32_t arg2, int16_t arg3, void* arg4 @ r5, int32_t arg5 @ r6, int32_t arg6 @ r7, int32_t arg7 @ r9)
[r0 + 0x15].b = r6.b
r5 = [r5 + 0x70].d
r1 = r1 + 0x46
r7 = r7 + 0x4d
r3 = [&data_11290].d  {"Q)K=QCjcQ],+QwKQR3jwRM,?RgKeR#j-…"}
r4 = zx.d([r5 + r5].b)
[r0 + 0x54].d = r7
r5 = 0x2d
r1 = 0x47
r3 = [&data_112b4].d  {"RWKyRqjAS-,gSGK/SajUS{,{S7KBSQjh…"}
r3 = r3 - 0x47
[r5 + 5 {&data_30+2}].b = r4.b
[r0 + r5].b = r7.b
r1 = r1 - 0x2d
r7 = [r0 + 0x74].d
r5 = sx.d([r1 + r5 {&data_44+3}].w)
r3 - 0x47
r7 = 0x6c
r7 - r8
r5 = [&data_11248].d  {"N+L$NEkJO_,pOyK8O5k^OO,&OiKLO%kr…"}
r0 = sx.d([r1 + r5 {0x244c2b68}].w)
[r1 + 0xd {&data_27}].b = r4.b
r0 = zx.d([r1 + 5 {&data_1d+2}].b)
r3 = r3 - 0x6c
r5 = r5 + 0x48
[r5 + 0x10 {0x244c2ba6}].d = r5
r7 = [&data_112c4].d  {"SajUS{,{S7KBSQjhSk+0T'KVTAj|T[+D…"}
r1 - 0x4c
r0 = [r1 + 0x14 {sub_1186c-0x1183e}].d
r7 = [&data_11358].d  {"Xw+NX3JtYMi<Yg+bY#J*Y=iPYW+vYqJ>…"}
r5 = 0x48
[r5 + 0x14 {&data_5c}].b = r5.b
r7 = r7 - 0x48
r5 = r5 - 0x4c
r1 = [r1 + r5 {&jump_table_15[1]}].d
[r5 + 0x34 {&data_30}].d = r4
[r1 + 0xd {0x1d894d5e}].b = r1.b
r2 - 0x2d
r7 - 0x49
[r1 + r1 {0x3b129aa2}].d = r4
r1 = [&data_112e4].d  {"TuKjT1j2TK+XTeK~U!jFU;+lUUK4UojZ…"}
[r5 + 0x19 {&jump_table_15}].b = r4.b
[r1 + 0x34 {0x6a4b7588}].d = r1
r6 = r6 - 0x2d
r1 = zx.d([r1 + 0x15 {0x6a4b7569}].b)
[r1 + 0x44].d = r4
r1 = r1 - 0x4a
r4 - 0x6c
[r1 + r5].w = r2.w
[r5 + r0 {0xd359475a}].w = r5.w
r2 = [r1 + 0x54].d
r4 = zx.d([r1 + 1].b)
r1 - 0x4a
r3 = r3 ^ r5
r2 = r1 * r2
[r5 + 0x60 {&data_5c}].d = r5
r2 = zx.d([r1 + r5].b)
r6 - 0x4c
[r1 + 0x1d].b = r2.b
[r5 + r1].b = r3.b
r3 = r3 + 0x4b
r5 = zx.d([r5 + 8 {&data_4}].b)
r5 = [&data_11318].d  {"VOj#Vi+IV%JoV?j7WY+]WsJ%W/jKWI+q…"}
r4 = 0 - r1
[r1 + 0x74].d = r3
r3 = [r5 + 4 {0x236a4f5a}].d
r3 = 0x4b
r0 = r0 + 0x2d
r5 = r5 - 0x4b
r4 = sx.d([r1 + r1].b)
r3 = sx.d([r1 + r5].b)
r3 = zx.d([r5 + 0xd {0x236a4f18}].b)
[r1 + 5].b = r3.b
r5 = r5
r5 - 0x4c
r4 = [r1 + 0x14].d
jump(r9)

int32_t sub_11206(int32_t, void* arg2, int32_t, int32_t arg4, int32_t arg5 @ r4, void* arg6 @ r5, int32_t arg7 @ r9)
r1 = r1 + 0x6b
[r1 + 0x14].d = r4
r5 = sx.d([r5 + r4].b)
r4 = zx.d([r1 + 0xd].b)
r4 = zx.d([r1 + 0x15].b)
r7 = r7 + 0x4c
r3 - sp
[r1 + r5].d = r4
r4 = [r5 + 0x30].d
r4 = [r1 + 0x34].d
temp0.d = r3
r3 = r3 + 0x4c
flag:c = temp0.d u>= 0xffffffb4
r7 = 0x4d
r3 = [r5 + r5].d
r5 = adc.d(r5, r1, flag:c)
r1 = 0x2c  {"4&^G"}
r5 = zx.d([r1 + r5].w)
jump(r9)

int32_t sub_11240(int32_t arg1, char* arg2, char* arg3 @ r5, char arg4 @ r6, int32_t arg5 @ r10)
[r1 + r5].b = r6.b
r6 = r6 + 0x6b
r6 = [r1 + 0x74].d
r4 = zx.d([r5 + r0].b)
r3 - 0x4e
r4 = 0x4c
r6 - r9
r2 = [&data_113fc].d  {"^'y$_E:J_cZp_#y8_A:^__Z&_}yL_=:r…"}
r7 = sx.d([r1 + r5].w)
[r5].b = r4.b
r7 = zx.d([r1 + 5].b)
r0 = r0 - 0x4b
r5 = r5 + 0x4f
r3 = sx.d([r5 + r1].w)
r7 = [&data_1139c].d  {"[GyB[e:g[%Z/[CyU[a:{\!ZC\?yi\]:1…"}
r6 = 0x2c  {"4&^G"}
r7 = [r1 + 0x14].d
r4 = [&data_11390].d  {"ZKy.[i:T[)Zz[GyB[e:g[%Z/[CyU[a:{…"}
r5 = 0x4f
[r5 + 9 {&data_58}].b = r3.b
r7 = r7 - 0x4f
r2 = r2 - 0x2c  {"4&^G"}
r0 = [r2 + r5 {0x24792781}].d
[r1 + 4].d = r3
[r2 + 0xd {0x2479273f}].b = r0.b
r0 - 0x6b
r7 - 0x50
r6 = [&data_11328].d  {"WY+]WsJ%W/jKWI+qWcJ9W}j_W9+'XSJM…"}
r1 = [&data_113bc].d  {"\{ZW\;y}\Y:E\wZk]7y3]U:Y]sZ!]3yG…"}
[r1 + 0x11 {0x575a7b6d}].b = r3.b
[r2 + 0x34 {0x24792766}].d = r0
r4 = r4 - 0x6b
r0 = zx.d([r2 + 0x15 {0x24792747}].b)
[r5 + 0x20 {&data_6f}].d = r4
r1 = r1 - 0x50
r1 - 0x4b
[r2 + r5 {0x24792781}].w = r1.w
r7 = [&data_11438].d  {"aqy)a1:OaOZuamy=a-:caKZ+biyQb):w…"}
r1 = [r2 + 0x54 {0x24792786}].d
[r5 + 0x14 {&data_63}].b = r4.b
r1 - 0x51
r5 = r5 - 0x4b
r1 = r2 * r1
[r5 + 0x34 {&data_38}].d = r2
r1 = zx.d([r2 + r5 {0x24792736}].b)
r3 - 0x2c  {"4&^G"}
[r2 + 0x1d {0x2479274f}].b = r1.b
[r1 + r5].d = r3
r3 = r3 + 0x52
[r5 + 0x1d {&data_21}].b = r2.b
r5 = [&data_113f0].d  {"^+yn^I:6^gZ\^'y$_E:J_cZp_#y8_A:^…"}
r7 = r7 - 0x2c  {"4&^G"}
[r2 + 0x74 {0x247927a6}].d = r2
[r1 + 0x54].d = r3
r3 = 0x52
r5 - 0x6a
temp0.d = r5
r5 = r5 - 0x52
flag:c = temp0.d u< 0x52
[r5 + r4 {0x9cf275fb}].w = r4.w
r2 = sx.d([r2 + r5 {0x92f2523e}].b)
r3 = zx.d([r1 + 5].b)
[r2 + 5].b = r2.b
r2 = adc.d(r2, r5, flag:c)
r5 - 0x53
[r5 + 0x70 {0x6e792b7c}].d = r4
jump(r10)

int32_t sub_1132c(int16_t arg1, int32_t arg2, void* arg3, int32_t arg4 @ r4, int32_t arg5 @ r7, int32_t arg6 @ r11)
[r2 + 0xd].b = r7.b
r5 = 0x4a
r7 - 0x57
r3 = [&data_114dc].d  {"gyY]g9y%gW:KguYqg5y9gS:_hqY'h1yM…"}
r1 = [&data_11494].d  {"d3YDdQyjdo:2d/YXeMy~ek:Fe+YleIy4…"}
[r5 + 4 {&data_4d+1}].b = r3.b
[r2 + 0x34].d = r7
r1 = r1 - 0x4a
r7 = zx.d([r2 + 0x15].b)
r2 = sx.d([r5 + r5 {&data_92+2}].w)
r1 = r1 - 0x57
r7 = 0x2b  {"O4&^G"}
[r3 + r5 {0x5d5979b1}].w = r0.w
r5 = [&data_11470].d  {"c?Zfc]y.c{:Tc;ZzcYyBcw:hd7Z0dUyV…"}
r0 = [r3 + 0x54 {0x5d5979bb}].d
[r5 + 0xd {0x665a3f70}].b = r2.b
r1 - 0x58
r3 = r3 - 0x2b  {"O4&^G"}
r0 = r3 * r0
[r1 + 0x14 {0x445932d7}].d = r2
r0 = zx.d([r3 + r5 {0xc3b3b89f}].b)
r0 - 0x69
[r3 + 0x1d {0x5d597959}].b = r0.b
r6 = [&data_11408].d  {"_#y8_A:^__Z&_}yL_=:r`[Z:`yy``9:(…"}
r3 = r3 + 0x58
[r1 + 0x11 {0x445932d4}].b = r2.b
r5 = [&data_114c8].d  {"fAy[f_:#f}YIf=yog[:7gyY]g9y%gW:K…"}
r4 = r4 - 0x69
[r3 + 0x74 {0x5d597a08}].d = r1
[r5 + 0x20 {0x5b794186}].d = r3
r3 = 0x59
r2 - 0x4a
r5 = r5 - 0x59
[r5 + r1 {0x9fd273d0}].d = r1
r1 = sx.d([r3 + r5 {0x5b794166}].b)
[r5 + 0x18 {0x5b794125}].b = r3.b
[r3 + 5 {sub_5e}].b = r1.b
r6 = r6 - 0x4a
r5 - 0x5a
[r5 + 0x44 {0x5b794151}].d = r1
jump(r11)

int32_t sub_1137e(int32_t arg1, int16_t* arg2, int32_t arg3, void* arg4, void* arg5 @ r5, void* arg6 @ r7, int32_t arg7 @ r11)
r4 - 0x2b  {"O4&^G"}
[r3 + 0x14].d = r2
[r1 + r1].w = r2.w
r2 = zx.d([r3 + 0xd].b)
r1 = zx.d([r5 + 1].b)
r7 = r7 + 0x5a
r3 = r3 & r5
r5 - 0x5a
[r3 + 0x64].d = r2
r3 = [&data_114fc].d  {"hO:rhmY:h-y`hK:(hiYNi)ytiG:<ieYb…"}
r6 - 0x79
r3 = [r3 + 0x14 {0x723a4f7c}].d
[r7 + r0].b = r2.b
r1 - 0x5b
r2 = zx.d([r3 + 9].b)
jump(r11)

int32_t sub_1143c(int32_t, int32_t arg2, int32_t arg3, void* arg4, void* arg5 @ r4, int32_t arg6 @ r5, int32_t arg7 @ r12)
r1 = r1 + 0x61
r7 = [&data_11528].d  {"j!y>j?:dj]Y,j{yRj;:xjYY@jwyfk7:-…"}
r7 = [&data_115c8].d  {"oi:Lp)YrpGx9pe:_p%Y'pCxMpa:sq!Y;…"}
[r3 + 0x15].b = r2.b
r1 = [r4 + 0x54].d
r5 = r5 - 0x79
r5 - 0x61
[r7 + 0x30 {0x4c3a699f}].d = r2
r3 = [&data_115d4].d  {"pe:_p%Y'pCxMpa:sq!Y;q?xaq]:)q{YO…"}
r3 - 0x5a
r2 = [r4 + 0x14].d
[r7 + r5].d = r1
r1 - 0x62
[r7 + 0x1c {0x4c3a698b}].b = r2.b
jump(r12)

int32_t sub_11500(int32_t arg1, int32_t arg2, int32_t arg3, void* arg4 @ r5, void* arg5 @ r7)
r0 = [r5 + 0x54].d
r2 = r2 - 0x59
r5 - 0x68
[r7 + 4].d = r1
r3 = [&data_116ac].d  {"x{9Lx;YrxYx:xw9`y7Y(yUxNys9ty3Y<…"}
r0 - 0x3a
r0 = [r5 + 0x14].d
r6 = [sub_11674].d
r1 - 0x69
[r7 + 0x11].b = r1.b
jump(sp)

int32_t sub_11516(int32_t arg1, int32_t arg2, int32_t arg3, void* arg4, int32_t arg5 @ r4, void* arg6 @ r5, int32_t* arg7 @ r7)
r4 = r4 - 0x3a
[r5 + 0x54].d = r1
[r3 + 0x24].d = r1
r5 = 0x69
r2 - 0x79
r1 = r5 * r1
[r7 + r0].d = r2
[r5 + 0x14 {&data_7c+1}].d = r1
[r3 + 0x19].b = r1.b
r1 = 0x6a
r6 = r6 - 0x79
r7 = r7 - 0x6a
[r7 + 0x40].d = r2
r2 = zx.d([r5 + r5 {&data_d1+1}].b)
r4 - 0x59
r2 = zx.d([r5 + 0xd {&data_73+3}].b)
[r7 + r1].w = r1.w
r3 = r3 - 0x6a
r2 = zx.d([r7].b)
r2 = [r5 + r5 {&data_d1+1}].d
r1 = r1 ^ r3
[r5 + 0x1d {&data_86}].b = r2.b
[r7 + 0x64].d = r1
r7 = r7 + 0x6b
r5 - 0x3a
[r5 + r5 {&data_d1+1}].b = r3.b
[r3 + r5].w = r1.w
[r5 + 0xd {&data_73+3}].b = r3.b
r1 = zx.d([r7 + 5].b)
r3 = r3 + 0x6b
r2 = r2 s>> r7
[r5 + r5 {&data_d1+1}].d = r3
[r3 + 0x74].d = r1
r3 = [r5 + 0x74 {sub_d6+7}].d
r7 - 0x79
r7 - 0x6b
[r7 + r4].b = r2.b
r5 = [&data_11714].d  {"|9x{|W9C|uYi|5x1|S9W}qY}}1xD}O9j…"}
r1 = zx.d([r3 + 0xd {0xf04d8949}].b)
r4 = [r5 + 0x34 {0x7b7839b0}].d
r1 = r7 * r1
r3 - 0x6c
r2 = [r7 + 0x10].d
r1 = [&data_11720].d  {"|5x1|S9W}qY}}1xD}O9j}mY2}-xX}K9~…"}
r1 = r1 + 0x59
[r5 + 0x74 {0x7b7839f0}].d = r4
r1 = sx.d([r7 + r5].b)
r7 = 0x6c
r2 = zx.d([r7 + 0x14 {&data_80}].b)
r5 - sp
r1 - r11
[r5 + 0x34 {0x7b7839b0}].d = r5
r1 = [r7 + 0x34 {&data_9e+2}].d
r3 = 0x6d
temp0.d = r3
r3 = r3 + 0x3a
flag:c = temp0.d u>= 0xffffffc6
r5 = adc.d(r5, r5, flag:c)
r1 = [r3 + r5].d
r5 = sx.d([r5 + r5].w)
r1 = zx.d([r7 + 0x19 {sub_10f16-0x10e91}].b)
r5 = zx.d([r5 + 0x15].b)
r2 = r7
r5 = r5 - 0x6d
r1 = [r3 + 0x44 {&data_e8+3}].d
r6 = zx.d([r5 + r5].w)
r4 = r4 + 0x78
r6 = zx.d([r5 + 5].b)
r2 = zx.d([r7 + r0].w)
r1 = r1 - 0x6e
r2 = 0x59
r6 = sx.d([r5 + r5].b)
r0 = [&data_11784].d  {""399"QY_"ox'"/9M#MXs#kx;#+9a#IX)…"}
[r5 + 0x15].b = r6.b
r2 = [r7 + 0x60 {sub_5f4-0x528}].d
r5 = r5 + 0x6e
r6 = r6 + 0x59
[r5 + r5].w = r6.w
r0 = zx.d([r7 + r1 {0x5503ec53}].b)
[r5 + 5].b = r7.b
r4 = 0x3a
r1 = r1 + 0x6f
r2 = [&data_1171c].d  {"|uYi|5x1|S9W}qY}}1xD}O9j}mY2}-xX…"}
r7 = [&data_11778].d  {"!79%"UYK"sxq"399"QY_"ox'"/9M#MXs…"}
[r7 + 1 {0x25393722}].b = r0.b
r7 = [r5 + 0x54].d
r0 = r0 - 0x3a
r5 - 0x6f
r1 = sx.d([r3 + r1 {0x5503ecfd}].w)
r3 = [&data_11784].d  {""399"QY_"ox'"/9M#MXs#kx;#+9a#IX)…"}
r6 = 0x78
r7 = [r5 + 0x14].d
r4 = [&data_116b4].d  {"xYx:xw9`y7Y(yUxNys9ty3Y<yQxbyo9*…"}
r1 - 0x70
[r3 + 9 {0x3939332b}].b = r1.b
<return> jump(lr)

int32_t sub_11674(void* arg1 @ r6)
r7 = [&data_11850].d  {")'Np*Im8*k.^*/N&*QmL*s.r*7N:+Ym`…"}
r1 = [r3 + 0x54].d
r6 = [r6 + 0x54].d
r5 = r5 + 0x78
r5 - 0x76
r2 = zx.d([r7 + r4].w)
r3 = [&data_1185c].d  {"*/N&*QmL*s.r*7N:+Ym`+{.(+?NN+amt…"}
r3 = 0x59
r6 = [r6 + 0x14].d
r1 = [&data_11868].d  {"*7N:+Ym`+{.(+?NN+amt+%.<+GNb+im*…"}
r1 - 0x77
r2 = [r7 + 0x70 {0x704e2799}].d
<return> jump(lr)

int32_t sub_11724(int32_t arg1, int32_t arg2, int32_t arg3, void* arg4 @ r4, int32_t arg5 @ r5, int16_t* arg6 @ r7)
[r7 + r5].w = r4.w
r1 = sx.d([r7 + r4].b)
[r7 + 5].b = r5.b
r1 = zx.d([r3 + 0x15].b)
r1 = r1 + 0x7d
r0 = r0 + &data_11732  {"9j}mY2}-xX}K9~}iYF~)xl~G94~eYZ~%…"}
r7 = [&data_11928].d  {"1YN]2{n%2?/K2aNq2%n92G/_2iN'3-nM…"}
r1 = [r7 + 0x20 {0x5d4e5951}].d
r5 = [r7 + 0x54 {0x5d4e5985}].d
r2 = r2 + 0x59
r5 - 0x7d
r0 = [r7 + r1].d
r3 = [&data_11934].d  {"2aNq2%n92G/_2iN'3-nM3O/s3qN;35na…"}
r1 = zx.d([r7 + 0x18 {0x5d4e5949}].b)
r5 = [r7 + 0x14 {0x5d4e5945}].d
r1 = r11
flag:n = r1 - 0x7e s< 0  {"eCo=M"}
flag:c = r1 u< 0x7e  {"eCo=M"}
flag:v = add_overflow(r1, -0x7e)
r0 = [r7 + 0x44 {0x5d4e5975}].d
jump(&data_1174c => 21 @ &data_1174c)  {"~eYZ~%x"~C9H~aYn~!x6!?9\!]Y$!{xJ…"}

if (not(flag:n)) then 22 else 23 @ 0x11750  {"~%x"~C9H~aYn~!x6!?9\!]Y$!{xJ!;9p…"}

jump(0x166ad4c)

if (not(flag:c)) then 24 else 29 @ 0x11754  {"~C9H~aYn~!x6!?9\!]Y$!{xJ!;9p!YY7…"}

r2 = 0x1f800000 - r8
flag:n = 0x1f800000 - r8 s< 0
flag:c = 0x1f800000 u< r8
flag:v = add_overflow(0x1f800000, neg.d(r8))
goto 29 @ 0x11754  {"~C9H~aYn~!x6!?9\!]Y$!{xJ!;9p!YY7…"}

if (flag:n) then 30 else 42 @ 0x11758  {"~aYn~!x6!?9\!]Y$!{xJ!;9p!YY7!wx]…"}

temp0.d = r9 - 0x20
r1 = [temp0.d].d
r2 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r4 = [temp0.d + 0xc].d
r5 = [temp0.d + 0x10].d
r6 = [temp0.d + 0x14].d
r8 = [temp0.d + 0x18].d
r9 = [temp0.d + 0x1c].d
lr = [temp0.d + 0x20].d
r9 = undefined
goto 42 @ 0x11758  {"~aYn~!x6!?9\!]Y$!{xJ!;9p!YY7!wx]…"}

if (flag:v) then 43 else 45 @ 0x1175c  {"O4&^G"}  {"~!x6!?9\!]Y$!{xJ!;9p!YY7!wx]!79%…"}

r6 = Coproc_GetOneWord(1, 2, 9, 0xe, 3)
goto 45 @ 0x1175c  {"~!x6!?9\!]Y$!{xJ!;9p!YY7!wx]!79%…"}

if (flag:c) then 46 else 50 @ 0x11760  {"!?9\!]Y$!{xJ!;9p!YY7!wx]!79%"UYK…"}

temp0.d = (r8 u>> 0x10) - (lr u>> 0x10)
temp1.d = r8.w - lr.w
r2 = temp0.d u>> 1 << 0x10 | temp1.d u>> 1
goto 50 @ 0x11760  {"!?9\!]Y$!{xJ!;9p!YY7!wx]!79%"UYK…"}

if (not(flag:n)) then 51 else 53 @ 0x11764  {"!]Y$!{xJ!;9p!YY7!wx]!79%"UYK"sxq…"}

unimplemented  {ldcpl p15, c3, [r9],  #-0x84}
goto 53 @ 0x11764  {"!]Y$!{xJ!;9p!YY7!wx]!79%"UYK"sxq…"}

if (not(flag:c)) then 54 else 57 @ 0x11768  {"!{xJ!;9p!YY7!wx]!79%"UYK"sxq"399…"}

r5 = zx.d([r9].b)
r9 = r9 - 0xd21
goto 57 @ 0x11768  {"!{xJ!;9p!YY7!wx]!79%"UYK"sxq"399…"}

if (flag:n) then 58 else 59 @ 0x1176c  {"!;9p!YY7!wx]!79%"UYK"sxq"399"QY_…"}

jump(0x1e303f4)

if (not(flag:v)) then 60 else 66 @ 0x11770  {"\x1bEZE6F"}  {"!YY7!wx]!79%"UYK"sxq"399"QY_"ox'…"}

temp2.d = r1 u>> 0x16
r3 = r9 ^ r1 u>> 0x16
flag:n = (r9 ^ temp2.d) s< 0
flag:c = unimplemented
flag:v = unimplemented
goto 66 @ 0x11770  {"!YY7!wx]!79%"UYK"sxq"399"QY_"ox'…"}

if (flag:c) then 67 else 69 @ 0x11774  {"!wx]!79%"UYK"sxq"399"QY_"ox'"/9M…"}

r5 = zx.d([r9 - (r1 u>> 0x12)].b)
goto 69 @ 0x11774  {"!wx]!79%"UYK"sxq"399"QY_"ox'"/9M…"}

if (not(flag:n)) then 70 else 72 @ &data_11778  {"!79%"UYK"sxq"399"QY_"ox'"/9M#MXs…"}

unimplemented  {ldclpl p7, c7, [r8,  #-0x84]!}
goto 72 @ &data_11778  {"!79%"UYK"sxq"399"QY_"ox'"/9M#MXs…"}

if (not(flag:c)) then 73 else 76 @ 0x1177c  {""UYK"sxq"399"QY_"ox'"/9M#MXs#kx;…"}

r9 = r9 - 0x721
r3 = [r9].d
goto 76 @ 0x1177c  {""UYK"sxq"399"QY_"ox'"/9M#MXs#kx;…"}

if (flag:n) then 77 else 79 @ 0x11780  {""sxq"399"QY_"ox'"/9M#MXs#kx;#+9a…"}

call(0x1666c0c)
goto 79 @ 0x11780  {""sxq"399"QY_"ox'"/9M#MXs#kx;#+9a…"}

if (not(flag:v)) then 80 else 85 @ &data_11784  {""399"QY_"ox'"/9M#MXs#kx;#+9a#IX)…"}

temp3.d = r2 u>> 6
flag:n = r8 + temp3.d s< 0
flag:c = r8 + temp3.d u< r8
flag:v = add_overflow(r8, temp3.d)
goto 85 @ &data_11784  {""399"QY_"ox'"/9M#MXs#kx;#+9a#IX)…"}

if (flag:c) then 86 else 95 @ 0x11788  {""QY_"ox'"/9M#MXs#kx;#+9a#IX)#gxO…"}

temp0.d = r9 - 0x18
r1 = [temp0.d].d
r5 = [temp0.d + 4].d
r8 = [temp0.d + 8].d
r9 = [temp0.d + 0xc].d
r12 = [temp0.d + 0x10].d
sp = [temp0.d + 0x14].d
r9 = undefined
goto 95 @ 0x11788  {""QY_"ox'"/9M#MXs#kx;#+9a#IX)#gxO…"}

if (not(flag:n)) then 96 else 99 @ 0x1178c  {""ox'"/9M#MXs#kx;#+9a#IX)#gxO#'9u…"}

syscall_info = 0x595122
syscall
goto 99 @ 0x1178c  {""ox'"/9M#MXs#kx;#+9a#IX)#gxO#'9u…"}

if (not(flag:c)) then 100 else 103 @ 0x11790  {""/9M#MXs#kx;#+9a#IX)#gxO#'9u#EX=…"}

r8 = r8 - (r2 u>> 0x1e)
r6 = zx.d([r8].b)
goto 103 @ 0x11790  {""/9M#MXs#kx;#+9a#IX)#gxO#'9u#EX=…"}

if (flag:n) then 104 else 106 @ 0x11794  {"#MXs#kx;#+9a#IX)#gxO#'9u#EX=$cxc…"}

unimplemented  {ldcmi p15, c2, [r9,  #-0x88]!}
goto 106 @ 0x11794  {"#MXs#kx;#+9a#IX)#gxO#'9u#EX=$cxc…"}

if (not(flag:v)) then 107 else 111 @ 0x11798  {"#kx;#+9a#IX)#gxO#'9u#EX=$cxc$#9+…"}

flag:n = r8 - 0x8c0 s< 0
flag:c = r8 u< 0x8c0
flag:v = add_overflow(r8, -0x8c0)
goto 111 @ 0x11798  {"#kx;#+9a#IX)#gxO#'9u#EX=$cxc$#9+…"}

if (flag:c) then 112 else 114 @ 0x1179c  {"#+9a#IX)#gxO#'9u#EX=$cxc$#9+$AXP…"}

call(0x1e2c42c)
goto 114 @ 0x1179c  {"#+9a#IX)#gxO#'9u#EX=$cxc$#9+$AXP…"}

if (flag:v) then 115 else 117 @ 0x117a0  {"#IX)#gxO#'9u#EX=$cxc$#9+$AXP$_xv…"}

unimplemented  {teqvs r9, r3, lsr  #0x16}
goto 117 @ 0x117a0  {"#IX)#gxO#'9u#EX=$cxc$#9+$AXP$_xv…"}

if (not(flag:c)) then 118 else 126 @ 0x117a4  {"eCo=M"}  {"#gxO#'9u#EX=$cxc$#9+$AXP$_xv$}9>…"}

temp0.d = r8 - 0x18
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r5 = [temp0.d + 8].d
r8 = [temp0.d + 0xc].d
r11 = [temp0.d + 0x10].d
lr = [temp0.d + 0x14].d
goto 126 @ 0x117a4  {"eCo=M"}  {"#gxO#'9u#EX=$cxc$#9+$AXP$_xv$}9>…"}

if (flag:n) then 127 else 130 @ 0x117a8  {"Co=M"}  {"#'9u#EX=$cxc$#9+$AXP$_xv$}9>$=Xd…"}

syscall_info = 0x786723
syscall
goto 130 @ 0x117a8  {"#'9u#EX=$cxc$#9+$AXP$_xv$}9>$=Xd…"}

if (not(flag:v)) then 131 else 134 @ 0x117ac  {"#EX=$cxc$#9+$AXP$_xv$}9>$=Xd$[x,…"}

r9 = r9 - 0x723
r2 = [r9].d
goto 134 @ 0x117ac  {"#EX=$cxc$#9+$AXP$_xv$}9>$=Xd$[x,…"}

if (flag:c) then 135 else 137 @ 0x117b0  {"$cxc$#9+$AXP$_xv$}9>$=Xd$[x,%y9R…"}

unimplemented  {ldcllo p5, c4, [r8,  #-0x8c]}
goto 137 @ 0x117b0  {"$cxc$#9+$AXP$_xv$}9>$=Xd$[x,%y9R…"}

if (flag:v) then 138 else 142 @ 0x117b4  {"$#9+$AXP$_xv$}9>$=Xd$[x,%y9R%9Xx…"}

flag:n = r8 + 0x90000000 s< 0
flag:c = r8 u>= 0x70000000
flag:v = add_overflow(r8, 0x90000000)
goto 142 @ 0x117b4  {"$#9+$AXP$_xv$}9>$=Xd$[x,%y9R%9Xx…"}

if (not(flag:c)) then 143 else 145 @ 0x117b8  {"$AXP$_xv$}9>$=Xd$[x,%y9R%9Xx%Wx@…"}

call(0xe5a44c)
goto 145 @ 0x117b8  {"$AXP$_xv$}9>$=Xd$[x,%y9R%9Xx%Wx@…"}

if (not(flag:n)) then 146 else 151 @ 0x117bc  {"$_xv$}9>$=Xd$[x,%y9R%9Xx%Wx@%u9f…"}

temp4.d = r4 u>> 2
r4 = r8 - (r4 u>> 2)
flag:c = r8 u< temp4.d
flag:v = add_overflow(r8, neg.d(temp4.d))
goto 151 @ 0x117bc  {"$_xv$}9>$=Xd$[x,%y9R%9Xx%Wx@%u9f…"}

if (not(flag:v)) then 152 else 155 @ 0x117c0  {"$}9>$=Xd$[x,%y9R%9Xx%Wx@%u9f%5X.…"}

r5 = zx.d([r8].b)
r8 = r8 - (r4 u>> 0x1e)
goto 155 @ 0x117c0  {"$}9>$=Xd$[x,%y9R%9Xx%Wx@%u9f%5X.…"}

if (flag:c) then 156 else 158 @ 0x117c4  {"$=Xd$[x,%y9R%9Xx%Wx@%u9f%5X.%SxT…"}

unimplemented  {cdplo p13, #0x3, c7, c9, c4, #0x1}
goto 158 @ 0x117c4  {"$=Xd$[x,%y9R%9Xx%Wx@%u9f%5X.%SxT…"}

if (flag:v) then 159 else 162 @ 0x117c8  {"$[x,%y9R%9Xx%Wx@%u9f%5X.%SxT%q9z…"}

r3 = zx.d([r8].b)
r8 = r8 - 0xd24
goto 162 @ 0x117c8  {"$[x,%y9R%9Xx%Wx@%u9f%5X.%SxT%q9z…"}

undefined

int32_t sub_1186c(int32_t arg1 @ r4, void* arg2 @ r5, int32_t arg3 @ r7)
r3 = [r5 + r4].d
[r5 + 4].d = r5
r3 = zx.d([r5 + 0xc].b)
r0 - 0x2e
r7 = r7 - 0x2b  {"O4&^G"}
r6 = [&data_119b0].d  {"7unC79/i7[O17}nW7A/}7cOE7'nk8I/3…"}
[r5 + 0x10].d = r3
[r5 + 0x11].b = r5.b
r5 = 0x2b  {"O4&^G"}
r4 = r4 - 0x2e
jump(r5 => 11 @ 0x2a)

r7 = [&data_260].d
r6 = 0x34
jump(r11)

int32_t sub_11938(int32_t, int32_t arg2, int32_t arg3 @ r6)
r5 = 0x32
r1 = r1 - 0x6e
jump(r6)

int32_t sub_1193e(int32_t arg1, void* arg2, int32_t arg3, char arg4, int32_t arg5 @ r4, void* arg6 @ r6)
r7 = sx.d([r5 + r4].w)
r2 = [r6 + 0x10].d
r7 = 0x4e
r5 - 0x33
r5 = [&data_11b00].d  {"C;o;C]0`C!P(CCoNDe0tD)P<DKobDm0*…"}
r7 = [&data_11a18].d  {":=Or;_n:;#0`;EO(;gnN;+0t;MO;;ona…"}
[r5 + 0xc {0x3b6f3b4f}].b = r7.b
[r6 + 4].b = r3.b
r3 = r3 - 0x4e
r5 = r5 + 0x33
[r5 + 0x14 {0x3b6f3b8a}].d = r6
r3 = sx.d([r6 + r4].b)
r1 - 0x2f
r3 = zx.d([r6 + 4].b)
r7 = [&data_11a94].d  {"?QoD?s0j?7O2?YoX@{0~@?OF@aol@%04…"}
r5 = r5 - 0x33
[r5 + 0x15 {0x3b6f3b58}].b = r6.b
r4 = sx.d([r6 + r4].w)
r4 = r4 - 0x2f
r3 = 0x34
[r1 + 0x24].d = r6
r4 - r6
r2 - 0x6e
[r6 + 0x70].d = r4
[r5 + r0].d = r7
r3 - 0x34
[r1 + 0x19].b = r6.b
r5 = [&data_11a48].d  {"<]Oc<!n+<C0Q=eOw=)n?=K0e=mO-=1nS…"}
r6 = r6 - 0x6e
r4 = [r6 + 0x70].d
[r5 + 0x40 {0x634f5d7c}].d = r7
r3 = r3 + 0x35
r4 - 0x4e
[r6 + r4].b = r5.b
[r5 + r1].w = r6.w
[r6 + 0x1c].b = r5.b
r7 = zx.d([r5 {0x634f5d3c}].b)
r3 = r3 - 0x35
r7 = r7 ^ r1
r5 = zx.d([r6 + r4].b)
[r5 + 0x64].d = r6
r1 = 0x35
r6 - 0x2f
r5 = r5 | r6
[r1 + r1 {&data_68+2}].b = r7.b
[r6 + 0x50].d = r6
r6 = zx.d([r5 + 9].b)
r1 - 0x36
r7 & r5
r3 = [&data_11a7c].d  {">Anz>c0B>'Oh?Io0?k0V?/O|?QoD?s0j…"}
r7 = [r1 + 4 {&data_38+1}].d
r6 = [r6 + 0x50].d
r7 - 0x6e
r1 = r1 + 0x36
[r5 + r4].b = r7.b
[r6 + r4].w = r6.w
r7 = zx.d([r1 + 0xd {sub_10f16-0x10e9e}].b)
[r6 + 0x14].b = r7.b
r6 = r5 * r6
r1 = r1 - 0x37
r7 = [r5 + 0x10].d
r7 = zx.d([r6 + r4].w)
r1 = r1 + 0x4f
r7 = zx.d([r6 + 0x14].b)
r6 = sx.d([r5 + r5].b)
r7 = r7 s>> r6
r7 = zx.d([r5 + 0x14].b)
[r6 + 0x30].d = r7
r7 - r9
r7 = 0x37
r6 = [r5 + 0x34].d
r1 = [&data_11ab0].d  {"@%04@GOZ@io"@-0GAOOmAqo5A50[AWO#…"}
r3 = r3 + 0x2f
r0 = [r7 + 0x30 {&data_64+3}].d
r7 = [r1 + r5].d
r7 - 0x38
r1 = 0x6e
[r7 + r4].d = r0
jump(r5)

int32_t sub_11b04(int16_t* arg1, int32_t arg2, char* arg3, int32_t arg4 @ r4, void* arg5 @ r5, int32_t* arg6 @ r6, int32_t arg7 @ r7, int32_t arg8 @ r8)
r3 = zx.d([r0 + r5].b)
[r6].d = r0
r1 = 0x43
r0 - 0x50
r3 = r0 * r3
r6 = [&data_11ccc].d  {"TaKbT)j*TO+PTuKvU=j>Uc+dU+K,UQjR…"}
[r0 + 0x54].d = r4
[r6 + 0x10 {0x624b6164}].b = r0.b
r1 - 0x44
r4 = r4 - 0x50
r3 = [&data_11c2c].d  {"NGpTNi1zN-PBOOphOq10O5PVOWp|Oy1D…"}
[r5 + 0x24].d = r7
r4 = [r0 + 0x54].d
r2 - 0x30
r1 = r1 + 0x44
[r2 + r1].d = r0
[r0 + r5].w = r4.w
[r5 + 0x19].b = r7.b
[r0 + 0x15].b = r4.b
r6 = r6 - 0x30
r1 = r1 - 0x45
[r2 + 0x44].d = r0
r5 = zx.d([r0 + r5].w)
flag:c = r4 u< 0x6f
r5 = zx.d([r0 + 0x15].b)
[r6 + r0].w = r0.w
r5 = adc.d(r5, r0, flag:c)
r0 = zx.d([r2 + 1].b)
[r0 + 0x34].d = r5
r7 = r7 ^ r5
r7 = 0x45
[r6 + 0x60 {0x624b6184}].d = r0
r1 = [&data_11c5c].d  {"PgpFP+1kPMP3PopYP31!QUPGQwpmQ;15…"}
r6 - 0x50
r6 = [r0 + 0x34].d
[r5 + r5].w = r7.w
flag:c = r7 u< 0x46
r0 = zx.d([r6 + 4].b)
[r0 + r5].d = r6
r0 = adc.d(r0, r2, flag:c)
[r0 + 0xd].b = r6.b
[r5 + 0x74].d = r7
r7 = r7 + 0x46
r7 - 0x30
r6 = [r0 + r5].d
[r2 + r5].b = r0.b
r7 = zx.d([r0 + 0xd].b)
r7 = zx.d([r5 + 0xd].b)
r7 = r7 - 0x47
r0 = r0 | r6
[r0 + 0x14].d = r7
r0 = [r2 + 0x14].d
r5 = 0x47
r1 = r1 + 0x6f
jump(r8)

int32_t sub_11b72(int32_t arg1, void* arg2, int32_t arg3, int32_t arg4, void* arg5 @ r5, void* arg6 @ r6, int32_t arg7 @ r10)
r0 = sx.d([r6 + r4].b)
r7 = [r0 + 0x14].d
r0 = zx.d([r2 + 0x15].b)
r5 - 0x47
r7 - sp
r7 = [&data_11ca0].d  {"R7j9S]+_S%J'SKjLSq+rS9J:S_j`S'+(…"}
r0 = [r6 + 0x30].d
[r1 + 5].b = r0.b
r3 = r3 + 0x50
r5 = r5 + 0x48
r7 = [r5 + r5].d
r0 = sx.d([r1 + r5].b)
r1 = 0x31
r0 = zx.d([r1 + 5 {&data_36}].b)
jump(r10)

int32_t sub_11c30(int32_t arg1, void* arg2, void* arg3, int32_t arg4 @ r5, int32_t arg5 @ r10)
r6 = [r1 + 0x14].d
r1 = zx.d([r6 + 8].b)
r5 - 0x4e
r0 = 0 - r2
r7 = [&data_11d78].d  {"Z'k&[M,L[sLq[;k9[a-_[)L'[OkM[u-s…"}
r0 = [r6 + 4].d
[r1 + 5].b = r7.b
r0 = r0 + 0x31
r5 = r5 + 0x4f
r0 = sx.d([r2 + r1].b)
r7 = sx.d([r1 + r5].b)
r0 = zx.d([r6 + 0x11].b)
r7 = zx.d([r1 + 5].b)
r1 = r1 + r6
r5 = r5 - 0x4f
r0 = [r2 + 0x24].d
r7 = sx.d([r1 + r5].w)
r2 = r2 + 0x70
r3 = 0x50
r1 = [r6 + r0].d
r0 - r10
r0 = zx.d([r2 + 0x19].b)
[r2 + 0x74].d = r0
r0 = lr
r3 - 0x50
r1 = [r6 + 0x30].d
r5 = [&data_11da8].d  {"\wku\?-=\eLc]-k+]S-Q]yLw]Al?]g-d…"}
r3 = r3 + 0x50
r0 = [r2 + 0x74].d
r0 = [r6 + r5].d
r3 = r3 + 0x50
r1 = 0x31
[r2 + r5].b = r1.b
jump(r10)

int32_t sub_11d42(int32_t arg1 @ r5, int32_t arg2 @ r11)
r4 = r5
r0 = [r3 + 0x54].d
r3 = [r1 + 0x44].d
r5 = r5 + 0x59
r4 = r4 + 0x6b
r1 = zx.d([r3 + r5].w)
r4 = zx.d([r5 + r0].w)
r3 = 0x59
r2 = 0x4b
r1 = [&data_11ebc].d  {""CkU#i-{#1LC#Wki#}-1#ELW#kk}#3-E…"}
r0 = [&data_11f04].d  {"%]ln%%-6%KL\&ql$&9-J&_Lp&'l8&M-^…"}
r1 = [r3 + 0x74 {sub_5f4-0x527}].d
r4 = [r5 + 0x60].d
r7 = r7 + 0x59
r6 = r6 + 0x4c
r1 = zx.d([r3 + r5].b)
r3 = zx.d([r5 + r1].b)
r5 = 0x5a
r4 = 0x2c  {"4&^G"}
r3 = [&data_11ed4].d  {"#kk}#3-E$YLj$!k2$G-X$mL~$5kF$[-l…"}
r2 = [&data_11e9c].d  {"!-,?!SLe"yk-"A,S"gLy"/kA"U,g"{L/…"}
[r3 + 5 {0x7d6b6b28}].b = r2.b
[r5 + 1 {&data_58+3}].b = r3.b
r1 = r1 - 0x5a
r0 = r0 - 0x2c  {"4&^G"}
r2 = sx.d([r3 + r5 {0x7d6b6b7d}].w)
r4 = sx.d([r1 + r1].w)
r7 = 0x5a
r6 = 0x6b
r5 = [&data_11eec].d  {"$5kF$[-l$#L4%IlZ%o-"%7LH%]ln%%-6…"}
r4 = [&data_11e30].d  {"a_.[a'M#bMlIbs.ob;M7bal]b).%bOMK…"}
[r3 + 0xd {0x7d6b6b30}].b = r3.b
[r1 + 5].b = r4.b
r3 = r3 - 0x5b
r1 = r1 - 0x6b
[r3 + 0x14 {0x7d6b6adc}].d = r3
r5 = sx.d([r5 + r4 {0xa1999485}].w)
r1 - 0x5b
r7 = 0x4c
r7 = [&data_11f00].d  {"%7LH%]ln%%-6%KL\&ql$&9-J&_Lp&'l8…"}
r5 = [&data_11f40].d  {"'cls'+-;(QMa(wl)(?-O(eMu(-l=(S.c…"}
[r3 + 0x15 {0x7d6b6add}].b = r3.b
[r5 + 0xc {0x736c6333}].b = r5.b
r5 = r5 - 0x5c
r3 = r3 - 0x4c
[r3 + 0x34 {0x7d6b6ab0}].d = r4
[r5 + 0x14 {0x736c62df}].d = r3
r3 - 0x5c
r1 - 0x2d
[r3 + r5 {0xf0d7cd47}].d = r4
r7 = [&data_11ed8].d  {"#3-E$YLj$!k2$G-X$mL~$5kF$[-l$#L4…"}
[r3 + 0x1d {0x7d6b6a99}].b = r4.b
[r5 + 0x15 {0x736c62e0}].b = r3.b
r7 = r7 - 0x5c
r5 = r5 - 0x2d
[r3 + 0x54 {0x7d6b6ad0}].d = r4
[r1 + 0x34].d = r4
r5 - 0x5d
flag:c = r3 u< 0x6b
[r3 + r5 {0xf0d7cd1a}].w = r5.w
[r5 + r4 {0xce9ac1ff}].d = r5
r5 = zx.d([r3 + 5 {0x7d6b6a81}].b)
[r1 + 0x1d].b = r4.b
r5 = adc.d(r5, r3, flag:c)
r7 = r7 - 0x6c
[r3 + 0x74 {0x7d6b6af0}].d = r5
[r5 + 0x40].d = r5
r7 - 0x5d
r4 - 0x4c
[r3 + r5].b = r5.b
[r5 + r1].w = r4.w
r6 = zx.d([r3 + 0xd {0x7d6b6a89}].b)
r5 = zx.d([r5].b)
r6 = r3 * r6
r4 = r4 ^ r1
r6 = [r3 + 0x14 {0x7d6b6a90}].d
[r5 + 0x64].d = r4
r1 = r1 + 0x5e
r6 - 0x2d
r6 = sx.d([r3 + r5].b)
[r1 + r1].b = r4.b
r6 = zx.d([r3 + 0x15 {0x7d6b6a91}].b)
r4 = zx.d([r5 + 9].b)
r7 - r11
r5
r7 = [r3 + 0x34 {0x7d6b6ab0}].d
r4 = [r1 + 4].d
r3 = r3 + 0x5f
r0 = r0 + 0x6c
r7 = [r3 + r5].d
r5 = sx.d([r5 + r0].b)
r1 = 0x5f
r5 = zx.d([r1 + 0x11 {&data_6f+1}].b)
jump(r11)

int32_t sub_11f44(int32_t arg1, void* arg2, int32_t arg3 @ r4, int32_t* arg4 @ r5, int32_t arg5 @ r6)
r3 - 0x27
r3 = r3 - 0x2d
[r5 + r4].d = r0
[r1 + 0x14].d = r5
[r5 + 0x1c].b = r0.b
r1 - 0x6c
r7 = r7 - 0x28
r7 = [&data_12008].d  {"/wN&/?mL/e/r/-N:/Sm`/y/(0ANN0gnt…"}
[r5 + 0x50].d = r0
[r1 + 0x15].b = r5.b
r5 - 0x28
r5 = r5 - 0x6c
[r5 + r4].w = r0.w
[r5 + 0x30].d = r6
r0 = zx.d([r5 + 4].b)
r3 - 0x4d
r1 = r1 s>> r5
[r5 + r5].d = r4
[r5 + 0x70].d = r1
[r5 + 0x18].b = r6.b
r7 - 0x29
r6 = r6 - 0x4d
[r5 + r4].b = r1.b
[r5 + 0x44].d = r4
r1 = zx.d([r5 + 0xc].b)
r4 - 0x2e
r1 = r1 | r5
[r1 + r1].w = r5.w
r2 = [r5 + 0x10].d
r4 = zx.d([r5 + 1].b)
r1 = r1 + 0x2a
r6 = r6 & r5
r2 = sx.d([r5 + r4].b)
[r1 + 0x64].d = r5
r2 = zx.d([r5 + 0x14].b)
r6 - 0x6d
r2 - r5
[r5 + r0].b = r6.b
r2 = [r5 + 0x30].d
r5 = zx.d([r1 + 9].b)
r3 = r3 + 0x2a
r5 = 0 - r5
r3 = [r5 + r4].d
r6 = [r5].d
r1 = 0x2b  {"O4&^G"}
r0 = r0 + 0x4d
jump(r5)

int32_t sub_1200c(int32_t arg1, void* arg2, int32_t arg3, int32_t arg4, uint32_t* arg5 @ r5, int32_t arg6 @ r6, int32_t arg7 @ r7)
r7 = r7 - 0x2f
r4 = [&data_121c4].d  {"?-or?W1:?#P`@Mo(@w1N@CPt@mo<@91b…"}
[r5 + 0x50].d = r7
[r5 + 8].b = r7.b
r5 - 0x2f
r2 = r2 - 0x4e
[r5 + r4].w = r7.w
[r5 + 4].d = r5
r7 = zx.d([r5 + 4].b)
r0 - 0x2f
r0 = r0 s>> r6
r6 = [&data_1215c].d  {";Q/C;{Oi<Gn1<q0W<=O}<gnE<30k<]O3…"}
[r6 + 0x70 {0x432f51ab}].d = r0
[r5 + 0x11].b = r6.b
r7 - 0x30
r4 = r4 - 0x2f
[r6 + r4 {0xb59e7e4b}].b = r0.b
[r1 + 0x24].d = r6
r0 = zx.d([r6 + 0xc {0x432f5147}].b)
r2 - 0x6e
r0 = r0 | r6
[r5 + r0].d = r7
r0 = [r6 + 0x10 {0x432f514b}].d
[r1 + 0x15].b = r6.b
r1 = r1 + 0x31
r5 = r5 - 0x6e
r1 = sx.d([r6 + r4 {0xb59e7e4b}].b)
[r5 + 0x30].d = r7
r1 = zx.d([r6 + 0x14 {0x432f514f}].b)
r3 - 0x4e
r1 - r6
[r5 + r5].d = r6
r1 = [r6 + 0x30 {0x432f516b}].d
[r5 + 0x1c].b = r7.b
r3 = r3 + 0x31
r7 = r7 - 0x4e
r2 = [r6 + r4 {0xb59e7e4b}].d
[r5 + 0x54].d = r6
r1 = 0x32
r5 - 0x2f
jump(r6)

int32_t sub_1205e(int32_t arg1, int16_t* arg2, int32_t arg3 @ r4, void* arg4 @ r5, int32_t arg5 @ r7)
[r1 + r5].w = r7.w
r2 = [r6 + 0x50].d
r6 = zx.d([r5 + 5].b)
r5 = r5 + 0x32
r7 = r7 s>> r5
r2 = zx.d([r6 + r4].w)
[r1 + 0x74].d = r7
r3 = 0x32
r7 - 0x6e
r1 = [&data_12140].d  {":EnT:o/z;;OB;enh;1/0;[OV;'n{;Q/C…"}
[r5 + r4].b = r7.b
r3 = [r6 + 0x70].d
r7 = zx.d([r1 + 0xd {0x546e4547}].b)
r7 = r7 + 0x33
r6 = r5 * r6
r3 = zx.d([r6 + r4].b)
r7 = [r5 + 0x10].d
r5 = 0x33
r0 = r0 + 0x4f
r3 = [&data_12154].d  {";[OV;'n{;Q/C;{Oi<Gn1<q0W<=O}<gnE…"}
r6 = sx.d([r5 + r1 {0x546e456d}].b)
[r6 + 4].b = r3.b
r0 = zx.d([r6 + 0x10].b)
r1 = r1 - 0x34
r7 = r7 + r9
r4 = sx.d([r6 + r4].w)
r6 = [r5 + 0x24 {&data_54+3}].d
r7 = 0x34
r2 = r2 + 0x30
r5 = [&data_1216c].d  {"<=O}<gnE<30k<]O3<)nY=S0!=}OG=Iom…"}
r7 = [r1 + r1 {0xa8dc8a0c}].d
[r6 + 0xc {0xafef130c}].b = r4.b
r6 = zx.d([r5 + 0x19 {0x7d4f3d55}].b)
r3 = r3 - 0x34
r0 = r6
[r6 + 0x10].d = r4
r7 = [r1 + 0x44 {0x546e454a}].d
r1 - 0x35
r4 = r4 + 0x6e
r7 = [&data_12184].d  {"=}OG=Iom=s05=?O[=io#>50I>_Oo>+o6…"}
r0 = zx.d([r6 + r0].w)
[r6 + 0x14].b = r5.b
r2 = 0x4f
r5 = r5 - 0x35
r0 = [&data_12270].d  {"FA25FkR[F7q#Fa2IF-RoFWq7F#3]GMR%…"}
[r6 + 0x30].d = r5
r0 = [r6 + 0x60].d
r3 - 0x35
r6 = r6 + 0x4f
[r6 + r4].d = r6
r7 = zx.d([r5 + r1 {0xd1bd820d}].b)
[r6 + 0x1c].b = r6.b
r3 = 0x30
r7 = r7 - 0x36
r1 = [&data_12208].d  {"BeQeB1p-B[1SB'QyBQpAB{1gCGQ/CqpU…"}
[r6 + 0x50].d = r6
r7 = [r5 + 0x74 {0x7d4f3d7b}].d
r5 - 0x36
r7 = r7 + 0x30
[r6 + r4].w = r6.w
r7 = zx.d([r1 + r5 {0xe2a0a249}].b)
r6 = zx.d([r6 + 4].b)
r5 = 0x6f
r7 = r7 s>> r6
r3 = [&data_121a0].d  {">+o6>U0\>!P$>KoJ>u0p?AP8?ko^?70&…"}
[r6 + 0x70].d = r7
[r1 + 5 {0x65516547}].b = r7.b
r7 - 0x37
r1 = r1 - 0x6f
[r6 + r4].b = r7.b
r0 = sx.d([r6 + r4].w)
r7 = zx.d([r6 + 0xc].b)
r7 = 0x4f
r7 = r7 | r6
r5 = [&data_122b0].d  {"HORaHyr)HE3NHoRtH;r<Ie3bI1S*I[rP…"}
r7 = [r6 + 0x10].d
[r6 + 0xc].b = r0.b
r1 = r1 + 0x38
r3 = r3 - 0x50
r0 = sx.d([r7 + r4].b)
[r5 + 0x14 {0x61524f5c}].d = r7
r0 = zx.d([r7 + 0x14].b)
r1 - 0x30
r0 - r7
r7 = [&data_12248].d  {"Dsq2D?2XDiQ~D5qFE_2lE+Q4EUqZE!2"…"}
r0 = [r7 + 0x30 {0x32717374}].d
[r5 + 0x15 {0x61524f5d}].b = r7.b
r3 = r3 + 0x38
r4 = r4 - 0x30
r0 = [r7 + r4].d
[r2 + 0x24 {&data_73}].d = r0
r1 = 0x39
r2 - 0x6f
jump(r7)

int32_t sub_12158(int32_t, void* arg2, int32_t, int32_t arg4, int32_t arg5 @ r4, void* arg6 @ r5)
r7 = 0x3b
r6 = zx.d([r5 + 0xd].b)
[r7 + r4].d = r3
r7 = r7 | r5
r3 = zx.d([r7 + 0xc].b)
r7 = [r1 + 0x14].d
jump(r7)

int32_t sub_1220c(uint32_t* arg1, int16_t arg2, int32_t arg3 @ r4, int32_t arg4 @ r5, int16_t* arg5 @ r6, int32_t arg6 @ r8)
r1 = r1 + 0x42
flag:c = r5 u< 0x70
r2 = zx.d([r0 + r5].w)
[r6 + r4].w = r1.w
r7 = 0x42
r1 = zx.d([r2 + 5].b)
[r0 + r5].d = r2
r0 = adc.d(r0, r6, flag:c)
r2 = zx.d([r0 + 0xd].b)
[r6 + 0x70].d = r1
jump(r8)

int32_t sub_1233c(int32_t arg1, void* arg2, int32_t arg3 @ r6, int32_t arg4 @ r10)
r5 - 0x4d
r4 = [r6 + 0x50].d
r5 = sx.d([r1 + r5].b)
r5 = r5 + 0x54
r3 = 0x4d
r3 = zx.d([r6 + r1].w)
r5 = [&data_12438[0x4c]].d  {"YiWvY5w>Z_8dZ+W,ZUwRZ!8xZKW@Zuwf…"}
r2 = 0x35
[r1 + 0x1d].b = r6.b
r0 = [&data_12438[0x68]].d  {"ZuwfZA8-[kXS[7wy[a8A[-Xg[Ww/[#8U…"}
r6 = r1 * r6
r3 = [r6 + 0x64].d
r6 = [r1 + 0x54].d
r6 = r6 + 0x35
r1 = r1 - 0x4e
r4 = zx.d([r2 + r1].b)
[r1 + 0x34].d = r6
r4 = 0x73
r7 - 0x4e
r2 = [&data_12438].d  {"V;77WeV]W1v%W[7KW'WqWQv9W{7_WGW'…"}
r7 = [r1 + r5].d
[r2 + 1 {0x37373b57}].b = r4.b
r5 = 0x4f
r0 = r0 - 0x74
r7 = [&data_12438[0x74]].d  {"[7wy[a8A[-Xg[Ww/[#8U[MX{\wwC\C9i…"}
r5 = sx.d([r6 + r0].w)
r7 = zx.d([r1 + 5].b)
r6 = 0x54
r7 - r9
r4 = [&data_12438[0x110]].d  {"`_yaa+:)aUYOa!yuaK:=auYcaAy+bk:Q…"}
r7 = [r1 + 0x74].d
[r6 + 8 {&data_5c}].b = r5.b
r3 = r3 - 0x4f
r2 = r2 - 0x54
[r2 + 0x54 {0x37373b56}].d = r0
[r6 + 4 {&data_58}].d = r4
r1 = r1 + 0x50
r0 - 0x35
r0 = zx.d([r2 + r5].w)
r6 = [&data_12438[0xa8]].d  {"]%93]OXY]yx~]E9F]oXl];x4^e9Z^1X"…"}
r7 = 0x50
[r6 + 0xd {0x3339256a}].b = r4.b
[r2 + r5].d = r0
r3 = r3 - 0x35
r0 = zx.d([r2 + 0xd {0x37373b0f}].b)
[r2 + 0x14 {0x37373b16}].d = r5
jump(r10)

int32_t sub_129fe(int32_t arg1, int32_t arg2, int32_t arg3 @ r4, void* arg4 @ r5, char arg5 @ r7, void* arg6)
r2 = r2 + 0x6d
r7 = r7 | r5
r6 = [r5 + r0].d
[r5 + 4].b = r7.b
r6 = zx.d([r1 + 0x19].b)
r0 = r0 s>> r6
r5 = sp {arg_0}
r0 = [r6 + 0x70].d
r6 = [r5 + 0x40 {arg6}].d
r7 = r7 - 0x30
r4 = r4 + 0x4e
r0 = [r6 + 0x50].d
r5 = zx.d([r5 + r1].w)
r5 = r5 - 0x30
r2 = 0x2f
r0 = [r6 + 0x30].d
r0 = [&data_12438[0x720]].d  {"<s<=<G[c<yz+<M<Q=![w=S{?='<e=Y[-…"}
r3 = r3 - 0x30
r5 = [r5 + 0x64].d
r1 = [r6 + 0x10].d
r5 = r5 + 0x2f
r1 = r1 - 0x31
r6 = zx.d([r1 + r5].w)
[r6 + 0x70].d = r1
r3 = 0x6e
r7 = r7 + 0x31
r1 = [&data_12438[0x6b8]].d  {"8%Ym8Wx58+:[9]Y#91yI9c:n97Z69iy\…"}
[r6 + 0x50].d = r1
r6 = [r1 + 0x74 {0x6d5925ac}].d
r5 = r5 + 0x31
r7 = r7 + 0x6e
[r6 + 0x30].d = r1
r7 = zx.d([r5 + r4].b)
r3 = r3 + 0x32
r5 = 0x4e
[r6 + 0x10].d = r2
r3 = [&data_12438[0x7c8]].d  {"B5?9Bg^_C;~'Cm?MCA^sCs~;CG?aCy_(…"}
r1 = r1 + 0x32
[r5 + 4 {&data_52}].b = r7.b
r2 = sx.d([r6 + r4].w)
r1 = r1 - 0x4f
r7 - 0x32
r6 = sx.d([r5 + r5 {&data_9a+2}].w)
r2 = zx.d([r6 + r4].b)
r7 = 0x2f
r5 - 0x33
r5 = [&data_12438[0x760]].d  {">E\h?w|0?K=V?}\|?Q|D?%=j?W]2?+|X…"}
r3 = r3 | r6
[r6 + 0xc {&data_4517}].b = r7.b
[r6 + 0x14 {&data_451f}].b = r3.b
r3 = r3 - 0x56
r1 = [&data_12438[0x6fc]].d  {";);`;[Z(;/zN;a;t;5[<;gza<;;)<m[O…"}
[r6 + 0x14 {&data_451f}].d = r6
r3 = zx.d([r6 + 0xc {&data_4517}].b)
r1 - 0x37
r7 = [&data_12438[0x704]].d  {";/zN;a;t;5[<;gza<;;)<m[O<Azu<s<=…"}
r7 = [&data_12438[0x794]].d  {"@=|"@o>HAC]mAu}5AI>[A{]#AO}IA#>o…"}
r3 = 0x33
[r6 + 0x15 {&data_4520}].b = r6.b
[r6 + r4].b = r4.b
r4 = r4 - 0x37
r1 - 0x34
[r2 + 0x24].d = r7
r4 = zx.d([r6 + r4].w)
r2 - 0x76
r7 - 0x34
[r7 + r0 {0x5fb8b07c}].d = r0
[r6 + 0x10 {&data_451b}].d = r4
[r2 + 0x19].b = r7.b
r5 = r5 + 0x34
r6 = r6 - 0x77
[r6 + 0x70 {&data_4504}].d = r4
[r7 + 0x40 {0x227c3d80}].d = r0
r3 = r3 - 0x35
r4 - 0x57
r5 = [r6 + 0x50 {0x44e4}].d
[r6 + r1 {0x603b6dcf}].w = r7.w
r5 = r5 s>> r6
r0 = zx.d([r7 {0x227c3d40}].b)
[r6 + 0xc {&data_44a0}].b = r5.b
r0 = r0 ^ r3
<return> tailcall(r6)

int32_t sub_13414(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t* arg5 @ r5)
r2 = r1 s>> 0x16
r1 = r0
r4 = r3 s>> 0x16
r1 = r0
r6 = r5 s>> 0x16
r1 = r0
r0 = r0 s>> 0x17
r1 = r0
r0 = r2 s>> 0x17
r1 = r0
r6 = r3 s>> 0x17
r1 = r0
r2 = r5 s>> 0x17
r1 = r0
r2 = r7 s>> 0x17
r1 = r0
r4 = r1 s>> 0x18
r1 = r0
r2 = r3 s>> 0x18
r1 = r0
r4 = r6 s>> 0x15
r1 = r0
r0 = r4 s>> 0x15
r1 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r1 = [r4 + r5].d
r7 = zx.d([r5 + 0x14].b)
r7 = [&data_13574].d
[r6 + 0x34].d = r7
r1 = zx.d([r6].b)
[r6 + r1].d = r5
r1 = r1 & r6
[r5 + r5].d = r6
r2 = r2 - 0x6c
r6 = 0x2a
r6 = sx.d([r5 + r0].b)
r0 = r0 - 0x6f
r2 - 0x38
r4 = [r2 + 0x74].d
r6 = zx.d([r6 + r5].b)
[r4].b = r1.b
r5 = sx.d([r0 + r5].b)
r5 = zx.d([r4 + 0x15].b)
r3 = [r6 + 0x10].d
r1 = r7 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0 + r0
r1 = [r0 + 0x74].d
r5 = [&data_136ac].d
r1 = r1 + r5
r3 = 0x49
r6 = [r7 + 0x50 {&data_6f+3}].d
[r2 + 9].b = r4.b
r7 = r3 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r3 = r3 - 0x49
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = [r0 + r0].d
r6 = r6 + 0x6f
r5 = zx.d([r6 + r4].w)
r4 = [r4 + 0x50].d
[r5 + 0x40].d = r2
r0 = sx.d([r0 + r1].w)
[r5 + 4].b = r2.b
[r5 + r4].d = r3
r7 = zx.d([r5 + 0x15].b)
r6 - 0x42
[r3 + 0x11 {&data_11}].b = r5.b
[r5 + r0].w = r5.w
r5 = 0x7e  {"eCo=M"}
[r3 + 0x44 {&data_44}].d = r4
r1 = zx.d([r5 + 0x11 {&data_8e+1}].b)
r5 - &data_134f6  {"zstgp!~d;b,;(C?Gw3k<D-pt:U-z0"}
r1 - 0x59
[r7 + 0xd].b = r2.b
[r6 + 0x74 {0x4fd547e5}].d = r4
r1 = 0x70
[r7 + 0x44].d = r6
[r7 + 0x20].d = r3
r3 = r3 - 0x2c  {"4&^G"}
r0 = r0 | r5
jump(r7 => 121 @ 0x1c, 123 @ 0x4c, 125 @ &data_4d+3, 130 @ &data_73+3, 140 @ 0x88)

r0 = r6 << 4
if (r9 u<= r1) then 147 else 148 @ 0x22

unimplemented  {stc p0, c0, [r11], #0x100}
goto 125 @ &data_4d+3

[sp + 0x40 {arg_40}].d = r0
r2 = r0 << 1
r1 = r3 - 1
r4 = r0 << 1
undefined

r0 = r0
r3 = r0 << 0x14
r5 - r6
r6 = zx.d([r1 + 6 {&data_73+3}].w)
r5 = r4 * r5
r5 = r5 - 0x6f
r5 = r1 << 1
[r6 + 0xd {&data_b+2}].b = r7.b
call(r9)
goto 140 @ 0x88

r5 = &data_110
r0 = [&data_44c].d
r7 = zx.d([r0 + 0x34 {0xea5cc959}].w)
r2 = r1 << 1
call(r11)
r0 = r0
jump(0xfffffdac)

jump(0xfffffff2)

call(lr)
r7 = [r4 + r7].d
r1 = [&data_1fc].d
r7 = r3 << 0x10
r7 = [&data_260].d
r6 = 0x34
jump(r11)

int32_t sub_13538(void* arg1, int32_t arg2, int32_t arg3, void* arg4, int16_t* arg5 @ r4, char* arg6 @ r8)
r2 = r2
r5 = 0x48
r5 - 0x6a
r3 - 0x52
r7 = sx.d([r5 + r1].b)
r6 = zx.d([r4 + r5].w)
r7 = r7 + 0x27
r1 = zx.d([r1 + 0x19].b)
r2 = [r2 + 0x34].d
r2 = zx.d([r2 + 0x19].b)
[r5 + 0x20 {&data_68}].d = r0
[r4 + r0].w = r7.w
r1 = r1 ^ r2
r1 = 0x75
r7 = [r7 + 0x30].d
r1 = sx.d([r1 + r5 {0xbd}].b)
r6 = r6 s>> r5
r7 = [r7 + 0x60].d
r4 = r4 + 0x55
r2 = r0 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = zx.d([r0 + 0x10].b)
r7 - 0x21
r6 = 0 - r4
r2 = r4
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = zx.d([r0].b)
r2 = zx.d([r7 + 9].b)
r3 - 0x38
r3 = r3 + 0x7c
[r5 + 1 {&data_49}].b = r1.b
[r6 + r1].w = r0.w
[r0 + 0x74].d = r6
r4 = [r6 + 0x60].d
r4 = [r0 + 0x44].d
r0 = r0 + 0x79
[r2 + 0x54].d = r3
[r4 + 0x10].d = r7
r4 = r4 + 0x45
r7 = 0x5e
r0 = r6 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r3 = r3
r2 = sx.d([r1 + r1 {0xc4}].b)
r0 = zx.d([r3 + r5].b)
r0 - 0x6f
r6 = 0 - r5
r1 = zx.d([r5 + 1 {&data_49}].b)
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
[r0].d = r0
r7 = zx.d([r3 + 0x15].b)
r6 = 0x2d
r6 = zx.d([r5 + 9 {sub_13414-0x133c3}].b)
r0 = sp + r0
[r4 + r4].b = r6.b
[r6 + 4 {&data_92+2}].b = r6.b
r7 = [r1 + 0x44 {sub_138+0xa}].d
r2 = [r7 + 0x24 {0xe163a4c8}].d
[r4 + 0x1c].b = r5.b
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r7 = 0x5e
r5 = [&data_137a8].d
r6 = [&data_1379c].d
r3 = r3 - 0x32
[r4 + r1].w = r1.w
[r5 + r0].d = r5
[r3 + 0x74].d = r3
r7 = [&data_137ac].d
[r5 + 0x30 {&data_30}].d = r3
r0 = 0 - r1
r1 = sx.d([r3 + r5].b)
r7 = zx.d([r0 + 0x15 {0xffffff17}].b)
r4 = r4 - 0x75
[r6 + 4 {&data_4}].b = r3.b
[r7 + 0x70].d = r4
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = zx.d([r0 + r0 {0xfffffe04}].w)
r4 = zx.d([r4 + 0x18].b)
r3 = [r2 + 0x54].d
r5 = zx.d([r3 + 0x15].b)
[r0 + 0x54].d = r7
[r0 + r5].w = r7.w
[r2 + r5].w = r1.w
r6 = r9
r6 = [r5 + 0x74].d
r6 = r6 - 0x3d  {"EZE6F"}
r7 = [r6 + 0x60].d
r6 = [r1 + r5].d
r5 = r5 + 0x47
r3 = [&data_13814[0x14]].d  {"t$w'~"{,B]$Rb_"9n[CQKuu-i`}n8l8b…"}
[r7 + 0xc].b = r4.b
r6 = r6 ^ r1
r4 = sx.d([r1 + r5].b)
r3 = zx.d([r6 + 0x10].b)
r2 = [r6 + 0x34].d
[r4 + 4].b = r7.b
[r7 + 0x64].d = r4
[r1 + 0x64].d = r6
r7 = r7 + 0x58
[r6 + r5].w = r3.w
r7 = r7 + 0x59
[r7 + r5].d = r7
r3 = 0x4c
r6 = zx.d([r5 + 0x14].b)
[r1 + 0x44].d = r1
r7 = zx.d([r5 + r1].w)
[r7 + r5].w = r0.w
[r3 + r1].w = r2.w
[r1 + 0x11].b = r4.b
r7 = sx.d([r5 + r5].w)
r2 = 0x2b  {"O4&^G"}
r6 = r2 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = zx.d([r0 + 0x10].b)
r5 - 0x46
r5 = sx.d([r0 + r1].w)
r1 = r5
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = sx.d([r0 + r0].b)
r3 = r7
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r4 = 0
r6 = [r5 + r0].d
r2 - 0x41
[r6 + 0x18].b = r5.b
r2 = r1 * r2
r0 = [&data_13814].d  {"\|=[g!s`;Sz,T=cS^=[Rt$w'~"{,B]$R…"}
[r6 + 0x60].d = r1
r2 = zx.d([r4 + r4 {&data_0}].w)
r5 = 0x36
r1 = [r5 + 0x30 {&data_64+2}].d
[r4 + r4 {&data_0}].w = r3.w
r0 = sp + r0 {arg_5b3d7c5c}
r6 = zx.d([r1 + 0x19 {0x4e040059}].b)
r5 = r5 - 0x31
r1 = 0x60
r0 = [&data_13814[0x10]].d  {"^=[Rt$w'~"{,B]$Rb_"9n[CQKuu-i`}n…"}
r2 = r4
r7 = r7 - 0x29
r2 = r2 - 0x39
[r3 + 0x14].d = r4
r3 = sx.d([r2 + r5 {0xffffffcc}].b)
r7 = r7
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r7 = 0x6e
r3 = r3 + 0x63
r0 = zx.d([r4 + r1 {sub_5e+2}].w)
r1 = r1 - 0x5c
r5 = [&data_138c0].d
r6 - 0x37
r0 = r0 ^ r2
r5 - 0x73
r5 = r8
r1 = [r4 + 0x20 {&data_1d+3}].d
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r1
[r6 + 0x14].b = r7.b
r3 = 0x7a
[r7 + 4 {&data_6f+3}].b = r1.b
[r2 + 0x44 {&data_b}].d = r2
r1 = zx.d([r5].b)
r1 = r1 + 0x45
r7 - 0x57
r7 = r7 + 0x67
r4 = [r5 + 0x70].d
[r0 + 0x24 {0xffff70b8}].d = r3
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = [r0 + 0x10 {0xffff70a4}].d
[r5 + 0xc].b = r4.b
r6 = r6 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
[r2 + 0x34 {0xfffffffb}].d = r3
r5 = [r5 + 0x44].d
r6 = r6 - 0x64
r4 = r3 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r6 = r6
r4 = r4 - 0x59
r5 = r5 + 0x2e
r4 - 0x3f
r5 = 0x65
r4 = zx.d([r1 + 0x1d].b)
r2 = zx.d([r5 + r0].w)
[r1 + 0x1d].b = r1.b
r7 = [r3 + r5 {sub_d6+9}].d
[r7 {0x558bf04d}].d = r0
r0 = sx.d([r0 + r5].b)
[r6 + 0x70].d = r3
r2 = 0x45
r3 = zx.d([r1 + 5].b)
r4 - 0x3f
r0 - 0x6c
r3 = zx.d([r6 + r4].w)
r5 = [r4 + 0x74].d
r1 = r1 - 0x5a
r2 = r0 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = zx.d([r0 + r4].w)
r4 = zx.d([r3 + 0x11].b)
r5 = zx.d([r7 + r4].w)
r1 = 0x67
[r6 + 4].d = r3
[r7 + r4].w = r3.w
r4 - 0x7a
r5 = r5 - 0x54
[r4 + r5].w = r3.w
r5 = r5 - 0x5e
[r3 + r1].w = r3.w
r4 = 0x74
r7 = 0x77
r2 = 0x7e  {"eCo=M"}
r4 - 0x7b
r2 = zx.d([r0 + r5].b)
[r4 + r0].w = r4.w
r2 = sx.d([r4 + r5].w)
r1 = r1 - 0x22
r6 = zx.d([r5 + r5].w)
[r0 + r5].d = r3
[r1 + 0x15 {&data_58+2}].b = r3.b
r5 - 0x75
[r5 + 4].d = r1
r5 = [r7 + 0x64 {sub_d6+5}].d
r0 = [r7 + 0x40 {&data_b7}].d
[r7 + 0x20 {&data_96+1}].d = r0
r7 = 0x71
[r1 + 0x15 {&data_58+2}].b = r4.b
r3 = r3 + r6
r2 = [r7 + 0x10 {&data_80+1}].d
[r3 + 5].b = r1.b
r4 = r4 + 0x64
r2 = r2 - 0x7a
r3 = r3 + 0x5e
r3 = [&data_13958].d
r7 = r1 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = sx.d([r0 + r0 {0x9da0ba8e}].w)
r2 = r5 * r2
r6 = sx.d([r5 + r4 {0x893c4ad8}].w)
r4 = [r2 + r5 {0xf820a800}].d
[r4 + 0x60].d = r5
[r7 + 4 {&data_8e}].d = r3
r0 = r0 + 0x21
r5 = [r5 + 0x10 {0x893c4a10}].d
r7 = [&data_13a4c].d  {"OzZB"}
[r4 + 0x44].d = r7
r2 - 0x42
r5 - 0x32
r7 - 0x29
r3 = zx.d([r2 + r1 {0x6ee45e45}].b)
r0 = zx.d([r3 + 1].b)
r3 = [r5 + r1].d
r2 = r2 ^ r6
r1 = r1 & r4
r1 = r1 + 0x54
r5 = [r6 + 0x50].d
r0 = zx.d([r6 + r0].b)
r3 - 0x40
[r6 + r5].w = r4.w
[r6 + 0x15].b = r4.b
r0 = [r6 + 0x20].d
r3 = 0x6d
[r3 + 0x64 {&data_d1}].d = r5
r2 = r2 + 0x7c
[r5 + 9].b = r5.b
r4 = r4 - 0x77
r2 = r2 + 0x5c
[r5 + r5].d = r6
r3 = zx.d([r7 + 0x15 {0x425a7a64}].b)
r4 = 0x33
r4 = r7
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
[r0 + 0x1c].b = r0.b
[r1 + 0x44].d = r6
[r7 + 0x70 {0x425a7abf}].d = r2
r5 = 0 - r6
r0 = [r5 + 0x44].d
r0 = sx.d([r6 + r4].w)
r4 = zx.d([r6 + 0x10].b)
r0 = [&data_13ae4].d
r2 = zx.d([r4 + 0xc].b)
r5 = r5 + r4
r5 = 0 - r7
r7 = [r7 {0x425a7a4f}].d
[r6 + 0xd].b = r5.b
[r4].d = r1
r1 = r4 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = zx.d([r4 + 1].b)
[r7 + 0x60].d = r1
[r2 + 4].d = r5
[r7 + 9].b = r3.b
[r2 + 5].b = r3.b
r7 = [r6 + 0x60].d
[r1 + 0x15].b = r5.b
r7 = zx.d([r0 + r1].b)
r7 = zx.d([r5 + 0x14 {0xbda585c5}].b)
r7 = r7 s>> r6
r5 - r12
r1 = [&data_13a4c[4]].d
r4 = r1 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r2
r2 - 0x49
r6 = [r4 {&data_0}].d
r2 = zx.d([r5 + 0x11 {0xbda585c2}].b)
r5 = r5 + 0x2a
[r6 + r1 {0x4aaca4}].w = r2.w
r0 = zx.d([r5 + 0xd {0xbda585e8}].b)
r5 = [&data_13b48].d
r1 = 0x41
r2 = [&data_13b10].d
r5 = zx.d([r6 + 0x19 {0x4aacbd}].b)
r1 = 0x52
[r5 + 0xc].b = r6.b
[r7 + 0x44].d = r7
r4 = [r7 + 0x60].d
[r0 + 0x24].d = r5
r1 - 0x39
[r1 + r1 {&data_a2+2}].w = r5.w
[r2 + 0x64 {&data_64}].d = r1
r4 = zx.d([r6 {0x4aaca4}].b)
r4 = r4 ^ r6
jump(r6)

int32_t sub_13b54(int32_t arg1, int32_t arg2, void* arg3 @ r4, int32_t* arg4 @ r6, int32_t arg5 @ r9, char* arg6 @ r10)
r0 = [r0 + r0].d
r1 = adc.d(r1, r6, flag:c)
r5 = [r4 + 0x60].d
r2 = [r6 + r4].d
r0 = [&data_13be8].d
r6 = zx.d([r0 + 0x11 {sub_10f16-0x10e92}].b)
[r6 + 0x34 {&data_ab}].d = r1
r4 = [&data_13c84].d
r1 = r10
r2 - 0x45
r7 = zx.d([r6 + r5].w)
r5 = r5 - 0x36
r6 = zx.d([r7 + 0x1c].b)
[r5 + r0].d = r6
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
[r1 + r1].b = r4.b
r3 = [&data_13d20].d
[r3 + 0x74 {0x7b000074}].d = r0
r1 = r1 + 0x4e
[r4 {&data_0}].d = r4
r1 = zx.d([r0 + 9 {&data_7c}].b)
[r3 + 9 {0x7b000009}].b = r4.b
r5 = r5 + 0x25
r7 - 0x58
jump(r9)

int32_t sub_13c0a(int32_t, int32_t arg2, int32_t arg3, int32_t arg4, void* arg5 @ r5, int32_t arg6 @ r6, void* arg7 @ r7)
r2 = 0
r1 - 0x54
r2 = sx.d([r4 + r5].b)
r2 = [&data_13d5c].d  {"zcKIUi{^$:?"}
r4 - r9
r4 = [&data_13dfc].d
[r5 + 0x64].d = r3
r2 = [r3 + 0x64].d
r6 = r6 + 0x79
r7 - 0x5a
r4 = zx.d([r4 + 0x15 {0x7f734982}].b)
r2 = zx.d([r5 + r1].w)
r1 = [r5 + 0x70].d
r1 = sx.d([r5 + r1].b)
r1 = r1 - 0x47
r1 = zx.d([r7 + r1].w)
[r5 + 0x60].d = r6
r7 = r7 + 0x63
[r4 + 0x64].d = r6
r5 = [r5 + 0x74].d
r3 = 0x43
r5 = 0x48
r7 = r7 - 0x6f
r4 = zx.d([r1 + 1].b)
[r2 + 0x64].d = r5
r5 = [&data_13e10].d
jump(r7)

int32_t sub_13c94(void* arg1, int32_t arg2, int32_t, int32_t arg4, int32_t arg5 @ r4, void* arg6 @ r5, char* arg7 @ r6)
r1
r1 = r1 & r4
[r1 + 5].b = r6.b
r1 = r1 - 0x42
[r5 + 0x34].d = r4
r3 - r5
r0 = [r0 + 0x44].d
[r6 + r4].b = r5.b
r3 = r3 ^ r5
r6 = [r1 + r1].d
r7 = sx.d([r6 + r1].w)
r4 - 0x35
jump(r5)

int32_t sub_13cbc(int32_t arg1, int32_t arg2, int16_t* arg3, char arg4 @ r4, char* arg5 @ r7, int32_t arg6 @ r9)
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r5 = [r2 + r5].d
r1 = [r6 + 0x30].d
r7 - 0x2a
r1 = [r7 + 0x44].d
r5 = [r2 + 0x14].d
r5 = r5 + 0x40
r0 - 0x57
[r7 + 1].b = r1.b
[r7 + r5].b = r4.b
r6 = zx.d([r7 + r1].w)
r4 = zx.d([r7 + 0xd].b)
r1 = r1 + 0x3b
[r2 + r1].w = r1.w
r7 = 0 - r0
r7 - 0x2b  {"O4&^G"}
r1 = [&data_13ed4].d
[r7 + 0x14].d = r0
[r5].d = r4
r1 = r1 - 0x7e  {"eCo=M"}
r6 = r6 - 0x5e
r6 = 0x40
r5 = r5 + 0x67
[r2 + 0x34].d = r4
r4 = [&data_13e94].d
[r2 + 0x1d].b = r4.b
r3 = 0x6f
r7 = zx.d([r4 + 0x1c {0x6f2b7f76}].b)
r2 = zx.d([r2 + r5].b)
r5 = [r6 + 0x10 {&data_4d+3}].d
r2 = [&data_13eac].d  {"h|yIb0gV\u:PZ=xk|PF"}
r4 = 0x7c
r2 = zx.d([r6 + 0x18 {&data_58}].b)
r0 = r0 + 0x64
r5 = sx.d([r1 + r5 {0x428f92}].w)
r2 = 0x78
r7 = r7 ^ r6
r2 = [r5 + 0x44].d
r7 = r2 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = zx.d([r0 + 0xc].b)
r7 = r7 + 0x6e
r0 = zx.d([r7 + 1].b)
[r5 + 0x60].d = r3
r1 = zx.d([r4 + r4 {&data_f8}].b)
[r6 + 0x50 {&data_8e+2}].d = r6
r6 = r7 * r6
r4 = [r7 + r4].d
r1 = r1 + 0x4c
r3 = r6 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = [r0].d
[r7 + 0x34].d = r2
r1 = [&data_13e8c].d
r5 = [r2 + 0x14].d
r3 = sx.d([r7 + r1].w)
temp0.d = r2
r2 = r2 - 0x24
flag:c = temp0.d u< 0x24
r7 = r7
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r2 = zx.d([r6 + r5].w)
r5 = [r5 + 0x64].d
r6 = [r7 + 0x44].d
[r5 + 0x50].d = r2
[r1 + 0x11 {0x295a7a5c}].b = r6.b
r7 = adc.d(r7, r3, flag:c)
r4 = sx.d([r2 + r1].w)
jump(r9)

uint32_t sub_13d86(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t* arg5 @ r4, void* arg6 @ r5, int32_t arg7 @ r6)
r4 - 0x3b
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r2 = zx.d([r5 + 1].b)
r0 = [r2 + 4].d
temp0.d = r6
r6 = r6 - 0x6d
flag:c = temp0.d u< 0x6d
r7 = [r4].d
temp1.d = r1
cond:0 = flag:c
r1 = adc.d(temp1.d, r3, cond:0)
flag:c = adc.d(temp1.d, r3, cond:0) u< temp1.d || (cond:0 && adc.d(temp1.d, r3, cond:0) == temp1.d)
r6 = adc.d(r6, r4, flag:c)
r0 = zx.d([r4 + r5].w)
r3 = [r7 + r4].d
r5 - &data_13db4  {"`vW]gwZ:8WbVY#h6noKj"}
[r7 + 0x70].d = r7
[r4 + 0x19].b = r0.b
r7 = zx.d([r2 + r5].b)
[r4 + 0x1d].b = r7.b
r2 = r2 - 0x5a
r0 = sx.d([r7 + r4].b)
r2 = sx.d([r4 + r1].b)
r3 = 0x59
r6 = r6 + 0x68
r6 = [r5 + 0x74].d
r3 = [r1 + 0x24].d
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = [r0 + r4].d
r2 = zx.d([r4 + 0xc].b)
r4 = r4 - 0x77
r3 = [r4 + 0x44].d
r3 - 0x52
r6 = r6 s>> r5
[r4 + r1].d = r5
r3 = 0x61
[r0 + 0x74].d = r1
r1 = [&data_13fb4].d  {",11mD_-*"}
r3 = zx.d([r6 + 0x1d].b)
r5 = r5 + 0x22
r6 = r6 + 0x56
[r4 + 9].b = r3.b
r2 = [&data_13fd0].d  {"HT)Sz+WCXCj:m6<#Y`z3"}
r1 = sx.d([r0 + r5].b)
[r1 + 0x74].d = r6
r6 = r6 - 0x3d  {"EZE6F"}
r3 - 0x38
r0 - 0x7d
r1 = 0 - r5
r7 = [r4 + r5].d
r3 = r3 + 0x7d
[r3 + r1].d = r1
r7 = zx.d([r7 + 1].b)
r3 = [r7 + r1].d
r2 = r2 - 0x24
r3 = [r0 + 0x44].d
r3 = zx.d([r7 + 4].b)
[r3 + 1].b = r2.b
r7 = r7 + 0x4b
r0 = zx.d([r7 + 0x1d].b)
r5 = [r6 + r5].d
r1 = r1 - 0x27
r7 = r7 - 0x29
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r5
r4 = zx.d([r5 + 0x1d].b)
r5 = zx.d([r7 + r1].w)
r7 = [r0 + 0x74].d
r2 = r5
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
[r3 + 0x74].d = r5
temp2.d = r3
r3 = r3 + 0x22
flag:c = temp2.d u>= 0xffffffde
r5 = sx.d([r7 + r1].w)
r6 = adc.d(r6, r5, flag:c)
[r0 + r1].b = r6.b
r5 = zx.d([r4 + 0x1c].b)
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r3 = zx.d([r1 + 9].b)
r1 - 0x5a
r3 = sx.d([r5 + r1].w)
[r7 + 0x64].d = r4
r2 = zx.d([r3 + 0x1d].b)
r3 = [r5 + 0x70].d
r6 = 0x6d
r4 = zx.d([r5 + r4].b)
<return> jump(lr)

int32_t sub_13ee0(int32_t arg1, char arg2, int32_t arg3, int32_t arg4 @ r4, int32_t arg5 @ r5, int16_t* arg6 @ r6)
r0 = r0
r3 = r3 & r5
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r4 = r4 - 0x4e
[r4 + 0x14].b = r1.b
[r6 + r5].w = r4.w
[r4 + r4].d = r2
r0 = r0 + 0x41
r5 = zx.d([r6 + 8].b)
r6 - 0x4d
[r4 + 9].b = r5.b
r1 = 0x70
r5 - 0x71
r3 = [r7 + 4].d
r7 = [&data_14088].d
r3 = [&data_140ec].d
r5 = [&data_1403c].d  {"dd#GVXFuB%TOU"}
r2 = [r6 + 0x70].d
[r5 + 0x60 {0x472364c4}].d = r7
r3 = [&data_140f0].d
r5 = r5 + 0x23
[r7 + 0x70 {&data_6f+1}].d = r4
r2 = zx.d([r7 + r1 {&data_6f+1}].b)
r7 = [&data_1403c[0xc]].d  {"U"}
jump(&data_13f26 => 34 @ &data_13f26)  {"81,7bCPGnA"MsLN|bSDRf:^NS9FhppEO…"}

undefined

int32_t sub_14000(void* arg1, void* arg2, void* arg3, int32_t arg4, void* arg5 @ r4, void* arg6 @ r6)
r3 = r3
r5 = 0x56
r5 - 0x79
r0 = r0 + 0x73
r0 - r7
r7 = zx.d([r2 + 9].b)
[r2 + 0x1d].b = r7.b
[r1 + 0x11].b = r0.b
r1 = [&data_14210].d
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r5 = zx.d([r6 + 5].b)
r5 = r5 - 0x4f
r6 = zx.d([r0 + r1].b)
temp0.d = r0
r0 = r0 + 0x4b
flag:c = temp0.d u>= 0xffffffb5
r2 = 0x41
[r5 + 0x15].b = r7.b
temp1.d = r3
temp2.d = r3
cond:0 = flag:c
r3 = adc.d(temp1.d, temp2.d, cond:0)
flag:c = adc.d(temp1.d, temp2.d, cond:0) u< temp1.d || (cond:0 && adc.d(temp1.d, temp2.d, cond:0) == temp1.d)
r2 = adc.d(r2, r7, flag:c)
[r0 + 0x14].d = r2
r7 = zx.d([r7 + 0xd].b)
r2 = [r7 + r4].d
[r4 + 0x44].d = r4
jump(r4)

int32_t sub_140e4(int32_t arg1, int32_t arg2, void* arg3, int32_t arg4, int16_t arg5 @ r4, int32_t arg6 @ r5, void* arg7)
r1 = r1 s>> 4
r0 = r0 << 1
r6 = &data_144d0
r6 = &data_14358
r7 = r3 s>> 4
temp1.d = r0
r0 = r0 << 1
flag:c = test_bit(temp1.d, 0x20 - 1)
[sp + 0x16c {arg_16c}].d = r2
if (not(flag:c)) then 10 @ 0x14158 else 20 @ 0x140f4

unimplemented  {cpsie AF}
r5 - 0xfd
r3 - 0xb4
r0 = r0 << 1
r6 - 0x99
r5 = r7
r0 = [r0 + 0x48].d
r0 = r0 << 1
[r1 + 0x3e].w = r4.w  {"ZE6F"}
goto 26 @ sub_1430c

r7 = r3 s>> 4
temp2.d = r0
r0 = r0 << 1
flag:n = temp2.d << 1 s< 0
r4 = &data_141f4
if (flag:n != flag:v) then 27 @ 0x14084 else 74 @ 0x140fc

undefined

r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r1 - 0x60
r5 = r2 * r5
r1 = zx.d([r4 {&data_141f4}].b)
r7 = r7 + 0x71
[r6 + r4 {0x2854c}].b = r0.b
r4 = 0x3a
r5 = 0x68
r1 = sx.d([r5 + r1 {&data_c8}].b)
r1 = [&data_14238].d
r5 = [r7 + 0x50].d
r6 - 0x35
r6 - 0x35
[r7 + 0x70].d = r1
r5 = sp + r5
[r7 + 0x44].d = r3
r6 = zx.d([r5].b)
r5 = r5 + 0x51
[r5 + 4].b = r2.b
r5 = zx.d([r6 + 1].b)
[r0 + 0x15].b = r0.b
r0 = r7 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
[r0 + 5].b = r3.b
r4 = r4 << 2
undefined

r3 = r5 s>> 0x15
r0 = r0 << 1
r5 = [sp + 0x240 {arg7}].d
unimplemented  {usat r5, #0xb, r5, asr #5}
r0 = r0 << 1
r7 = r4 + 7
goto 81 @ 0x13956

[r5 + 0xc].b = r6.b
[r7 + 0x44 {&data_1423f}].d = r7
r4 = [r7 + 0x60 {&data_1425b}].d
[r0 + 0x24].d = r5
r1 - 0x39
[r1 + r1].w = r5.w
[r2 + 0x64].d = r1
r4 = zx.d([r6 {&data_14358}].b)
r4 = r4 ^ r6
cond:0 = r4 == 0
cond:1 = r4 s>= 0
cond:2 = r4 == 0
jump(r6 => 94 @ &data_14358)

if (cond:0) then 95 else 102 @ &data_14370  {"atuYR8STqCiLwytC"}

r0 = r0
r0 = r0
r0 = r0 & r1
r0 = r0
r0 = r0
r0 = r0
goto 102 @ &data_14370  {"atuYR8STqCiLwytC"}

if (cond:1) then 103 else 115 @ &data_14370[8]  {"qCiLwytC"}

temp0.d = r5 - 0x1c
r0 = [temp0.d].d
r5 = [temp0.d + 4].d
r6 = [temp0.d + 8].d
r10 = [temp0.d + 0xc].d
r12 = [temp0.d + 0x10].d
sp = [temp0.d + 0x14].d
lr = [temp0.d + 0x18].d
r5 = undefined
r3 = zx.d([r3].b)
r3 = r3 - 0x852
goto 118 @ &data_14370[0x10]

unimplemented  {stclmi p3, c4, [r9],  #-0x1c4}
cond:2 = r4 == -0x1dc000
goto 118 @ &data_14370[0x10]

if (cond:2) then 119 else 125 @ 0x14390

r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
goto 129 @ 0x143a0

unimplemented  {stcne p5, c7, [r9], { #0xfa}}
unimplemented  {stcne p9, c7, [r9], { #0xe2}}
unimplemented  {vstmiane r9, {s14, s15}}
goto 129 @ 0x143a0

undefined

int32_t sub_1412c(int32_t arg1, void* arg2, int32_t arg3 @ r4, int32_t arg4 @ r7)
r6 = r5 - 7
r0 = r0 << 1
[r1 + 0xc].w = r7.w
push(r5)
push(r0)
r6 = r5 - 7
r0 = r0 << 1
r4 - lr
r2 = r3 u>> 5
r1 = 0x81
r0 = r0 << 1
r8 - r9
unimplemented  {stc2l p1, c2, [r4], {0x81}}
r0 = r0 << 1
r1 = [r5 + 0x64].d
r5 = zx.d([r0 + 0x19].b)
r1 = 0x8b
r0 = r0 << 1
r2 = r4 << 0xa
r5 - 0xbc
r1 = 0x8b
r0 = r0 << 1
unimplemented  {cpsie AF}
r5 - 0xfd
r3 - 0xb4
r0 = r0 << 1
r6 - 0x99
r5 = r7
r0 = [r0 + 0x48].d
r0 = r0 << 1
[r1 + 0x3e {&data_c9}].w = r4.w  {"ZE6F"}
<return> tailcall(sub_1430c)

int32_t sub_14194(int32_t arg1, int32_t, void* arg3) __noreturn
r3 = [r2 + 0x78].d
r0 = r0 << 1
r2 = sp + 0x16c {arg_16c}
trap(0xe4)
{ Does not return }

int32_t sub_141f6(int32_t arg1)
r0 = r0 << 1
r1 = &data_14370  {"atuYR8STqCiLwytC"}
<return> tailcall(sub_13cbc)

int32_t sub_14214(void* arg1, uint32_t arg2, int32_t arg3, void* arg4, int32_t arg5 @ r4, int32_t arg6 @ r5, char arg7 @ r6, uint32_t arg8 @ r7, int32_t arg9 @ r8, void* arg10)
[r0 + 0x18].b = r0.b
temp1.d = r0
r0 = r0 << 1
flag:z = (temp1.d & 0x7fffffff) == 0
flag:c = test_bit(temp1.d, 0x20 - 1)
if (not(flag:z) && not(flag:c)) then 6 @ 0x141d6 else 12 @ 0x1421a

r0 = r0 << 1
r3 = sx.d([r3 + r2].w)
r7 = zx.d([r1 + 6].b)
[r0 + 9].b = r4.b
r0 = r0 << 1
if (r0 != 0) then 47 @ 0x14258 else 76 @ 0x141e2

r5 = 2
[r4 + 0x1d].b = r0.b
r0 = r0 << 1
r1 = r0 s>> 0x12
r6 = zx.d([r0 + r5].b)
[r4 + 0x1d].b = r0.b
r0 = r0 << 1
syscall_info = 0x5d
syscall
[r6 + 0x74].d = r2
r1 = zx.d([r1 + 1].b)
r0 = r0 << 1
temp0.d = r5
r1 = [temp0.d {2}].d
r2 = [temp0.d + 4 {6}].d
r4 = [temp0.d + 8 {0xa}].d
r5 = [temp0.d + 0xc {&data_b+3}].d
[sp + 0x7c {arg_7c}].d = r0
r1 = zx.d([r1 + 1 {0x4fac004b}].b)
r0 = r0 << 1
lr = r8 | 0x5a80000
r0 = zx.d([r4 + 5 {0x7f57004d}].b)
r0 = r0 << 1
r2 = r2 << 0x19
r1 = [&data_142e0].d
r0 = zx.d([r4 + 5 {0x7f57004d}].b)
r0 = r0 << 1
unimplemented  {ldc2 p7, c7, [r12, #0x138]}
r1 = zx.d([r1 + 0xe {0x66cdbd}].b)
r0 = r0 << 1
r4 = r3 s>> 0xe
r5 + r2
r1 = zx.d([r1 + 0xe].b)
r0 = r0 << 1
goto 47 @ 0x14258

syscall_info = 0x5c
syscall
r6 = &data_145c8
r7 = zx.d([r7 + 0x11].b)
r0 = r0 << 1
r0 = [r2 + r5].d
push(lr)
push(r5)
push(r4)
push(r3)
push(r2)
push(r0)
r7 = zx.d([r7 + 0x11].b)
r0 = r0 << 1
[r7 + 6].w = r5.w
r6 = r1 s>> 0x18
r3 = zx.d([r2 + 0x16].b)
r0 = r0 << 1
r0 = sp + 0x324 {arg_30c}
r4 = 0x69
r3 = zx.d([r2 + 0x16].b)
r0 = r0 << 1
r6 = r1 s>> 4
[r2 + 0x16].b = r0.b
r1 = zx.d([r0 + 0x1d].b)
r0 = r0 << 1
r4 = zx.d([r1 + r2].b)
breakpoint

[r3 + 0x14].w = r3.w
[r0 + 9].b = r4.b
r0 = r0 << 1
r7 = [sp + 0x2b4 {arg10}].d
[r7 + 0x1a].w = r4.w
[r1 + 0xb].b = r6.b
r0 = r0 << 1
r1 = r1 - 0xa5
r0 = zx.d([r1 + r7].b)
[r4 + 0xd].b = r0.b
<return> tailcall(sub_141f6)

int32_t sub_14302(int32_t arg1, void* arg2, int32_t arg3, int32_t arg4, int32_t arg5 @ r4, void* arg6 @ r5, void* arg7 @ r6, int32_t arg8 @ r7)
goto 1 @ sub_14adc

r2 = r1 << 7
[r2 + 0x54].d = r2
r7 = r4 * r7
r4 = [r5 + 0x74].d
[r6 + 0x54].d = r3
[r1 + 0x54].d = r3
r1 = r7 << 1
r7 = r5 << 6
[r1 + 1].b = r7.b
r5 = [r4 + 0x64].d
r4 = [r2 + 4].d
[r6 + 0x54].d = r2
[r4 + 0x44].d = r1
r4 = [r2 + 0x74].d
[r5 + 0x54].d = r3
r6 = r5 << 1
r2 = r7 << 8
[r2 + 0x54].d = r3
[r6 + r5].w = r4.w
[r4 + 9].b = r5.b
r6 = [r6 + 0x14].d
[r4 + 0x54].d = r3
[r2 + 0x11].b = r3.b
[r4 + 0x11].b = r1.b
[r6 + 0xd].b = r5.b
r0 = r0
r2 = r4 << 7
[r2 + 0x54].d = r2
r7 = [&data_14cb4].d
[r6 + 0x54].d = r0
r3 = [&data_14cd4].d
r5 = zx.d([r4 + 5].b)
r1 = r0 << 1
flag:c = test_bit(r0, 0x20 - 1)
r1 = r1 + r8
r6 = adc.d(r6, r2, flag:c)
r1 = [&data_14c64].d
r2 = r2 + 0x33
[r5 + 0x40].d = r6
r4 = [r5 + 0x44].d
r0 = r0
r3 = r2 << 3
[r3 + 0x54].d = r7
r0 = [r7 + 0x14 {0x14}].d
r4 = r6 << 1
r0 = r1 << 1
r7 = [r3 + r1].d
[r4 + 1].b = r3.b
r4 = lr
r1 = [r5 + 0x44].d
[r6 + 0x54].d = r4
r2 = r6 << 1
r1 = r1 << 9
r5 = zx.d([r4 + 1].b)
[r5 + 0x11].b = r1.b
r0 = r0
r7 = r1 << 2
[r3 + 0x14].d = r7
r3 = [r4 + 0x54].d
r4 = [r4 + 0x44].d
r6 = r5 << 1
r0 = r3 << 1
r7 = sx.d([r3 + r5].w)
[r4 + 0x54].d = r7
r4 = [r6 + 0x54].d
r1 = [r4 + 0x14].d
[r5 + 0x14].d = r6
[r6 + 0x74].d = r2
r3 = r6 << 1
r7 = r1 << 4
r7 = [r3 + 0x14].d
r6 = [r5 + 0x14].d
[r6 + 0x11].b = r4.b
[r4 + 9].b = r5.b
r5 = r5 << 1
r3 = r0 << 2
r7 = sx.d([r3 + r5].w)
[r6 + 0x54].d = r3
[r6 + 0x15].b = r4.b
[r6 + 0x54].d = r3
r2 = [r6 + 0x54].d
[r4 + 0x11].b = r1.b
[r5 + 0x54].d = r0
[r6 + 9].b = r2.b
r0 = r0
r5 = r3 << 2
[r3 + 0x14].d = r7
r4 = [r4 + 0x24].d
[r6 + 0xd].b = r5.b
r4 = sx.d([r6 + r5].w)
[r4 + 0x44].d = r6
[r5 + 0x19].b = r1.b
r0 = r0
r2 = r5 << 1
r7 = sx.d([r3 + r5].w)
r0 = sx.d([r6 + r5].w)
[r3 + 0x34].d = r7
r7 = [r5 + 0x54].d
r5 = [r5 + 0x74].d
[r4 + 0x54].d = r4
r0 = r0
r7 = r5 << 1
r7 = sx.d([r3 + r5].w)
r0 = sx.d([r6 + r5].w)
[r3 + 0x64].d = r7
r5 = [r5 + 0x74].d
[r4 + 0x54].d = r4
r0 = r0
r1 = r0 << 2
r7 = sx.d([r3 + r5].w)
[r6 + 0x54].d = r3
r4 = sx.d([r6 + r5].w)
[r4 + 1].b = r1.b
r0 = sx.d([r6 + r5].w)
r4 = zx.d([r6 + 5].b)
[r6 + 0x54].d = r0
r0 = r0
r2 = r1 << 3
[r3 + 0x54].d = r7
[r7 + 0x34].d = r0
[r4 + 1].b = r5.b
r4 = sx.d([r6 + r5].w)
[r5 + 0x14].d = r0
[r5 + 0x44].d = r6
[r5 + 0x54].d = r4
r3 = r3 + 0x72
r0 = r0
[r1 + r5].w = r5.w
r6 = r2 * r6
[r2 + r1].b = r2.b
[r5 + 0x40].d = r6
r4 = [r5 + 0x44].d
r0 = r0
r7 = r6 << 2
[r3 + 0x34].d = r7
r7 = [r5 + 0x64].d
[r6 + 9].b = r4.b
r7 = [r5 + 0x44].d
[r4 + 1].b = r6.b
r0 = r0
r0 = r7
[r0 + 0x54].d = r3
[r6 + 0x11].b = r2.b
[r0 + 9].b = r6.b
[r4 + 0x54].d = r5
[r0 + r1].w = r3.w
r4 = r1 * r4
r7 = [r5 + 0x64].d
[r6 + 0x54].d = r4
[r7 + 0x11].b = r0.b
r0 = r0
[r0 + r1].w = r3.w
[r3 + r1].d = r1
r3 = r3 + 0x54
r6 - 0x32
r4 = [r4 + 0x44].d
r4 = r5 << 1
r4 = r5 << 6
[r0 + 0x54].d = r7
[r6 + r5].w = r4.w
[r6 + 0x14].d = r4
[r6 + 0x11].b = r2.b
[r6 + 1].b = r5.b
r1 = [r1 + 0x64].d
r6 = [r4 + 0x74].d
r1 = r0 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
[r3].w = r0.w
r1 = r0 << 1
[r2 + 2].w = r4.w
r1 = r0 << 1
[r3 + 2].w = r0.w
r1 = r0 << 1
[r3 + 2].w = r4.w
r1 = r0 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r4 = r0
r3 = r0
r0 = r0
r0 = r6
[r0].w = r0.w
r2 = r1
r0 = r0
r0 = r0 << 3
[r0].w = r0.w
r6 = r1
r0 = r0
r0 = r6 << 0xc
[r0].w = r0.w
r0 = r3
r0 = r0
r0 = r4 << 0xd
[r0].w = r0.w
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r4 = r0
r1 = r0
r0 = r0
r0 = r4 << 1
[r0].w = r0.w
r2 = r0
r0 = r0
r0 = r7 << 1
[r0].w = r0.w
r3 = r0
r0 = r0
r0 = r2 << 2
[r0].w = r0.w
r4 = r0
r0 = r0
r0 = r5 << 2
[r0].w = r0.w
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r2 << 0xe
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r4 << 0xe
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r6 << 0xe
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r0 << 0xf
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r3 = r2
r7 = r5 << 7
r0 = r0
r0 = r5 << 5
[r0].w = r0.w
r5 = r3 u>> 0x12
r0 = r0
r0 = r0 << 6
[r0].w = r0.w
r3 = r6 << 7
r0 = r0
r0 = r3 << 6
[r0].w = r0.w
r7 = r1 << 1
r0 = r0
r0 = r6 << 6
[r0].w = r0.w
r5 = r7 u>> 0x11
r0 = r0
r0 = r1 << 7
[r0].w = r0.w
r7 = r0 << 0xa
r0 = r0
r0 = r4 << 7
[r0].w = r0.w
r1 = r5 << 5
r0 = r0
r0 = r7 << 7
[r0].w = r0.w
r3 = r7 u>> 3
r0 = r0
r0 = r2 << 8
[r0].w = r0.w
r3 = r4 << 0x18
r0 = r0
r0 = r5 << 8
[r0].w = r0.w
r4 = r0 << 0x14
r0 = r0
r0 = r0 << 9
[r0].w = r0.w
r1 = r7 << 3
r0 = r0
r0 = r3 << 9
[r0].w = r0.w
r4 = 0xd9
r0 = r0
r0 = r6 << 9
[r0].w = r0.w
r7 = r2 << 0xd
r0 = r0
r0 = r1 << 0xa
[r0].w = r0.w
r3 = r1 + 3
r0 = r0
r0 = r4 << 0xa
[r0 {0x36400}].w = r0.w
r0 = r5 << 0x1e
r0 = r0
r0 = r7 << 0xa
[r0].w = r0.w
r4 = r1 + r1
r0 = r0
r0 = r2 << 0xb
[r0].w = r0.w
r2 = r2 s>> 0x1d
r0 = r0
r0 = r5 << 0xb
[r0].w = r0.w
r3 = r0 << 8
r0 = r0
r0 = r0 << 0xc
[r0].w = r0.w
r4 = r6 - r5
flag:v = add_overflow(r6, neg.d(r5))
r0 = r0
r0 = r3 << 0xc
[r0].w = r0.w
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r2 << 0xf
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r4 << 0xf
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r6 << 0xf
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r0 << 0x10
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r2 << 0x10
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r4 << 0x10
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r6 << 0x10
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r0 << 0x11
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r2 << 0x11
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r4 << 0x11
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r6 << 0x11
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r0 << 0x12
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r2 << 0x12
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r4 << 0x12
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r6 << 0x12
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r0 << 0x13
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r2 << 0x13
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r4 << 0x13
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r6 << 0x13
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r0 = r0 << 2
r0 = r0
r0 = r1 << 0xd
[r0].w = r0.w
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r0 << 0x14
r0 = r0
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r0
r0 = r0
r0 = r7 << 0xd
[r0].w = r0.w
r0 = r0
r0 = r0
r0 = [r1 + 8].d
[r7 + r3].w = r3.w
r0 = r0
r0 = r0
r0 = r0
r1 = r0
r1 = r3 << 0x10
r0 = r0
r0 = r2 << 0x14
r0 = r0
r5 = &data_17ce4
r1 = r0
r5 = 0xa8
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
temp0.d = r2
r3 = [temp0.d].d
r6 = [temp0.d + 4].d
r7 = [temp0.d + 8].d
r2 = r2 + 0xc
r1 = r0
r0 = r5 s>> 2
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
flag:n = r0 s< 0
if (flag:n != flag:v) then 6363 @ 0x17d64 else 6391 @ 0x17c82

r2 = r1 << 2
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
unimplemented  {stcl p0, c0, [r0, #4]!}
r7 = r6 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
unimplemented  {cdp p0, #5, c0, c8, c1, #0}
r0 = r6 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
unimplemented  {cdp p0, #0xc, c0, c8, c1, #0}
r7 = r5 << 1
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
undefined

r1 = r0
r0 = r1 u>> 6
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
jump(&data_17684)

int32_t sub_1430e(int32_t arg1, int32_t arg2, char arg3, int32_t arg4, int32_t* arg5 @ r4, int32_t arg6 @ r8)
temp0.d = r4
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r5 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r7 = [temp0.d + 0x10].d
r4 = r4 + 0x14
goto 8 @ sub_148d4

[r0 + 0x15].b = r2.b
[r6 + 0x11].b = r4.b
r7 = [r5 + 0x64].d
r0 = r0
r6 = r3 << 7
[r1 + 0x54].d = r5
[r6 + 0xd].b = r3.b
[r4 + 0x74].d = r1
r5 = 0 - r4
r7 = zx.d([r5 + 1].b)
r1 = r0 << 1
r1 = r3 << 2
[r0 + 0x54].d = r4
[r6 + 0x11].b = r3.b
r2 = [r6 + 0x74].d
r5 = [&data_14ad8].d
r5 = [r4 + 0x64].d
r5 = r6 << 1
[r2 + r5].w = r5.w
[r0 + r1].w = r5.w
r2 = r2 + 0x33
[r5 + 0x40].d = r6
r4 = [r5 + 0x44].d
r0 = r0
r7 = r0 << 1
[r0 + 9].b = r3.b
[r4 + 0x14].d = r5
[r6 + 0x54].d = r4
[r2 + 0x54].d = r0
r6 = r5 << 1
r1 = r1 << 9
[r2 + 0x11].b = r3.b
[r6 + 0x54].d = r2
[r6 + 0x34].d = r4
r0 = 0 - r5
[r5 + 0x11].b = r4.b
r0 = r0
r1 = r2 << 3
r5 = [r0 + 0x64].d
r5 = [r6 + 0x54].d
[r1 + 0x54].d = r5
[r6 + 0x14].d = r4
r6 = [r0 + 0x14].d
[r5 + 0x54].d = r4
r0 = r0
r6 = r1 << 8
[r2 + 0x54].d = r3
[r5 + 0x54].d = r4
[r4 + 0x11].b = r3.b
[r1 + 0x24].d = r7
[r5 + 0x54].d = r2
[r4 + 0x11].b = r3.b
r0 = r0
r0 = r2 << 9
[r2 + 9].b = r4.b
r1 = [r4 + 0x64].d
r3 = [r6 + 0x44].d
[r4 + 0x11].b = r1.b
r5 = r4 * r5
[r5 + 0x14].d = r0
[r6 + 0xd].b = r2.b
[r4 + 0x11].b = r5.b
r1 = [r1 + 0x64].d
r6 = [r4 + 0x74].d
r0 = r0
r7 = r5
[r0 + 9].b = r3.b
[r4 + 0x14].d = r5
[r6 + 0x54].d = r4
r4 = r0 * r4
r7 = r2 << 1
r4 = r2 << 7
[r1 + 0x64].d = r7
[r4 + 0xd].b = r6.b
[r4 + 0x11].b = r5.b
[r2 + 0x74].d = r2
r6 = r5 << 1
r0 = r7 << 6
[r0 + 0x54].d = r7
[r6 + r1].b = r4.b
r5 = zx.d([r4 + 1].b)
r4 - lr
[r7 + 0x11].b = r0.b
r5 = [r4 + 0x64].d
[r6 + r1].d = r4
r7 = [r5 + 0x14].d
[r5 + 0x11].b = r6.b
r7 = r2 << 1
r4 = r6 << 6
[r0 + 0x54].d = r7
[r6 + r1].b = r4.b
r5 = zx.d([r4 + 1].b)
r4 - lr
[r7 + 0x11].b = r0.b
r5 = [r4 + 0x64].d
[r6 + r1].d = r4
r7 = [r5 + 0x14].d
[r5 + 0x11].b = r6.b
r2 = r2 + 0x33
r1 = r0 << 1
r7 = r7 + r8
r3 = r3 + 0x49
r6 - 0x32
r4 = [r4 + 0x44].d
r4 = r5 << 1
r6 = r0 << 2
flag:c = test_bit(r0, 0x20 - 2)
[r0 + 9].b = r3.b
[r7 + 1].b = r1.b
r4 = adc.d(r4, r6, flag:c)
[r4 + 5].b = r3.b
r5 = [r6 + 0x14].d
[r6 + 0x54].d = r2
r3 = [r0 + 0x74].d
[r5 + 0x11].b = r6.b
r5 = zx.d([r4 + 1].b)
r4 = sx.d([r6 + r5].b)
r0 = r0
r4 = r0 << 7
[r2 + 0x15].b = r1.b
[r4 + 9].b = r5.b
[r7 + r1].b = r1.b
[r6 + 0x14].d = r2
[r4 + 0x54].d = r3
r7 = r2 << 1
r6 = r4 << 1
[r0 + 9].b = r3.b
[r4 + 0x14].d = r5
[r6 + 0x54].d = r4
[r2 + 9].b = r4.b
[r4 + 0x34].d = r1
r1 = [&data_14b70].d
[r5 + 0xd].b = r6.b
[r6 + 0x14].d = r4
[r5 + 0x34].d = r6
r1 = [&data_14b78].d  {"sermatherr"}
r4 = r4 << 1
r6 = r6 << 6
[r2 + 9].b = r0.b
[r5 + 0x34].d = r7
[r4 + 0xd].b = r5.b
[r6 + r1].b = r3.b
[r6 + 0x14].d = r2
[r4 + 0x54].d = r3
r0 = r0
r0 = r1 << 4
[r0 + 0x54 {0xd7265784}].d = r7
[r6 + r5].w = r4.w
[r4 + 0x34].d = r5
[r6 + 9].b = r5.b
[r5 + 0x11].b = r1.b
r1 = r1 + &data_14a04  {"criptorDacl"}
[r4 + 0xd].b = r5.b
[r4 + 9].b = r3.b
[r5 + 1].b = r1.b
r4 = [r6 + 0x74].d
r2 = r2 + lr
[r4 + 0x34].d = r1
r4 = r5 << 1
r1 = r1 << 2
[r0 + 9 {0xd7265739}].b = r3.b
[r7 + 1].b = r1.b
r4 = r4 + lr
[r4 + 0x34].d = r5
r2 = zx.d([r6 + 5].b)
[r6 + 0x11].b = r0.b
r0 = r0
r5 = r2 << 2
[r0 + 9 {0xd7265739}].b = r3.b
[r7 + 1].b = r1.b
<return> jump(lr)

int32_t sub_1433a(void* arg1, int32_t arg2, int32_t arg3, void* arg4, int32_t arg5 @ r4, int32_t* arg6 @ r5, void* arg7 @ r6, void* arg8 @ r7, int32_t arg9 @ r9, void* arg10 @ r12)
goto 1 @ 0x144d6

r1 = r0
[r6 + 0x78].d = r0
r1 = r0
[r1 + 0x7c].d = r0
r1 = r0
[r3 + 0x7c].d = r0
r1 = r0
[r5 + 0x7c].d = r0
r1 = r0
[r7 + 0x7c].d = r4
r1 = r0
r4 = [r1].d
r1 = r0
r2 = [r3].d
r1 = r0
r4 = [r5].d
r1 = r0
r0 = [r0 + 4].d
r1 = r0
r0 = r0
r0 = r0
r2 = [r4 + 0x10].d
r1 = r0
r0 = r0
r0 = r0
[r1 + 0x64].d = r6
r1 = r0
[r6 + 0x68].d = r4
r1 = r0
[r3 + 0x68].d = r6
r1 = r0
[r2 + 0x68].d = r2
r1 = r0
[r0 + 0x68].d = r6
r1 = r0
[r5 + 0x64].d = r6
r1 = r0
[r3 + 0x64].d = r6
r1 = r0
[r0 + 0x64].d = r0
r1 = r0
[r6 + 0x60].d = r4
r1 = r0
r0 = r0
r0 = r0
[r3 + 0x48].d = r4
r1 = r0
[r1 + 0x48].d = r6
r1 = r0
[r6 + 0x44].d = r6
r1 = r0
[r5 + 0x44].d = r0
r1 = r0
[r3 + 0x44].d = r0
r1 = r0
[r1 + 0x44].d = r4
r1 = r0
[r4 + 0x40].d = r4
r1 = r0
[r2 + 0x40].d = r6
r1 = r0
[r1 + 0x40].d = r2
r1 = r0
[r7 + 0x3c].d = r6  {"\x1bEZE6F"}
r1 = r0
[r6 + 0x3c].d = r0  {"\x1bEZE6F"}
r1 = r0
[r4 + 0x3c].d = r2  {"\x1bEZE6F"}
r1 = r0
[r7 + 0x50].d = r6
r1 = r0
[r6 + 0x50].d = r0
r1 = r0
[r2 + 0x34].d = r4
r1 = r0
[r2 + 0x50].d = r2
r1 = r0
[r1 + 0x50].d = r0
r1 = r0
[r6 + 0x4c].d = r4
r1 = r0
[r3 + 0x4c].d = r6
r1 = r0
[r1 + 0x4c].d = r0
r1 = r0
[r7 + 0x48].d = r0
r1 = r0
[r7 + 0x40].d = r4
r1 = r0
[r2 + 0x3c].d = r4  {"\x1bEZE6F"}
r1 = r0
[r0 + 0x3c].d = r2  {"\x1bEZE6F"}
r1 = r0
[r6 + 0x38].d = r0
r1 = r0
[r4 + 0x38].d = r2
r1 = r0
[r2 + 0x38].d = r4
r1 = r0
[r0 + 0x38].d = r4
r1 = r0
[r6 + 0x34].d = r6
r1 = r0
[r5 + 0x34].d = r2
r1 = r0
[r3 + 0x34].d = r4
r1 = r0
[r5 + 0x48].d = r4
r1 = r0
r4 = [r0 + 0x14].d
r1 = r0
r0 = r0
r0 = r0
r4 = [r2 + 0x10].d
r1 = r0
r4 = [r6 + 0xc].d
r1 = r0
r2 = [r4 + 0xc].d
r1 = r0
r4 = [r2 + 0xc].d
r1 = r0
r4 = [r0 + 0xc].d
r1 = r0
r4 = [r6 + 8].d
r1 = r0
r0 = [r4 + 8].d
r1 = r0
r4 = [r3 + 4].d
r1 = r0
r4 = [r4 + 4].d
r1 = r0
r2 = [r6 + 4].d
r1 = r0
r2 = [r7 + 4].d
r1 = r0
r4 = [r0 + 8].d
r1 = r0
r4 = [r2 + 8].d
r1 = r0
r0 = r0
r0 = r0
[r1 + 0x58].d = r2
r1 = r0
[r3 + 0x58].d = r4
r1 = r0
[r5 + 0x58].d = r6
r1 = r0
[r0 + 0x5c].d = r0
r1 = r0
[r2 + 0x5c].d = r0
r1 = r0
[r3 + 0x5c].d = r6
r1 = r0
[r5 + 0x5c].d = r2
r1 = r0
[r7 + 0x5c].d = r2
r1 = r0
[r1 + 0x60].d = r4
r1 = r0
[r3 + 0x60].d = r2
r1 = r0
[r6 + 0x54].d = r4
r1 = r0
[r4 + 0x54].d = r0
r1 = r0
r0 = r0
r0 = r0
r6 = r7 << 0xc
r3 = [r2 + 0x44].d
[r4 + 0x54].d = r5
r0 = r6 << 1
r6 = r6 << 2
r5 = zx.d([r0 + 1].b)
[r5 + 0x11].b = r1.b
[r2 + 9].b = r0.b
[r5 + 0x34].d = r7
[r4 + 0xd].b = r5.b
r3 = r6 << 1
r7 = r4
[r0 + 0x14].d = r3
[r5 + 0x34].d = r6
r5 = [r4 + 0x44].d
r1 = [r1 + 0x74].d
r0 = r0
r4 = r7 << 0xa
[r2 + 0x54].d = r2
[r6 + 0x54].d = r3
r4 - lr
[r6 + 0x54].d = r6
[r5 + 0x11].b = r6.b
r0 = r0
r6 = r0 << 9
r4 = [r1 + 0x74].d
[r4 + 0x44].d = r1
[r2 + 0x54].d = r2
r3 = [r6 + 0x74].d
[r6 + 9].b = r5.b
[r4 + 0x54].d = r3
r0 = r0
r6 = r1 << 0xd
r4 = [r2 + 0x44].d
[r6 + r5].w = r3.w
[r4 + 0x11].b = r5.b
[r2 + 0x14].d = r6
[r5 + 0x15].b = r4.b
r5 = r4 << 1
r1 = r6
r3 = [r0 + 0x44].d
[r5 + 0xd].b = r7.b
r0 = [&data_14810].d  {"GetModuleHandleA"}
r1 = [r4 + 0x64].d
r4 = [r4 + 0x44].d
r5 = r4 << 1
r2 = r3 << 6
[r0 + 0x54 {0x4d74659b}].d = r7
[r6 + r1].d = r4
r2 = [r6 + 0x74].d
[r4 + 0x54].d = r3
[r6 + 0xd].b = r3.b
[r1 + 0x54].d = r0
[r4 + 1].b = r1.b
r0 = r0
r2 = r3 << 0xd
r5 = [r2 + 0x64].d
[r5 + 0x14].d = r5
r0 = sx.d([r6 + r1].b)
[r5 + 0x54].d = r1
r7 = [&data_1487c].d
r6 = r12
r1 = [r5 + 0x44].d
r5 = r4 << 1
r6 = r0 << 8
[r1 + 0x54].d = r0
[r4 + 1].b = r1.b
[r0 + 0x54].d = r4
[r6 + 0x11].b = r3.b
r2 = [r6 + 0x74].d
r1 = r7 << 1
r7 = r0 << 9
flag:c = test_bit(r0, 0x20 - 9)
r4 = [r1 + 0x74 {0x5040074}].d
[r4 + 0x14].d = r3
r4 = adc.d(r4, r5, flag:c)
r4 = [r5 + 0x44].d
[r5 + 0x34].d = r7
r0 = r0
r2 = r2 << 1
[r0 + 9].b = r3.b
[r4 + 0x14].d = r5
[r6 + 0x54].d = r4
r6 = [r0 + 0x14].d
[r5 + 0x54].d = r4
r7 = r2 << 1
r0 = r1 << 8
[r1 + 0x54 {0x5040054}].d = r0
[r4 + 1].b = r1.b
[r0 + 9 {0x4000009}].b = r6.b
[r4 + 0x54].d = r5
r0 = r0
r2 = r1 << 6
[r0 + 0x54 {0x4000054}].d = r7
r7 = [&data_148b0].d  {"IsWindow"}
r5 = [&data_147f8].d  {"change"}
[r0 + r1 {0x9040000}].d = r3
r0 = r0
r2 = r0 << 2
[r0 + 0x54 {0x4000054}].d = r4
[r5 + 0x54 {0x6e6168b7}].d = r4
[r6 + 0x54].d = r4
r6 = [r0 + 0x14 {0x4000014}].d
[r5 + 0x54 {0x6e6168b7}].d = r4
r7 = r2 << 1
r5 = r1 << 5
[r0 + 0x54 {0x4000054}].d = r7
r4 - lr
[r5 + 0x19 {0xa0800019}].b = r6.b
[r5 + 9 {0xa0800009}].b = r1.b
r7 = [r5 + 0x64 {0xa0800064}].d
[r5 + 0x54 {0xa0800054}].d = r5
[r5 + 0x11 {0xa0800011}].b = r6.b
[r2 + 0x11 {0x10000011}].b = r3.b
r2 = [r6 + 0x14].d
[r5 + 0x74 {0xa0800074}].d = r6
r3 = r6 << 1
r1 = r0 << 9
flag:c = test_bit(r0, 0x20 - 9)
r4 = [r1 + 0x74 {&data_73+1}].d
[r4 + 0x44 {&data_5019}].d = r1
r4 = [r1 + 0x14 {0x14}].d
[r4 + 9 {0x4d5177f2}].b = r2.b
[r4 + 9 {0x4d5177f2}].b = r1.b
r1 = adc.d(r1, r7, flag:c)
r0 = r0
r3 = r1 << 0xe
[r2 + 9].b = r7.b
[r5 + 0x11 {0xa0800011}].b = r1.b
r5 = r12
r1 = [r5 + 0x44].d
r5 = r4 << 1
r3 = r3 << 7
[r0 + 0x54 {0x4000054}].d = r7
r4 = sx.d([r6 + r1].b)
[r4 + 9].b = r5.b
r3 = [r6 + 0x14].d
r7 = [r5 + 0x64 {0x9aa2f036}].d
r5 = zx.d([r0 + 1 {0x4000001}].b)
r1 = r0 << 1
r5 = r5 << 0xd
r6 = [r2 + 0x14].d
[r6 + 0x11].b = r2.b
[r6 + 0x14].d = r5
r4 = sp {arg_0}
[r6 + 0x54].d = r2
r5 = r4 << 1
r0 = r0 << 9
[r1 + 0x54 {0x8000054}].d = r4 {arg_0}
[r4 + 0x19 {arg_19}].b = r1.b
r5 = r4 * r5
r2 = [r6 + 0x14].d
r4 = [r6 + 0x14].d
[r4 + 0x14].d = r3
[r5 + r5].w = r4.w
[r4 + 0x34].d = r5
r4 = [r6 + 0x14].d
r7 = [r5 + 0x64].d
r0 = r0
r4 = r1 << 8
[r1 + 0x54 {0x8000054}].d = r0
[r4 + 1 {&data_0+1}].b = r1.b
[r2 + 0x54].d = r2
r1 = [r0 + 0x44 {&data_44}].d
r4 = [r5 + 0x74].d
r3 = r4 << 1
r3 = r2 << 0xc
[r2 + 0x54].d = r3
r4 = [&data_14944].d  {"slateCharsetInfo"}
[r4 + 0xd {0x74616c80}].b = r1.b
r4 - lr
[r6 + 9].b = r2.b
[r5 + 9].b = r7.b
r0 = r0
r4 = r0 << 0xb
[r2 + 0x11].b = r2.b
[r5 + r5].b = r4.b
[r5 + 0x1d].b = r6.b
r1 = [r5 + 0x64].d
r4 = r4 << 1
r2 = r5 << 5
[r0 + 0x54 {&data_54}].d = r7
r4 = [&data_14960].d
[r5 + 0x34].d = r7
r1 = [r4 + 0x44 {0x1d4009b}].d
r4 = [r2 + 0x14].d
[r5 + 0x54].d = r5
r0 = r0
r2 = r3 << 8
r1 = [r1 + 0x64].d
[r6 + 0x54].d = r4
r2 = [r6 + 0x44].d
[r5 + 0x34].d = r7
[r5 + 0x54].d = r3
r4 - r12
[r7 + 0x34].d = r0
[r5 + 0x14].d = r0
[r5 + 0x74].d = r6
r5 = r4 << 1
r6 = r7 << 0xd
r7 = [r2 + 0x14].d
[r4 + 0x54].d = r4
r3 = [r0 + 4 {&data_4}].d
[r4 + 9].b = r1.b
r4 = [r2 + 0x74].d
[r1 + 0x15].b = r5.b
[r5 + 0x11].b = r4.b
r1 = 0 - r5
[r7 + 0x11].b = r1.b
r5 = r4 << 1
r5 = r7 << 4
[r0 + 0x54 {&data_54}].d = r7
r4 = r6 * r4
[r6 + 9].b = r5.b
[r6 + 0x54].d = r2
[r5 + 0x11].b = r6.b
r4 = [r2 + 4].d
[r6 + 0x54].d = r2
[r4 + 0x44].d = r1
r0 = r0
temp0.d = r6
r6 = r6 << 3
flag:c = test_bit(temp0.d, 0x20 - 3)
[r0 + 0x54 {&data_54}].d = r7
r4 = adc.d(r4, r6, flag:c)
[r0 + r1].d = r3
r0 = r0
r0 = r3 << 8
r1 = [r1 + 0x64].d
[r6 + 0x54].d = r4
r2 = [r6 + 0x44].d
[r5 + 0x34].d = r7
[r5 + 0x54].d = r3
r4 = r4 * r4
r7 = [r5 + 0x54].d
[r6 + 0x14].d = r0
[r6 + 0x54].d = r2
r5 = zx.d([r0 + 1 {0x4fac01}].b)
r3 = [r4 + 4].d
r1 = [r4 + 0x64].d
[r4 + 0x54].d = r7
r0 = r0
r2 = r5 << 7
r7 = [r0 + 0x44 {0x4fac44}].d
[r5 + 0x24].d = r7
r1 = [r4 + 0x44].d
r1 = [r0 + 0x44 {0x4fac44}].d
r4 = [r5 + 0x74].d
r3 = r4 << 1
r5 = r6 << 5
flag:c = test_bit(r6, 0x20 - 5)
[r0 + 0x54 {0x4fac54}].d = r7
r5 = [&data_149e4].d
[r5 + 0x44 {0x725001fa}].d = r7
r5 = [r6 + 0x44].d
r0 = [&data_149b0].d  {"uireContextW"}
r1 = [r4 + 0x64].d
r4 = [r4 + 0x44].d
r5 = adc.d(r5, r4, flag:c)
r0 = r0
r3 - r9
r6 = [&data_14970].d  {"GetTextExtentPointW"}
r4 = [&data_1493c].d
r2 = r2 + 0x33
[r5 + 0x40].d = r6
r4 = [r5 + 0x44].d
r0 = r0
r5 = r6 << 0xa
flag:c = test_bit(r6, 0x20 - 0xa)
r5 = [r2 + 0x64].d
[r6 + 0x54 {0x5474659b}].d = r2
r7 = [r4 + 0x14].d
[r6 + 0x11 {0x54746558}].b = r3.b
[r4 + 9].b = r5.b
r3 = [r0 + 0x44 {0x657269b9}].d
[r4 + 0xd].b = r1.b
r3 = adc.d(r3, r6, flag:c)
r0 = r0
r1 = r3 << 9
[r2 + 0x54].d = r3
r4 = lr
[r5 + 9].b = r7.b
[r4 + 0x74].d = r5
r2 = [r6 + 0x74 {0x547465bb}].d
r5 = [r6 + 0x64 {0x547465ab}].d
r4 = sx.d([r4 + r5].b)
r1 = [r5 + 0x64].d
r4 = [r4 + 0x74].d
r7 = r6 << 1
r1 = r4 << 2
r4 = [r0 + 0x14 {0x65726989}].d
r1 = [r4 + 0x44].d
[r5 + 0x74].d = r7
r2 = [r0 + 0x74 {0x657269e9}].d
[r7 + r1].d = r0
[r4 + 9].b = r1.b
r1 = [r4 + 0x54].d
r7 = r2 << 1
r4 = r7 << 5
[r0 + 0x54 {0x657269c9}].d = r7
r4 = sx.d([r6 + r5].b)
r1 = [r5 + 0x64].d
r4 = [r4 + 0x74].d
[r6 + r1].b = r7.b
r5 = zx.d([r4 + 1].b)
r4 = sx.d([r6 + r5].b)
r0 = r0
r2 = r0 << 0xa
flag:c = test_bit(r0, 0x20 - 0xa)
[r2 + 0x54 {0xc9a5d454}].d = r3
r4 = sx.d([r6 + r5].b)
r1 = [r5 + 0x64].d
r4 = [r4 + 0x74].d
r4 = [&data_14a68].d  {"ateKeyA"}
r7 = [r5 + 0x64].d
r7 = adc.d(r7, r4, flag:c)
r0 = r0
r2 = r2 << 4
[r0 + 0x54 {0x657269c9}].d = r7
r4 = r4 + lr
[r5 + 0x74].d = r4
[r0 + 0x11 {0x65726986}].b = r3.b
r2 = [r6 + 0x44 {0x5474658b}].d
r1 = r1 + r9
r0 = r0
r3 = r3 << 5
[r0 + 0x54 {0x657269c9}].d = r7
[r6 + r5].w = r4.w
[r6 + 0x24 {0x5474656b}].d = r5
[r1 + 0x54].d = r5
[r5 + 0x15].b = r6.b
r0 = r0
r5 = r5 << 6
[r1 + 0xd].b = r1.b
r7 = [r2 + 0x14].d
[r5 + 0x44].d = r6
[r5 + 0x1d].b = r7.b
r0 = r0
r0 = r0 << 8
[r2 + 0x54].d = r0
r5 = [r4 + 0x34].d
[r1 + 0x54].d = r5
[r6 + 0xd {0x54746554}].b = r3.b
[r4 + 0x74].d = r1
r5 = sx.d([r4 + r5].b)
r0 = r0
r0 = r7
r3 = [r0 + 4].d
[r4 + 0x34].d = r5
r3 = sp + r3
[r5 + 0x74].d = r4
<return> tailcall(sub_148d4)

int32_t sub_17de4(int32_t arg1 @ r4, int32_t arg2 @ r6)
r2 = r6 << 9
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r5
r0 = r0
r0 = r6
r0 = r0
r0 = r4 << 1
r0 = r0
r1 = r0
r0 = r4
r0 = r0
r0 = r0
r5 = 0x80
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0 << 0x14
r0 = r0
r0 = r0 u>> 0x1c
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0xc
r0 = r0
r0 = r0 s>> 0x10
r0 = r0
r0 = r0 u>> 0x20
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r3 = r1 u>> 0xc
r7 - 0xb
r5 = r1 u>> 0x14
r5 = zx.d([r1 + r4].b)
r5 = r1 u>> 0x14
[r1 + 0x60].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x40].d = r5
r5 = r1 u>> 0x14
[r1 + 0x60].d = r5
r6 = r1 u>> 0x18
[r1 + 0x60].d = r6
r5 = r0 << 0x14
[r0 + r4].b = r5.b
r0 = r0
r4 = 0
r0 = r0
r0 = r0 << 4
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
temp0.d = r3
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r6 = [temp0.d + 0xc].d
r7 = [temp0.d + 0x10].d
undefined

int32_t sub_1802a()
undefined

int32_t sub_180ee()
undefined

int32_t j_sub_17de4(int32_t arg1 @ r4, int32_t arg2 @ r6)
<return> tailcall(sub_17de4)

int32_t j_sub_1802a()
<return> tailcall(sub_1802a)

int32_t j_sub_180ee()
<return> tailcall(sub_180ee)

int32_t sub_18a84()
jump(&data_18652)

int32_t sub_18aa0(void* arg1, void* arg2)
call(sub_fa94)
call(sub_fa98)
call(0xfff0fa9a)
call(0xffe0da9e)
undefined

int32_t j_sub_18aa0(void* arg1, void* arg2)
<return> tailcall(sub_18aa0)

int32_t sub_18f10()
r1 = &data_19310
undefined

int32_t sub_196ea()
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
if (flag:c) then 8 @ 0x196a2 else 9 @ 0x196fa

undefined

undefined

int32_t sub_19818(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6) __pure
r0 = pop
r2 = pop
r3 = pop
r4 = pop
r5 = pop
r7 = pop
<return> jump(pop)

int32_t sub_19a58(void* arg1, int32_t arg2 @ r7)
goto 1 @ sub_1a222

r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r7 = r7
r0 = r0
r7 = r7 << 3
r0 = r0
r0 = zx.d([r0 + 0x1c].b)
r0 = r0
r7 = r7 << 3
r0 = r0
r0 = zx.d([r0 + 0x1c].b)
r0 = r0
r7 = r7 << 3
r0 = r0
r0 = zx.d([r0 + 0x1c].b)
r0 = r0
r7 = r7 << 3
r0 = r0
r0 = zx.d([r0 + 0x1c].b)
r0 = r0
r7 = r7 << 3
r0 = r0
unimplemented  {vhadd.U8 d0, d0, d0}
r7 = r7 << 3
r0 = r0
unimplemented  {vhadd.U8 d0, d1, d0}
r7 = r7 << 3
r0 = r0
unimplemented  {vhadd.U8 d0, d1, d0}
r7 = r7 << 3
r0 = r0
unimplemented  {vhadd.U8 d0, d7, d0}
r7 = r7 << 3
r0 = r0
unimplemented  {vhadd.U8 d0, d15, d0}
r7 = r7 << 3
r0 = r0
unimplemented  {vhadd.U16 d0, d15, d0}
r7 = r7 << 3
r0 = r0
unimplemented  {vhadd.U32 d0, d15, d0}
r7 = r7 << 3
r0 = r0
undefined

int32_t j_sub_196ea()
<return> tailcall(sub_196ea)

int32_t sub_1a3d2(int32_t arg1, int32_t arg2, int32_t arg3, int32_t* arg4 @ r5, void* arg5 @ r6, int32_t arg6 @ r7, int32_t arg7)
r0 = r0
r0 = r0
r0 = r0 u>> 0x1c
r0 = r0
r5
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r3
r0 = r0
r4
r0 = r0
r7
r0 = r0
r3
r0 = r0
r0 = r0 s>> 4
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r4 = zx.d([r7 + 0x11].b)
r4 = sp + 0x1f0 {arg_1f0}
[sp + 0x254 {arg_254}].d = r5
temp0.d = r0
[temp0.d].d = r0
[temp0.d + 4].d = r2
[temp0.d + 8].d = r4 {arg_1f0}
[temp0.d + 0xc].d = r7
r4 = [sp + 0x26c {arg_26c}].d
temp0.d = r7
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r3 = [sp + 0x26c {arg_26c}].d
temp0.d = r6
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r4 = [temp0.d + 0xc].d
r7 = [temp0.d + 0x10].d
r6 = r6 + 0x14
r3 = [sp + 0x26c {arg_26c}].d
temp0.d = r6
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r4 = [temp0.d + 0xc].d
r7 = [temp0.d + 0x10].d
r6 = r6 + 0x14
r2 = [sp + 0x26c {arg_26c}].d
temp0.d = r6
r1 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r6 = r6 + 0x10
r3 = [sp + 0x26c {arg_26c}].d
temp0.d = r6
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r4 = [temp0.d + 0xc].d
r7 = [temp0.d + 0x10].d
r6 = r6 + 0x14
r3 = [sp + 0x268 {arg7}].d
temp0.d = r6
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r4 = [temp0.d + 0xc].d
r7 = [temp0.d + 0x10].d
r6 = r6 + 0x14
r3 = [sp + 0x268 {arg7}].d
temp0.d = r6
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r4 = [temp0.d + 0xc].d
r7 = [temp0.d + 0x10].d
r6 = r6 + 0x14
r3 = [sp + 0x268 {arg7}].d
temp0.d = r6
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r4 = [temp0.d + 0xc].d
r7 = [temp0.d + 0x10].d
r6 = r6 + 0x14
r3 = [sp + 0x268 {arg7}].d
temp0.d = r6
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r3 = [temp0.d + 8].d
r4 = [temp0.d + 0xc].d
r7 = [temp0.d + 0x10].d
r6 = r6 + 0x14
r2 = [sp + 0x268 {arg7}].d
goto 142 @ 0x1a47e

temp0.d = r6
r1 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r6 = r6 + 0x10
r2 = [sp + 0x264 {arg_264}].d
temp0.d = r6
r1 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r6 = r6 + 0x10
r2 = [sp + 0x264 {arg_264}].d
temp0.d = r6
r1 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r6 = r6 + 0x10
r2 = [sp + 0x264 {arg_264}].d
temp0.d = r6
r1 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r6 = r6 + 0x10
r2 = [sp + 0x264 {arg_264}].d
temp0.d = r6
r1 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r6 = r6 + 0x10
r2 = [sp + 0x264 {arg_264}].d
temp0.d = r6
r1 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r6 = r6 + 0x10
r2 = [sp + 0x264 {arg_264}].d
temp0.d = r6
r1 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r6 = r6 + 0x10
r1 = [sp + 0x264 {arg_264}].d
temp0.d = r6
r0 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r6 = r6 + 0x10
r1 = [sp + 0x264 {arg_264}].d
temp0.d = r6
r0 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r6 = r6 + 0x10
r4 = [sp + 0x270 {arg_270}].d
temp0.d = r7
r2 = [temp0.d].d
r3 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
[sp + 0x24c {arg_24c}].d = r3
temp0.d = r5
r0 = [temp0.d].d
r1 = [temp0.d + 4].d
r4 = [temp0.d + 8].d
r7 = [temp0.d + 0xc].d
r5 = r5 + 0x10
r0 = r0
r4 = [&data_1a4ac].d
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
if (r0 s>= 0) then 142 @ 0x1a47e else 238 @ 0x1a4d2

undefined

int32_t sub_1a534(int32_t arg1)
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
if (r0 s>= 0) then 15 @ 0x1a4fe else 16 @ 0x1a552

undefined

undefined

int32_t j_sub_1a534(int32_t arg1)
<return> tailcall(sub_1a534)

int32_t j_sub_1a3d2(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg7)
<return> tailcall(sub_1a3d2)

int32_t sub_1aa0c(int32_t arg1, int32_t arg2, void* arg3)
call(sub_129fe)
undefined

int32_t sub_1ab88(void* arg1 @ r7)
unimplemented  {ldc2l p15, c15, [sp], #0x3ec}
r3 = zx.d([r7 + 6].b)
undefined

int32_t sub_1afa0(int32_t arg1, int32_t arg2, int32_t, int32_t* arg4, int32_t arg5 @ r6, int32_t arg6 @ r7)
temp0.d = r3
[temp0.d].d = r0
[temp0.d + 4].d = r1
[temp0.d + 8].d = r6
[temp0.d + 0xc].d = r7
r3 = r3 + 0x10
undefined

int32_t sub_1b154()
jump(&data_1b126)

int32_t sub_1b53c()
goto 1 @ 0x1bb04

r2 = sp + 0x2a8 {arg_2a8}
undefined

int32_t sub_1b554(int32_t arg1)
goto 1 @ 0x1bb1c

r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
if (r0 != 0) then 14 @ 0x1bada else 15 @ 0x1bb36

undefined

undefined

int32_t sub_1b892(int32_t arg1)
r0 = r0
if (r0 == 0) then 2 @ 0x1b838 else 4 @ 0x1b896

unimplemented  {mrc2 p15, #7, apsr_nzcv, c14, c15, #7}
undefined

undefined

int32_t sub_1b93c(int32_t arg1)
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
r0 = r0
if (r0 != 0) then 13 @ 0x1b8f8 else 14 @ 0x1b956

undefined

undefined

int32_t j_sub_1b892(int32_t arg1)
<return> tailcall(sub_1b892)

int32_t sub_1bab0(int32_t arg1, void* arg2)
goto 1 @ 0x1be76

r0 = r0
r7 = zx.d([r1 + 0x3c].w)  {"\x1bEZE6F"}
undefined

int32_t j_sub_1b93c(int32_t arg1)
<return> tailcall(sub_1b93c)

int32_t sub_1c00c(int32_t, int32_t, int32_t, void* arg4)
pc = [r3].d
pc = [r3 + 4].d
r3 = r3 + 0x354
goto 4 @ &data_1c010

r3 = &data_1c374
undefined

int32_t sub_1c0d4(int32_t, int32_t, int32_t, void* arg4)
pc = [r3].d
pc = [r3 + 4].d
r3 = r3 + 0x370
goto 4 @ &data_1c0d8

unimplemented  {mrc2 p15, #7, apsr_nzcv, c13, c14, #7}
unimplemented  {mrc2 p15, #7, apsr_nzcv, c13, c14, #7}
jump(&data_1bcae)

int32_t sub_1c8c0(void* arg1) __noreturn
r0 = [r0 + 0x50].d
trap(0x98)
{ Does not return }

int32_t sub_4494(int32_t arg1, int32_t arg2, int32_t arg3 @ r4, int32_t arg4 @ r11)
if (flag:z) then 1 else 3 @ 0x4498

r6 = r1 - r0
goto 3 @ 0x4498

if (flag:v) then 4 else 6 @ 0x449c

r1 = r4 & r11 << 0xb
goto 6 @ 0x449c

jump(0xfe0c45a8)

